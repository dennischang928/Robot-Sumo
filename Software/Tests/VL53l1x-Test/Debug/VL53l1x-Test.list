
VL53l1x-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004588  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08004694  08004694  00014694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a0  080048a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080048a0  080048a0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048a0  080048a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080048a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000074  0800491c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800491c  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c73f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b91  00000000  00000000  0002c7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002e370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001891d  00000000  00000000  0002fa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db51  00000000  00000000  0004831d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088473  00000000  00000000  00055e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de2e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003974  00000000  00000000  000de334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800467c 	.word	0x0800467c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800467c 	.word	0x0800467c

0800014c <EnableSensor>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */

void EnableSensor(VL53L1_Dev_t *device)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((*device).XSHUT_GPIO, (*device).XSHUT_PIN, GPIO_PIN_SET);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	6918      	ldr	r0, [r3, #16]
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	8a9b      	ldrh	r3, [r3, #20]
 800015c:	2201      	movs	r2, #1
 800015e:	4619      	mov	r1, r3
 8000160:	f001 fc9a 	bl	8001a98 <HAL_GPIO_WritePin>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}

0800016c <DisableSensor>:

void DisableSensor(VL53L1_Dev_t *device)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((*device).XSHUT_GPIO, (*device).XSHUT_PIN, GPIO_PIN_RESET);
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	6918      	ldr	r0, [r3, #16]
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	8a9b      	ldrh	r3, [r3, #20]
 800017c:	2200      	movs	r2, #0
 800017e:	4619      	mov	r1, r3
 8000180:	f001 fc8a 	bl	8001a98 <HAL_GPIO_WritePin>
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <_write>:

ssize_t _write(int fd, const char *buf, size_t nbyte)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, nbyte, 10);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	b29a      	uxth	r2, r3
 800019c:	230a      	movs	r3, #10
 800019e:	68b9      	ldr	r1, [r7, #8]
 80001a0:	4803      	ldr	r0, [pc, #12]	; (80001b0 <_write+0x24>)
 80001a2:	f003 f925 	bl	80033f0 <HAL_UART_Transmit>
	return (nbyte);
 80001a6:	687b      	ldr	r3, [r7, #4]
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	3710      	adds	r7, #16
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	200000e4 	.word	0x200000e4

080001b4 <SetDeviceAddress>:
	printf("SignalRate: %u, ", SignalRate);
	printf("AmbientPerSpad: %u\n\r", AmbientPerSpad);
}

void SetDeviceAddress(VL53L1_Dev_t *device, uint8_t NewAddress)
{
 80001b4:	b590      	push	{r4, r7, lr}
 80001b6:	b087      	sub	sp, #28
 80001b8:	af04      	add	r7, sp, #16
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	70fb      	strb	r3, [r7, #3]
	VL53L1X_SetI2CAddress(*device, NewAddress);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	78fa      	ldrb	r2, [r7, #3]
 80001c4:	9202      	str	r2, [sp, #8]
 80001c6:	466c      	mov	r4, sp
 80001c8:	f103 0210 	add.w	r2, r3, #16
 80001cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80001d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001d6:	f000 fd22 	bl	8000c1e <VL53L1X_SetI2CAddress>
	(*device).I2cDevAddr = NewAddress;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	78fa      	ldrb	r2, [r7, #3]
 80001de:	709a      	strb	r2, [r3, #2]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd90      	pop	{r4, r7, pc}

080001e8 <InitSensor>:

void InitSensor(VL53L1_Dev_t *device, uint8_t AddressToAssign)
{ // Boot up and initialize the device and assign a new addr to the device.
 80001e8:	b590      	push	{r4, r7, lr}
 80001ea:	b089      	sub	sp, #36	; 0x24
 80001ec:	af04      	add	r7, sp, #16
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	EnableSensor(device);
 80001f4:	6878      	ldr	r0, [r7, #4]
 80001f6:	f7ff ffa9 	bl	800014c <EnableSensor>
	printf("DeviceXSHUTBooted\n\r");
 80001fa:	4843      	ldr	r0, [pc, #268]	; (8000308 <InitSensor+0x120>)
 80001fc:	f003 faaa 	bl	8003754 <iprintf>
	status = VL53L1X_SensorInit(*device);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	466c      	mov	r4, sp
 8000204:	f103 0210 	add.w	r2, r3, #16
 8000208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800020c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000212:	f000 fd23 	bl	8000c5c <VL53L1X_SensorInit>
 8000216:	4603      	mov	r3, r0
 8000218:	461a      	mov	r2, r3
 800021a:	4b3c      	ldr	r3, [pc, #240]	; (800030c <InitSensor+0x124>)
 800021c:	601a      	str	r2, [r3, #0]
	SetDeviceAddress(device, AddressToAssign);
 800021e:	78fb      	ldrb	r3, [r7, #3]
 8000220:	4619      	mov	r1, r3
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f7ff ffc6 	bl	80001b4 <SetDeviceAddress>
	printf("DeviceNewAddr: %X\n\r", (*device).I2cDevAddr);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	789b      	ldrb	r3, [r3, #2]
 800022c:	4619      	mov	r1, r3
 800022e:	4838      	ldr	r0, [pc, #224]	; (8000310 <InitSensor+0x128>)
 8000230:	f003 fa90 	bl	8003754 <iprintf>

	uint8_t byteData;
	status = VL53L1_RdByte(device, 0x010F, &byteData);
 8000234:	f107 030f 	add.w	r3, r7, #15
 8000238:	461a      	mov	r2, r3
 800023a:	f240 110f 	movw	r1, #271	; 0x10f
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f000 fc54 	bl	8000aec <VL53L1_RdByte>
 8000244:	4603      	mov	r3, r0
 8000246:	461a      	mov	r2, r3
 8000248:	4b30      	ldr	r3, [pc, #192]	; (800030c <InitSensor+0x124>)
 800024a:	601a      	str	r2, [r3, #0]
	printf("VL53L1X Model_ID: %X\n\r", byteData);
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	4619      	mov	r1, r3
 8000250:	4830      	ldr	r0, [pc, #192]	; (8000314 <InitSensor+0x12c>)
 8000252:	f003 fa7f 	bl	8003754 <iprintf>
	status = VL53L1_RdByte(device, 0x0110, &byteData);
 8000256:	f107 030f 	add.w	r3, r7, #15
 800025a:	461a      	mov	r2, r3
 800025c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	f000 fc43 	bl	8000aec <VL53L1_RdByte>
 8000266:	4603      	mov	r3, r0
 8000268:	461a      	mov	r2, r3
 800026a:	4b28      	ldr	r3, [pc, #160]	; (800030c <InitSensor+0x124>)
 800026c:	601a      	str	r2, [r3, #0]
	printf("VL53L1X Module_Type: %X\n\r", byteData);
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	4619      	mov	r1, r3
 8000272:	4829      	ldr	r0, [pc, #164]	; (8000318 <InitSensor+0x130>)
 8000274:	f003 fa6e 	bl	8003754 <iprintf>

	while (sensorState == 0)
 8000278:	e016      	b.n	80002a8 <InitSensor+0xc0>
	{
		status = VL53L1X_BootState(*device, &sensorState);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a27      	ldr	r2, [pc, #156]	; (800031c <InitSensor+0x134>)
 800027e:	9202      	str	r2, [sp, #8]
 8000280:	466c      	mov	r4, sp
 8000282:	f103 0210 	add.w	r2, r3, #16
 8000286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800028a:	e884 0003 	stmia.w	r4, {r0, r1}
 800028e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000290:	f001 f888 	bl	80013a4 <VL53L1X_BootState>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b1c      	ldr	r3, [pc, #112]	; (800030c <InitSensor+0x124>)
 800029a:	601a      	str	r2, [r3, #0]
		HAL_Delay(2);
 800029c:	2002      	movs	r0, #2
 800029e:	f001 f96f 	bl	8001580 <HAL_Delay>
		printf("Chip failed to boot\n\r");
 80002a2:	481f      	ldr	r0, [pc, #124]	; (8000320 <InitSensor+0x138>)
 80002a4:	f003 fa56 	bl	8003754 <iprintf>
	while (sensorState == 0)
 80002a8:	4b1c      	ldr	r3, [pc, #112]	; (800031c <InitSensor+0x134>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0e4      	beq.n	800027a <InitSensor+0x92>
	}

	printf("Chip booted\n\r");
 80002b0:	481c      	ldr	r0, [pc, #112]	; (8000324 <InitSensor+0x13c>)
 80002b2:	f003 fa4f 	bl	8003754 <iprintf>

	status = VL53L1X_SetDistanceMode(*device, 1); /* 1=short, 2=long */
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2201      	movs	r2, #1
 80002ba:	9202      	str	r2, [sp, #8]
 80002bc:	466c      	mov	r4, sp
 80002be:	f103 0210 	add.w	r2, r3, #16
 80002c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80002ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002cc:	f000 ffa3 	bl	8001216 <VL53L1X_SetDistanceMode>
 80002d0:	4603      	mov	r3, r0
 80002d2:	461a      	mov	r2, r3
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <InitSensor+0x124>)
 80002d6:	601a      	str	r2, [r3, #0]
	status = VL53L1X_SetROI(*device, 5, 5);		  /* minimum ROI 4,4 */
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2205      	movs	r2, #5
 80002dc:	9203      	str	r2, [sp, #12]
 80002de:	2205      	movs	r2, #5
 80002e0:	9202      	str	r2, [sp, #8]
 80002e2:	466c      	mov	r4, sp
 80002e4:	f103 0210 	add.w	r2, r3, #16
 80002e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80002f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002f2:	f001 f897 	bl	8001424 <VL53L1X_SetROI>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <InitSensor+0x124>)
 80002fc:	601a      	str	r2, [r3, #0]
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	bd90      	pop	{r4, r7, pc}
 8000306:	bf00      	nop
 8000308:	080046e4 	.word	0x080046e4
 800030c:	2000015c 	.word	0x2000015c
 8000310:	080046f8 	.word	0x080046f8
 8000314:	0800470c 	.word	0x0800470c
 8000318:	08004724 	.word	0x08004724
 800031c:	20000160 	.word	0x20000160
 8000320:	08004740 	.word	0x08004740
 8000324:	08004758 	.word	0x08004758

08000328 <InitAllSensors2Ranging.0>:
 */
int main(void)
{
	/* USER CODE BEGIN 1 */
	void InitAllSensors2Ranging()
	{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b087      	sub	sp, #28
 800032c:	af02      	add	r7, sp, #8
 800032e:	f8c7 c004 	str.w	ip, [r7, #4]
		for (int i = 0; i < SensorNumber; i++)
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	e00c      	b.n	8000352 <InitAllSensors2Ranging.0+0x2a>
		{
			DisableSensor(&(devs[i]));
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	4613      	mov	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	4413      	add	r3, r2
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	4a23      	ldr	r2, [pc, #140]	; (80003d0 <InitAllSensors2Ranging.0+0xa8>)
 8000344:	4413      	add	r3, r2
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff10 	bl	800016c <DisableSensor>
		for (int i = 0; i < SensorNumber; i++)
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b01      	cmp	r3, #1
 8000356:	ddef      	ble.n	8000338 <InitAllSensors2Ranging.0+0x10>
		}

		for (int i = 0; i < SensorNumber; i++)
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
 800035c:	e030      	b.n	80003c0 <InitAllSensors2Ranging.0+0x98>
		{
			EnableSensor(&(devs[i]));
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	4613      	mov	r3, r2
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	4413      	add	r3, r2
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	4a19      	ldr	r2, [pc, #100]	; (80003d0 <InitAllSensors2Ranging.0+0xa8>)
 800036a:	4413      	add	r3, r2
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff feed 	bl	800014c <EnableSensor>
			InitSensor(&(devs[i]), DevicesAddresses[i]);
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	4613      	mov	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <InitAllSensors2Ranging.0+0xa8>)
 800037e:	441a      	add	r2, r3
 8000380:	4914      	ldr	r1, [pc, #80]	; (80003d4 <InitAllSensors2Ranging.0+0xac>)
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	440b      	add	r3, r1
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4619      	mov	r1, r3
 800038a:	4610      	mov	r0, r2
 800038c:	f7ff ff2c 	bl	80001e8 <InitSensor>
			status = VL53L1X_StartRanging(devs[i]);
 8000390:	490f      	ldr	r1, [pc, #60]	; (80003d0 <InitAllSensors2Ranging.0+0xa8>)
 8000392:	68ba      	ldr	r2, [r7, #8]
 8000394:	4613      	mov	r3, r2
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	4413      	add	r3, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	440b      	add	r3, r1
 800039e:	466c      	mov	r4, sp
 80003a0:	f103 0210 	add.w	r2, r3, #16
 80003a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80003ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003ae:	f000 fd1c 	bl	8000dea <VL53L1X_StartRanging>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <InitAllSensors2Ranging.0+0xb0>)
 80003b8:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < SensorNumber; i++)
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	3301      	adds	r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	ddcb      	ble.n	800035e <InitAllSensors2Ranging.0+0x36>
		}
	}
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd90      	pop	{r4, r7, pc}
 80003d0:	2000012c 	.word	0x2000012c
 80003d4:	20000000 	.word	0x20000000
 80003d8:	2000015c 	.word	0x2000015c

080003dc <main>:
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b087      	sub	sp, #28
 80003e0:	af04      	add	r7, sp, #16
int main(void)
 80003e2:	f107 0318 	add.w	r3, r7, #24
 80003e6:	603b      	str	r3, [r7, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003e8:	f001 f868 	bl	80014bc <HAL_Init>

	/* USER CODE BEGIN Init */

	for (int i = 0; i < SensorNumber; i++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	e016      	b.n	8000420 <main+0x44>
	{
		devs[i].I2cHandle = &hi2c2;
 80003f2:	4932      	ldr	r1, [pc, #200]	; (80004bc <main+0xe0>)
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4613      	mov	r3, r2
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	4413      	add	r3, r2
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	440b      	add	r3, r1
 8000400:	330c      	adds	r3, #12
 8000402:	4a2f      	ldr	r2, [pc, #188]	; (80004c0 <main+0xe4>)
 8000404:	601a      	str	r2, [r3, #0]
		devs[i].I2cDevAddr = 0x52;
 8000406:	492d      	ldr	r1, [pc, #180]	; (80004bc <main+0xe0>)
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	4613      	mov	r3, r2
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	4413      	add	r3, r2
 8000410:	00db      	lsls	r3, r3, #3
 8000412:	440b      	add	r3, r1
 8000414:	3302      	adds	r3, #2
 8000416:	2252      	movs	r2, #82	; 0x52
 8000418:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SensorNumber; i++)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	3301      	adds	r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2b01      	cmp	r3, #1
 8000424:	dde5      	ble.n	80003f2 <main+0x16>
	}

	devs[0].XSHUT_GPIO = Dev1_GPIO_Port;
 8000426:	4b25      	ldr	r3, [pc, #148]	; (80004bc <main+0xe0>)
 8000428:	4a26      	ldr	r2, [pc, #152]	; (80004c4 <main+0xe8>)
 800042a:	611a      	str	r2, [r3, #16]
	devs[1].XSHUT_GPIO = Dev2_GPIO_Port;
 800042c:	4b23      	ldr	r3, [pc, #140]	; (80004bc <main+0xe0>)
 800042e:	4a25      	ldr	r2, [pc, #148]	; (80004c4 <main+0xe8>)
 8000430:	629a      	str	r2, [r3, #40]	; 0x28

	devs[0].XSHUT_PIN = Dev1_Pin;
 8000432:	4b22      	ldr	r3, [pc, #136]	; (80004bc <main+0xe0>)
 8000434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000438:	829a      	strh	r2, [r3, #20]
	devs[1].XSHUT_PIN = Dev2_Pin;
 800043a:	4b20      	ldr	r3, [pc, #128]	; (80004bc <main+0xe0>)
 800043c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000440:	859a      	strh	r2, [r3, #44]	; 0x2c
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000442:	f000 f849 	bl	80004d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000446:	f000 f8e5 	bl	8000614 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800044a:	f000 f8b9 	bl	80005c0 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 800044e:	f000 f889 	bl	8000564 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	InitAllSensors2Ranging();
 8000452:	463b      	mov	r3, r7
 8000454:	469c      	mov	ip, r3
 8000456:	f7ff ff67 	bl	8000328 <InitAllSensors2Ranging.0>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		status = VL53L1X_GetDistance(devs[0], &Distance);
 800045a:	4b18      	ldr	r3, [pc, #96]	; (80004bc <main+0xe0>)
 800045c:	4a1a      	ldr	r2, [pc, #104]	; (80004c8 <main+0xec>)
 800045e:	9202      	str	r2, [sp, #8]
 8000460:	466c      	mov	r4, sp
 8000462:	f103 0210 	add.w	r2, r3, #16
 8000466:	e892 0003 	ldmia.w	r2, {r0, r1}
 800046a:	e884 0003 	stmia.w	r4, {r0, r1}
 800046e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000470:	f000 ffb9 	bl	80013e6 <VL53L1X_GetDistance>
 8000474:	4603      	mov	r3, r0
 8000476:	461a      	mov	r2, r3
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <main+0xf0>)
 800047a:	601a      	str	r2, [r3, #0]
		printf("Dev0: %u, ", Distance);
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <main+0xec>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	4813      	ldr	r0, [pc, #76]	; (80004d0 <main+0xf4>)
 8000484:	f003 f966 	bl	8003754 <iprintf>
		status = VL53L1X_GetDistance(devs[1], &Distance);
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <main+0xe0>)
 800048a:	4a0f      	ldr	r2, [pc, #60]	; (80004c8 <main+0xec>)
 800048c:	9202      	str	r2, [sp, #8]
 800048e:	466c      	mov	r4, sp
 8000490:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000498:	e884 0003 	stmia.w	r4, {r0, r1}
 800049c:	3318      	adds	r3, #24
 800049e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004a0:	f000 ffa1 	bl	80013e6 <VL53L1X_GetDistance>
 80004a4:	4603      	mov	r3, r0
 80004a6:	461a      	mov	r2, r3
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <main+0xf0>)
 80004aa:	601a      	str	r2, [r3, #0]
		printf("Dev1: %u\n\r", Distance);
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <main+0xec>)
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	4808      	ldr	r0, [pc, #32]	; (80004d4 <main+0xf8>)
 80004b4:	f003 f94e 	bl	8003754 <iprintf>
		status = VL53L1X_GetDistance(devs[0], &Distance);
 80004b8:	e7cf      	b.n	800045a <main+0x7e>
 80004ba:	bf00      	nop
 80004bc:	2000012c 	.word	0x2000012c
 80004c0:	20000090 	.word	0x20000090
 80004c4:	40010c00 	.word	0x40010c00
 80004c8:	20000162 	.word	0x20000162
 80004cc:	2000015c 	.word	0x2000015c
 80004d0:	08004768 	.word	0x08004768
 80004d4:	08004774 	.word	0x08004774

080004d8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b090      	sub	sp, #64	; 0x40
 80004dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	f107 0318 	add.w	r3, r7, #24
 80004e2:	2228      	movs	r2, #40	; 0x28
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f003 f92c 	bl	8003744 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000502:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000514:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000516:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800051a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	f107 0318 	add.w	r3, r7, #24
 8000520:	4618      	mov	r0, r3
 8000522:	f002 fb05 	bl	8002b30 <HAL_RCC_OscConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x58>
	{
		Error_Handler();
 800052c:	f000 f8e0 	bl	80006f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000530:	230f      	movs	r3, #15
 8000532:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000534:	2302      	movs	r3, #2
 8000536:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800053c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000540:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fd72 	bl	8003034 <HAL_RCC_ClockConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000556:	f000 f8cb 	bl	80006f0 <Error_Handler>
	}
}
 800055a:	bf00      	nop
 800055c:	3740      	adds	r7, #64	; 0x40
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <MX_I2C2_Init+0x50>)
 800056a:	4a13      	ldr	r2, [pc, #76]	; (80005b8 <MX_I2C2_Init+0x54>)
 800056c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_I2C2_Init+0x50>)
 8000570:	4a12      	ldr	r2, [pc, #72]	; (80005bc <MX_I2C2_Init+0x58>)
 8000572:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <MX_I2C2_Init+0x50>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_I2C2_Init+0x50>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_I2C2_Init+0x50>)
 8000582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000586:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <MX_I2C2_Init+0x50>)
 800058a:	2200      	movs	r2, #0
 800058c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_I2C2_Init+0x50>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <MX_I2C2_Init+0x50>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <MX_I2C2_Init+0x50>)
 800059c:	2200      	movs	r2, #0
 800059e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <MX_I2C2_Init+0x50>)
 80005a2:	f001 fa91 	bl	8001ac8 <HAL_I2C_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 80005ac:	f000 f8a0 	bl	80006f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000090 	.word	0x20000090
 80005b8:	40005800 	.word	0x40005800
 80005bc:	000186a0 	.word	0x000186a0

080005c0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART1_UART_Init+0x4c>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <MX_USART1_UART_Init+0x50>)
 80005c8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_USART1_UART_Init+0x4c>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_USART1_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART1_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_USART1_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART1_UART_Init+0x4c>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_USART1_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART1_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_USART1_UART_Init+0x4c>)
 80005f8:	f002 feaa 	bl	8003350 <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000602:	f000 f875 	bl	80006f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000e4 	.word	0x200000e4
 8000610:	40013800 	.word	0x40013800

08000614 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000628:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a2d      	ldr	r2, [pc, #180]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0310 	and.w	r3, r3, #16
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000646:	f043 0320 	orr.w	r3, r3, #32
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0320 	and.w	r3, r3, #32
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0308 	and.w	r3, r3, #8
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068e:	4816      	ldr	r0, [pc, #88]	; (80006e8 <MX_GPIO_Init+0xd4>)
 8000690:	f001 fa02 	bl	8001a98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Dev1_Pin | Dev2_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <MX_GPIO_Init+0xd8>)
 800069c:	f001 f9fc 	bl	8001a98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_PIN_Pin */
	GPIO_InitStruct.Pin = LED_PIN_Pin;
 80006a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <MX_GPIO_Init+0xd4>)
 80006ba:	f001 f869 	bl	8001790 <HAL_GPIO_Init>

	/*Configure GPIO pins : Dev1_Pin Dev2_Pin */
	GPIO_InitStruct.Pin = Dev1_Pin | Dev2_Pin;
 80006be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_GPIO_Init+0xd8>)
 80006d8:	f001 f85a 	bl	8001790 <HAL_GPIO_Init>
}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40011000 	.word	0x40011000
 80006ec:	40010c00 	.word	0x40010c00

080006f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_MspInit+0x40>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a0d      	ldr	r2, [pc, #52]	; (800073c <HAL_MspInit+0x40>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <HAL_MspInit+0x40>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_MspInit+0x40>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a07      	ldr	r2, [pc, #28]	; (800073c <HAL_MspInit+0x40>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_MspInit+0x40>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <HAL_I2C_MspInit+0x74>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d124      	bne.n	80007aa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_I2C_MspInit+0x78>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <HAL_I2C_MspInit+0x78>)
 8000766:	f043 0308 	orr.w	r3, r3, #8
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_I2C_MspInit+0x78>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0308 	and.w	r3, r3, #8
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000778:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800077c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077e:	2312      	movs	r3, #18
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <HAL_I2C_MspInit+0x7c>)
 800078e:	f000 ffff 	bl	8001790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_I2C_MspInit+0x78>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_I2C_MspInit+0x78>)
 8000798:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_I2C_MspInit+0x78>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007aa:	bf00      	nop
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40005800 	.word	0x40005800
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <HAL_UART_MspInit+0x8c>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d131      	bne.n	8000844 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_UART_MspInit+0x90>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000814:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4619      	mov	r1, r3
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <HAL_UART_MspInit+0x94>)
 8000826:	f000 ffb3 	bl	8001790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800082a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <HAL_UART_MspInit+0x94>)
 8000840:	f000 ffa6 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40013800 	.word	0x40013800
 8000850:	40021000 	.word	0x40021000
 8000854:	40010800 	.word	0x40010800

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089e:	f000 fe53 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	e00a      	b.n	80008ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008b8:	f3af 8000 	nop.w
 80008bc:	4601      	mov	r1, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	60ba      	str	r2, [r7, #8]
 80008c4:	b2ca      	uxtb	r2, r1
 80008c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3301      	adds	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbf0      	blt.n	80008b8 <_read+0x12>
  }

  return len;
 80008d6:	687b      	ldr	r3, [r7, #4]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000906:	605a      	str	r2, [r3, #4]
  return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <_isatty>:

int _isatty(int file)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800091c:	2301      	movs	r3, #1
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f002 febe 	bl	80036f0 <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <_sbrk+0x64>)
 8000990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20005000 	.word	0x20005000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	20000164 	.word	0x20000164
 80009a8:	20000280 	.word	0x20000280

080009ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af02      	add	r7, sp, #8
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	330a      	adds	r3, #10
 80009c8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	68d8      	ldr	r0, [r3, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	789b      	ldrb	r3, [r3, #2]
 80009d2:	b299      	uxth	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	4613      	mov	r3, r2
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f001 f9b6 	bl	8001d50 <HAL_I2C_Master_Transmit>
 80009e4:	4603      	mov	r3, r0
 80009e6:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80009e8:	693b      	ldr	r3, [r7, #16]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b088      	sub	sp, #32
 80009f6:	af02      	add	r7, sp, #8
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	330a      	adds	r3, #10
 8000a02:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	68d8      	ldr	r0, [r3, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	b299      	uxth	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	f001 fa94 	bl	8001f4c <HAL_I2C_Master_Receive>
 8000a24:	4603      	mov	r3, r0
 8000a26:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8000a28:	693b      	ldr	r3, [r7, #16]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <VL53L1_WrByte>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
 8000a40:	4613      	mov	r3, r2
 8000a42:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8000a48:	887b      	ldrh	r3, [r7, #2]
 8000a4a:	0a1b      	lsrs	r3, r3, #8
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <VL53L1_WrByte+0x50>)
 8000a52:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8000a54:	887b      	ldrh	r3, [r7, #2]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <VL53L1_WrByte+0x50>)
 8000a5a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8000a5c:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <VL53L1_WrByte+0x50>)
 8000a5e:	787b      	ldrb	r3, [r7, #1]
 8000a60:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8000a62:	2203      	movs	r2, #3
 8000a64:	4907      	ldr	r1, [pc, #28]	; (8000a84 <VL53L1_WrByte+0x50>)
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffa6 	bl	80009b8 <_I2CWrite>
 8000a6c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000a74:	23f3      	movs	r3, #243	; 0xf3
 8000a76:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8000a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000168 	.word	0x20000168

08000a88 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]
 8000a94:	4613      	mov	r3, r2
 8000a96:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8000a9c:	887b      	ldrh	r3, [r7, #2]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <VL53L1_WrWord+0x60>)
 8000aa6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <VL53L1_WrWord+0x60>)
 8000aae:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8000ab0:	883b      	ldrh	r3, [r7, #0]
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <VL53L1_WrWord+0x60>)
 8000aba:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8000abc:	883b      	ldrh	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <VL53L1_WrWord+0x60>)
 8000ac2:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <VL53L1_WrWord+0x60>)
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff75 	bl	80009b8 <_I2CWrite>
 8000ace:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000ad6:	23f3      	movs	r3, #243	; 0xf3
 8000ad8:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000168 	.word	0x20000168

08000aec <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	460b      	mov	r3, r1
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8000afe:	897b      	ldrh	r3, [r7, #10]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <VL53L1_RdByte+0x64>)
 8000b08:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8000b0a:	897b      	ldrh	r3, [r7, #10]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <VL53L1_RdByte+0x64>)
 8000b10:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8000b12:	2202      	movs	r2, #2
 8000b14:	490e      	ldr	r1, [pc, #56]	; (8000b50 <VL53L1_RdByte+0x64>)
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff ff4e 	bl	80009b8 <_I2CWrite>
 8000b1c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000b24:	23f3      	movs	r3, #243	; 0xf3
 8000b26:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000b28:	e00c      	b.n	8000b44 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f7ff ff5f 	bl	80009f2 <_I2CRead>
 8000b34:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000b3c:	23f3      	movs	r3, #243	; 0xf3
 8000b3e:	75fb      	strb	r3, [r7, #23]
 8000b40:	e000      	b.n	8000b44 <VL53L1_RdByte+0x58>
    }
done:
 8000b42:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8000b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000168 	.word	0x20000168

08000b54 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8000b66:	897b      	ldrh	r3, [r7, #10]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <VL53L1_RdWord+0x7c>)
 8000b70:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8000b72:	897b      	ldrh	r3, [r7, #10]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <VL53L1_RdWord+0x7c>)
 8000b78:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	4914      	ldr	r1, [pc, #80]	; (8000bd0 <VL53L1_RdWord+0x7c>)
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f7ff ff1a 	bl	80009b8 <_I2CWrite>
 8000b84:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000b8c:	23f3      	movs	r3, #243	; 0xf3
 8000b8e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000b90:	e017      	b.n	8000bc2 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8000b92:	2202      	movs	r2, #2
 8000b94:	490e      	ldr	r1, [pc, #56]	; (8000bd0 <VL53L1_RdWord+0x7c>)
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f7ff ff2b 	bl	80009f2 <_I2CRead>
 8000b9c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000ba4:	23f3      	movs	r3, #243	; 0xf3
 8000ba6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000ba8:	e00b      	b.n	8000bc2 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <VL53L1_RdWord+0x7c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <VL53L1_RdWord+0x7c>)
 8000bb6:	785b      	ldrb	r3, [r3, #1]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8000bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000168 	.word	0x20000168

08000bd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd4:	f7ff feea 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bda:	490c      	ldr	r1, [pc, #48]	; (8000c0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bf0:	4c09      	ldr	r4, [pc, #36]	; (8000c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f002 fd7d 	bl	80036fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c02:	f7ff fbeb 	bl	80003dc <main>
  bx lr
 8000c06:	4770      	bx	lr
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c10:	080048a8 	.word	0x080048a8
  ldr r2, =_sbss
 8000c14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c18:	2000027c 	.word	0x2000027c

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>

08000c1e <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(VL53L1_Dev_t dev, uint8_t new_address)
{
 8000c1e:	b084      	sub	sp, #16
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	f107 0c10 	add.w	ip, r7, #16
 8000c2a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_WrByte(&dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8000c32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	f107 0010 	add.w	r0, r7, #16
 8000c42:	f7ff fef7 	bl	8000a34 <VL53L1_WrByte>
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	return status;
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(VL53L1_Dev_t dev)
{
 8000c5c:	b084      	sub	sp, #16
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af04      	add	r7, sp, #16
 8000c64:	f107 0c10 	add.w	ip, r7, #16
 8000c68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	71bb      	strb	r3, [r7, #6]
	uint8_t Addr = 0x00, tmp=0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	2300      	movs	r3, #0
 8000c76:	717b      	strb	r3, [r7, #5]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000c78:	232d      	movs	r3, #45	; 0x2d
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	e00f      	b.n	8000c9e <VL53L1X_SensorInit+0x42>
		status = VL53L1_WrByte(&dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	b299      	uxth	r1, r3
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	3b2d      	subs	r3, #45	; 0x2d
 8000c86:	4a34      	ldr	r2, [pc, #208]	; (8000d58 <VL53L1X_SensorInit+0xfc>)
 8000c88:	5cd3      	ldrb	r3, [r2, r3]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	f107 0010 	add.w	r0, r7, #16
 8000c90:	f7ff fed0 	bl	8000a34 <VL53L1_WrByte>
 8000c94:	4603      	mov	r3, r0
 8000c96:	71bb      	strb	r3, [r7, #6]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b87      	cmp	r3, #135	; 0x87
 8000ca2:	d9ec      	bls.n	8000c7e <VL53L1X_SensorInit+0x22>
	}
	status = VL53L1X_StartRanging(dev);
 8000ca4:	466a      	mov	r2, sp
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cae:	e882 0003 	stmia.w	r2, {r0, r1}
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb8:	f000 f897 	bl	8000dea <VL53L1X_StartRanging>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71bb      	strb	r3, [r7, #6]
	while(tmp==0){
 8000cc0:	e00f      	b.n	8000ce2 <VL53L1X_SensorInit+0x86>
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 8000cc2:	1d7b      	adds	r3, r7, #5
 8000cc4:	9302      	str	r3, [sp, #8]
 8000cc6:	466a      	mov	r2, sp
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cd0:	e882 0003 	stmia.w	r2, {r0, r1}
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cda:	f000 f8bc 	bl	8000e56 <VL53L1X_CheckForDataReady>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71bb      	strb	r3, [r7, #6]
	while(tmp==0){
 8000ce2:	797b      	ldrb	r3, [r7, #5]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0ec      	beq.n	8000cc2 <VL53L1X_SensorInit+0x66>
	}
	tmp  = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	717b      	strb	r3, [r7, #5]
	status = VL53L1X_ClearInterrupt(dev);
 8000cec:	466a      	mov	r2, sp
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cf6:	e882 0003 	stmia.w	r2, {r0, r1}
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d00:	f000 f82c 	bl	8000d5c <VL53L1X_ClearInterrupt>
 8000d04:	4603      	mov	r3, r0
 8000d06:	71bb      	strb	r3, [r7, #6]
	status = VL53L1X_StopRanging(dev);
 8000d08:	466a      	mov	r2, sp
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d12:	e882 0003 	stmia.w	r2, {r0, r1}
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1c:	f000 f880 	bl	8000e20 <VL53L1X_StopRanging>
 8000d20:	4603      	mov	r3, r0
 8000d22:	71bb      	strb	r3, [r7, #6]
	status = VL53L1_WrByte(&dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000d24:	2209      	movs	r2, #9
 8000d26:	2108      	movs	r1, #8
 8000d28:	f107 0010 	add.w	r0, r7, #16
 8000d2c:	f7ff fe82 	bl	8000a34 <VL53L1_WrByte>
 8000d30:	4603      	mov	r3, r0
 8000d32:	71bb      	strb	r3, [r7, #6]
	status = VL53L1_WrByte(&dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000d34:	2200      	movs	r2, #0
 8000d36:	210b      	movs	r1, #11
 8000d38:	f107 0010 	add.w	r0, r7, #16
 8000d3c:	f7ff fe7a 	bl	8000a34 <VL53L1_WrByte>
 8000d40:	4603      	mov	r3, r0
 8000d42:	71bb      	strb	r3, [r7, #6]
	return status;
 8000d44:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d52:	b004      	add	sp, #16
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	08004798 	.word	0x08004798

08000d5c <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(VL53L1_Dev_t dev)
{
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	f107 0c10 	add.w	ip, r7, #16
 8000d68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_WrByte(&dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2186      	movs	r1, #134	; 0x86
 8000d74:	f107 0010 	add.w	r0, r7, #16
 8000d78:	f7ff fe5c 	bl	8000a34 <VL53L1_WrByte>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
	return status;
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d8e:	b004      	add	sp, #16
 8000d90:	4770      	bx	lr

08000d92 <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(&dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(VL53L1_Dev_t dev, uint8_t *pInterruptPolarity)
{
 8000d92:	b084      	sub	sp, #16
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	f107 0c10 	add.w	ip, r7, #16
 8000d9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_RdByte(&dev, GPIO_HV_MUX__CTRL, &Temp);
 8000da6:	1dbb      	adds	r3, r7, #6
 8000da8:	461a      	mov	r2, r3
 8000daa:	2130      	movs	r1, #48	; 0x30
 8000dac:	f107 0010 	add.w	r0, r7, #16
 8000db0:	f7ff fe9c 	bl	8000aec <VL53L1_RdByte>
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
	Temp = Temp & 0x10;
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	71bb      	strb	r3, [r7, #6]
	*pInterruptPolarity = !(Temp>>4);
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf0c      	ite	eq
 8000dcc:	2301      	moveq	r3, #1
 8000dce:	2300      	movne	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd6:	701a      	strb	r2, [r3, #0]
	return status;
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000de6:	b004      	add	sp, #16
 8000de8:	4770      	bx	lr

08000dea <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(VL53L1_Dev_t dev)
{
 8000dea:	b084      	sub	sp, #16
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	f107 0c10 	add.w	ip, r7, #16
 8000df6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000dfe:	2240      	movs	r2, #64	; 0x40
 8000e00:	2187      	movs	r1, #135	; 0x87
 8000e02:	f107 0010 	add.w	r0, r7, #16
 8000e06:	f7ff fe15 	bl	8000a34 <VL53L1_WrByte>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	return status;
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e1c:	b004      	add	sp, #16
 8000e1e:	4770      	bx	lr

08000e20 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(VL53L1_Dev_t dev)
{
 8000e20:	b084      	sub	sp, #16
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	f107 0c10 	add.w	ip, r7, #16
 8000e2c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8000e34:	2200      	movs	r2, #0
 8000e36:	2187      	movs	r1, #135	; 0x87
 8000e38:	f107 0010 	add.w	r0, r7, #16
 8000e3c:	f7ff fdfa 	bl	8000a34 <VL53L1_WrByte>
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
	return status;
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e52:	b004      	add	sp, #16
 8000e54:	4770      	bx	lr

08000e56 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(VL53L1_Dev_t dev, uint8_t *isDataReady)
{
 8000e56:	b084      	sub	sp, #16
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af04      	add	r7, sp, #16
 8000e5e:	f107 0c10 	add.w	ip, r7, #16
 8000e62:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000e6a:	1d7b      	adds	r3, r7, #5
 8000e6c:	9302      	str	r3, [sp, #8]
 8000e6e:	466a      	mov	r2, sp
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e78:	e882 0003 	stmia.w	r2, {r0, r1}
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e82:	f7ff ff86 	bl	8000d92 <VL53L1X_GetInterruptPolarity>
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	status = VL53L1_RdByte(&dev, GPIO__TIO_HV_STATUS, &Temp);
 8000e8a:	1dbb      	adds	r3, r7, #6
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	2131      	movs	r1, #49	; 0x31
 8000e90:	f107 0010 	add.w	r0, r7, #16
 8000e94:	f7ff fe2a 	bl	8000aec <VL53L1_RdByte>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10c      	bne.n	8000ebe <VL53L1X_CheckForDataReady+0x68>
		if ((Temp & 1) == IntPol)
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	797a      	ldrb	r2, [r7, #5]
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d103      	bne.n	8000eb8 <VL53L1X_CheckForDataReady+0x62>
			*isDataReady = 1;
 8000eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e002      	b.n	8000ebe <VL53L1X_CheckForDataReady+0x68>
		else
			*isDataReady = 0;
 8000eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ecc:	b004      	add	sp, #16
 8000ece:	4770      	bx	lr

08000ed0 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(VL53L1_Dev_t dev, uint16_t TimingBudgetInMs)
{
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af04      	add	r7, sp, #16
 8000ed8:	f107 0c10 	add.w	ip, r7, #16
 8000edc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	71fb      	strb	r3, [r7, #7]

	status = VL53L1X_GetDistanceMode(dev, &DM);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	9302      	str	r3, [sp, #8]
 8000ee8:	466a      	mov	r2, sp
 8000eea:	f107 0320 	add.w	r3, r7, #32
 8000eee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ef2:	e882 0003 	stmia.w	r2, {r0, r1}
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000efc:	f000 fa2a 	bl	8001354 <VL53L1X_GetDistanceMode>
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
	if (DM == 0)
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <VL53L1X_SetTimingBudgetInMs+0x3e>
		return 1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e0f6      	b.n	80010fc <VL53L1X_SetTimingBudgetInMs+0x22c>
	else if (DM == 1) {	/* Short DistanceMode */
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	f040 8082 	bne.w	800101a <VL53L1X_SetTimingBudgetInMs+0x14a>
		switch (TimingBudgetInMs) {
 8000f16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f1c:	d06b      	beq.n	8000ff6 <VL53L1X_SetTimingBudgetInMs+0x126>
 8000f1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f22:	dc77      	bgt.n	8001014 <VL53L1X_SetTimingBudgetInMs+0x144>
 8000f24:	2bc8      	cmp	r3, #200	; 0xc8
 8000f26:	d057      	beq.n	8000fd8 <VL53L1X_SetTimingBudgetInMs+0x108>
 8000f28:	2bc8      	cmp	r3, #200	; 0xc8
 8000f2a:	dc73      	bgt.n	8001014 <VL53L1X_SetTimingBudgetInMs+0x144>
 8000f2c:	2b64      	cmp	r3, #100	; 0x64
 8000f2e:	d044      	beq.n	8000fba <VL53L1X_SetTimingBudgetInMs+0xea>
 8000f30:	2b64      	cmp	r3, #100	; 0x64
 8000f32:	dc6f      	bgt.n	8001014 <VL53L1X_SetTimingBudgetInMs+0x144>
 8000f34:	2b32      	cmp	r3, #50	; 0x32
 8000f36:	d031      	beq.n	8000f9c <VL53L1X_SetTimingBudgetInMs+0xcc>
 8000f38:	2b32      	cmp	r3, #50	; 0x32
 8000f3a:	dc6b      	bgt.n	8001014 <VL53L1X_SetTimingBudgetInMs+0x144>
 8000f3c:	2b21      	cmp	r3, #33	; 0x21
 8000f3e:	d020      	beq.n	8000f82 <VL53L1X_SetTimingBudgetInMs+0xb2>
 8000f40:	2b21      	cmp	r3, #33	; 0x21
 8000f42:	dc67      	bgt.n	8001014 <VL53L1X_SetTimingBudgetInMs+0x144>
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d002      	beq.n	8000f4e <VL53L1X_SetTimingBudgetInMs+0x7e>
 8000f48:	2b14      	cmp	r3, #20
 8000f4a:	d00d      	beq.n	8000f68 <VL53L1X_SetTimingBudgetInMs+0x98>
 8000f4c:	e062      	b.n	8001014 <VL53L1X_SetTimingBudgetInMs+0x144>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000f4e:	221d      	movs	r2, #29
 8000f50:	215e      	movs	r1, #94	; 0x5e
 8000f52:	f107 0010 	add.w	r0, r7, #16
 8000f56:	f7ff fd97 	bl	8000a88 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000f5a:	2227      	movs	r2, #39	; 0x27
 8000f5c:	2161      	movs	r1, #97	; 0x61
 8000f5e:	f107 0010 	add.w	r0, r7, #16
 8000f62:	f7ff fd91 	bl	8000a88 <VL53L1_WrWord>
					0x0027);
			break;
 8000f66:	e0c7      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 20:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000f68:	2251      	movs	r2, #81	; 0x51
 8000f6a:	215e      	movs	r1, #94	; 0x5e
 8000f6c:	f107 0010 	add.w	r0, r7, #16
 8000f70:	f7ff fd8a 	bl	8000a88 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000f74:	226e      	movs	r2, #110	; 0x6e
 8000f76:	2161      	movs	r1, #97	; 0x61
 8000f78:	f107 0010 	add.w	r0, r7, #16
 8000f7c:	f7ff fd84 	bl	8000a88 <VL53L1_WrWord>
					0x006E);
			break;
 8000f80:	e0ba      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 33:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000f82:	22d6      	movs	r2, #214	; 0xd6
 8000f84:	215e      	movs	r1, #94	; 0x5e
 8000f86:	f107 0010 	add.w	r0, r7, #16
 8000f8a:	f7ff fd7d 	bl	8000a88 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000f8e:	226e      	movs	r2, #110	; 0x6e
 8000f90:	2161      	movs	r1, #97	; 0x61
 8000f92:	f107 0010 	add.w	r0, r7, #16
 8000f96:	f7ff fd77 	bl	8000a88 <VL53L1_WrWord>
					0x006E);
			break;
 8000f9a:	e0ad      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 50:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000f9c:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8000fa0:	215e      	movs	r1, #94	; 0x5e
 8000fa2:	f107 0010 	add.w	r0, r7, #16
 8000fa6:	f7ff fd6f 	bl	8000a88 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000faa:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8000fae:	2161      	movs	r1, #97	; 0x61
 8000fb0:	f107 0010 	add.w	r0, r7, #16
 8000fb4:	f7ff fd68 	bl	8000a88 <VL53L1_WrWord>
					0x01E8);
			break;
 8000fb8:	e09e      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 100:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000fba:	f240 22e1 	movw	r2, #737	; 0x2e1
 8000fbe:	215e      	movs	r1, #94	; 0x5e
 8000fc0:	f107 0010 	add.w	r0, r7, #16
 8000fc4:	f7ff fd60 	bl	8000a88 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000fc8:	f44f 7262 	mov.w	r2, #904	; 0x388
 8000fcc:	2161      	movs	r1, #97	; 0x61
 8000fce:	f107 0010 	add.w	r0, r7, #16
 8000fd2:	f7ff fd59 	bl	8000a88 <VL53L1_WrWord>
					0x0388);
			break;
 8000fd6:	e08f      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 200:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000fd8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8000fdc:	215e      	movs	r1, #94	; 0x5e
 8000fde:	f107 0010 	add.w	r0, r7, #16
 8000fe2:	f7ff fd51 	bl	8000a88 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000fe6:	f240 4296 	movw	r2, #1174	; 0x496
 8000fea:	2161      	movs	r1, #97	; 0x61
 8000fec:	f107 0010 	add.w	r0, r7, #16
 8000ff0:	f7ff fd4a 	bl	8000a88 <VL53L1_WrWord>
					0x0496);
			break;
 8000ff4:	e080      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 500:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000ff6:	f240 5291 	movw	r2, #1425	; 0x591
 8000ffa:	215e      	movs	r1, #94	; 0x5e
 8000ffc:	f107 0010 	add.w	r0, r7, #16
 8001000:	f7ff fd42 	bl	8000a88 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001004:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001008:	2161      	movs	r1, #97	; 0x61
 800100a:	f107 0010 	add.w	r0, r7, #16
 800100e:	f7ff fd3b 	bl	8000a88 <VL53L1_WrWord>
					0x05C1);
			break;
 8001012:	e071      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		default:
			status = 1;
 8001014:	2301      	movs	r3, #1
 8001016:	71fb      	strb	r3, [r7, #7]
			break;
 8001018:	e06e      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		}
	} else {
		switch (TimingBudgetInMs) {
 800101a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800101c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001020:	d058      	beq.n	80010d4 <VL53L1X_SetTimingBudgetInMs+0x204>
 8001022:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001026:	dc64      	bgt.n	80010f2 <VL53L1X_SetTimingBudgetInMs+0x222>
 8001028:	2bc8      	cmp	r3, #200	; 0xc8
 800102a:	d044      	beq.n	80010b6 <VL53L1X_SetTimingBudgetInMs+0x1e6>
 800102c:	2bc8      	cmp	r3, #200	; 0xc8
 800102e:	dc60      	bgt.n	80010f2 <VL53L1X_SetTimingBudgetInMs+0x222>
 8001030:	2b64      	cmp	r3, #100	; 0x64
 8001032:	d031      	beq.n	8001098 <VL53L1X_SetTimingBudgetInMs+0x1c8>
 8001034:	2b64      	cmp	r3, #100	; 0x64
 8001036:	dc5c      	bgt.n	80010f2 <VL53L1X_SetTimingBudgetInMs+0x222>
 8001038:	2b32      	cmp	r3, #50	; 0x32
 800103a:	d020      	beq.n	800107e <VL53L1X_SetTimingBudgetInMs+0x1ae>
 800103c:	2b32      	cmp	r3, #50	; 0x32
 800103e:	dc58      	bgt.n	80010f2 <VL53L1X_SetTimingBudgetInMs+0x222>
 8001040:	2b14      	cmp	r3, #20
 8001042:	d002      	beq.n	800104a <VL53L1X_SetTimingBudgetInMs+0x17a>
 8001044:	2b21      	cmp	r3, #33	; 0x21
 8001046:	d00d      	beq.n	8001064 <VL53L1X_SetTimingBudgetInMs+0x194>
 8001048:	e053      	b.n	80010f2 <VL53L1X_SetTimingBudgetInMs+0x222>
		case 20:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800104a:	221e      	movs	r2, #30
 800104c:	215e      	movs	r1, #94	; 0x5e
 800104e:	f107 0010 	add.w	r0, r7, #16
 8001052:	f7ff fd19 	bl	8000a88 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001056:	2222      	movs	r2, #34	; 0x22
 8001058:	2161      	movs	r1, #97	; 0x61
 800105a:	f107 0010 	add.w	r0, r7, #16
 800105e:	f7ff fd13 	bl	8000a88 <VL53L1_WrWord>
					0x0022);
			break;
 8001062:	e049      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 33:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001064:	2260      	movs	r2, #96	; 0x60
 8001066:	215e      	movs	r1, #94	; 0x5e
 8001068:	f107 0010 	add.w	r0, r7, #16
 800106c:	f7ff fd0c 	bl	8000a88 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001070:	226e      	movs	r2, #110	; 0x6e
 8001072:	2161      	movs	r1, #97	; 0x61
 8001074:	f107 0010 	add.w	r0, r7, #16
 8001078:	f7ff fd06 	bl	8000a88 <VL53L1_WrWord>
					0x006E);
			break;
 800107c:	e03c      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 50:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800107e:	22ad      	movs	r2, #173	; 0xad
 8001080:	215e      	movs	r1, #94	; 0x5e
 8001082:	f107 0010 	add.w	r0, r7, #16
 8001086:	f7ff fcff 	bl	8000a88 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800108a:	22c6      	movs	r2, #198	; 0xc6
 800108c:	2161      	movs	r1, #97	; 0x61
 800108e:	f107 0010 	add.w	r0, r7, #16
 8001092:	f7ff fcf9 	bl	8000a88 <VL53L1_WrWord>
					0x00C6);
			break;
 8001096:	e02f      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 100:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001098:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800109c:	215e      	movs	r1, #94	; 0x5e
 800109e:	f107 0010 	add.w	r0, r7, #16
 80010a2:	f7ff fcf1 	bl	8000a88 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80010a6:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 80010aa:	2161      	movs	r1, #97	; 0x61
 80010ac:	f107 0010 	add.w	r0, r7, #16
 80010b0:	f7ff fcea 	bl	8000a88 <VL53L1_WrWord>
					0x01EA);
			break;
 80010b4:	e020      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 200:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80010b6:	f240 22d9 	movw	r2, #729	; 0x2d9
 80010ba:	215e      	movs	r1, #94	; 0x5e
 80010bc:	f107 0010 	add.w	r0, r7, #16
 80010c0:	f7ff fce2 	bl	8000a88 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80010c4:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 80010c8:	2161      	movs	r1, #97	; 0x61
 80010ca:	f107 0010 	add.w	r0, r7, #16
 80010ce:	f7ff fcdb 	bl	8000a88 <VL53L1_WrWord>
					0x02F8);
			break;
 80010d2:	e011      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 500:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80010d4:	f240 428f 	movw	r2, #1167	; 0x48f
 80010d8:	215e      	movs	r1, #94	; 0x5e
 80010da:	f107 0010 	add.w	r0, r7, #16
 80010de:	f7ff fcd3 	bl	8000a88 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80010e2:	f240 42a4 	movw	r2, #1188	; 0x4a4
 80010e6:	2161      	movs	r1, #97	; 0x61
 80010e8:	f107 0010 	add.w	r0, r7, #16
 80010ec:	f7ff fccc 	bl	8000a88 <VL53L1_WrWord>
					0x04A4);
			break;
 80010f0:	e002      	b.n	80010f8 <VL53L1X_SetTimingBudgetInMs+0x228>
		default:
			status = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	71fb      	strb	r3, [r7, #7]
			break;
 80010f6:	bf00      	nop
		}
	}
	return status;
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001106:	b004      	add	sp, #16
 8001108:	4770      	bx	lr

0800110a <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(VL53L1_Dev_t dev, uint16_t *pTimingBudget)
{
 800110a:	b084      	sub	sp, #16
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	f107 0c10 	add.w	ip, r7, #16
 8001116:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_RdWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	461a      	mov	r2, r3
 8001122:	215e      	movs	r1, #94	; 0x5e
 8001124:	f107 0010 	add.w	r0, r7, #16
 8001128:	f7ff fd14 	bl	8000b54 <VL53L1_RdWord>
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
	switch (Temp) {
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	f240 5291 	movw	r2, #1425	; 0x591
 8001136:	4293      	cmp	r3, r2
 8001138:	d05b      	beq.n	80011f2 <VL53L1X_GetTimingBudgetInMs+0xe8>
 800113a:	f240 5291 	movw	r2, #1425	; 0x591
 800113e:	4293      	cmp	r3, r2
 8001140:	dc5c      	bgt.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001142:	f240 428f 	movw	r2, #1167	; 0x48f
 8001146:	4293      	cmp	r3, r2
 8001148:	d053      	beq.n	80011f2 <VL53L1X_GetTimingBudgetInMs+0xe8>
 800114a:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 800114e:	da55      	bge.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001150:	f240 32e1 	movw	r2, #993	; 0x3e1
 8001154:	4293      	cmp	r3, r2
 8001156:	d048      	beq.n	80011ea <VL53L1X_GetTimingBudgetInMs+0xe0>
 8001158:	f240 32e1 	movw	r2, #993	; 0x3e1
 800115c:	4293      	cmp	r3, r2
 800115e:	dc4d      	bgt.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001160:	f240 22e1 	movw	r2, #737	; 0x2e1
 8001164:	4293      	cmp	r3, r2
 8001166:	d03c      	beq.n	80011e2 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8001168:	f240 22e1 	movw	r2, #737	; 0x2e1
 800116c:	4293      	cmp	r3, r2
 800116e:	dc45      	bgt.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001170:	f240 22d9 	movw	r2, #729	; 0x2d9
 8001174:	4293      	cmp	r3, r2
 8001176:	d038      	beq.n	80011ea <VL53L1X_GetTimingBudgetInMs+0xe0>
 8001178:	f240 22d9 	movw	r2, #729	; 0x2d9
 800117c:	4293      	cmp	r3, r2
 800117e:	dc3d      	bgt.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001180:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001184:	d02d      	beq.n	80011e2 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8001186:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800118a:	dc37      	bgt.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
 800118c:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8001190:	d023      	beq.n	80011da <VL53L1X_GetTimingBudgetInMs+0xd0>
 8001192:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8001196:	dc31      	bgt.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001198:	2bd6      	cmp	r3, #214	; 0xd6
 800119a:	d01a      	beq.n	80011d2 <VL53L1X_GetTimingBudgetInMs+0xc8>
 800119c:	2bd6      	cmp	r3, #214	; 0xd6
 800119e:	dc2d      	bgt.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
 80011a0:	2bad      	cmp	r3, #173	; 0xad
 80011a2:	d01a      	beq.n	80011da <VL53L1X_GetTimingBudgetInMs+0xd0>
 80011a4:	2bad      	cmp	r3, #173	; 0xad
 80011a6:	dc29      	bgt.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
 80011a8:	2b60      	cmp	r3, #96	; 0x60
 80011aa:	d012      	beq.n	80011d2 <VL53L1X_GetTimingBudgetInMs+0xc8>
 80011ac:	2b60      	cmp	r3, #96	; 0x60
 80011ae:	dc25      	bgt.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
 80011b0:	2b51      	cmp	r3, #81	; 0x51
 80011b2:	d00a      	beq.n	80011ca <VL53L1X_GetTimingBudgetInMs+0xc0>
 80011b4:	2b51      	cmp	r3, #81	; 0x51
 80011b6:	dc21      	bgt.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
 80011b8:	2b1d      	cmp	r3, #29
 80011ba:	d002      	beq.n	80011c2 <VL53L1X_GetTimingBudgetInMs+0xb8>
 80011bc:	2b1e      	cmp	r3, #30
 80011be:	d004      	beq.n	80011ca <VL53L1X_GetTimingBudgetInMs+0xc0>
 80011c0:	e01c      	b.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xf2>
		case 0x001D :
			*pTimingBudget = 15;
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	220f      	movs	r2, #15
 80011c6:	801a      	strh	r2, [r3, #0]
			break;
 80011c8:	e01c      	b.n	8001204 <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 80011ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011cc:	2214      	movs	r2, #20
 80011ce:	801a      	strh	r2, [r3, #0]
			break;
 80011d0:	e018      	b.n	8001204 <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	2221      	movs	r2, #33	; 0x21
 80011d6:	801a      	strh	r2, [r3, #0]
			break;
 80011d8:	e014      	b.n	8001204 <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 80011da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011dc:	2232      	movs	r2, #50	; 0x32
 80011de:	801a      	strh	r2, [r3, #0]
			break;
 80011e0:	e010      	b.n	8001204 <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	2264      	movs	r2, #100	; 0x64
 80011e6:	801a      	strh	r2, [r3, #0]
			break;
 80011e8:	e00c      	b.n	8001204 <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 80011ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ec:	22c8      	movs	r2, #200	; 0xc8
 80011ee:	801a      	strh	r2, [r3, #0]
			break;
 80011f0:	e008      	b.n	8001204 <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 80011f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011f8:	801a      	strh	r2, [r3, #0]
			break;
 80011fa:	e003      	b.n	8001204 <VL53L1X_GetTimingBudgetInMs+0xfa>
		default:
			*pTimingBudget = 0;
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	2200      	movs	r2, #0
 8001200:	801a      	strh	r2, [r3, #0]
			break;
 8001202:	bf00      	nop
	}
	return status;
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001212:	b004      	add	sp, #16
 8001214:	4770      	bx	lr

08001216 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(VL53L1_Dev_t dev, uint16_t DM)
{
 8001216:	b084      	sub	sp, #16
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af04      	add	r7, sp, #16
 800121e:	f107 0c10 	add.w	ip, r7, #16
 8001222:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	71fb      	strb	r3, [r7, #7]

	status = VL53L1X_GetTimingBudgetInMs(dev, &TB);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	466a      	mov	r2, sp
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001238:	e882 0003 	stmia.w	r2, {r0, r1}
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001242:	f7ff ff62 	bl	800110a <VL53L1X_GetTimingBudgetInMs>
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	switch (DM) {
 800124a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800124c:	2b01      	cmp	r3, #1
 800124e:	d002      	beq.n	8001256 <VL53L1X_SetDistanceMode+0x40>
 8001250:	2b02      	cmp	r3, #2
 8001252:	d033      	beq.n	80012bc <VL53L1X_SetDistanceMode+0xa6>
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
		status = VL53L1_WrWord(&dev, SD_CONFIG__WOI_SD0, 0x0F0D);
		status = VL53L1_WrWord(&dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
		break;
	default:
		break;
 8001254:	e065      	b.n	8001322 <VL53L1X_SetDistanceMode+0x10c>
		status = VL53L1_WrByte(&dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8001256:	2214      	movs	r2, #20
 8001258:	214b      	movs	r1, #75	; 0x4b
 800125a:	f107 0010 	add.w	r0, r7, #16
 800125e:	f7ff fbe9 	bl	8000a34 <VL53L1_WrByte>
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8001266:	2207      	movs	r2, #7
 8001268:	2160      	movs	r1, #96	; 0x60
 800126a:	f107 0010 	add.w	r0, r7, #16
 800126e:	f7ff fbe1 	bl	8000a34 <VL53L1_WrByte>
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8001276:	2205      	movs	r2, #5
 8001278:	2163      	movs	r1, #99	; 0x63
 800127a:	f107 0010 	add.w	r0, r7, #16
 800127e:	f7ff fbd9 	bl	8000a34 <VL53L1_WrByte>
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8001286:	2238      	movs	r2, #56	; 0x38
 8001288:	2169      	movs	r1, #105	; 0x69
 800128a:	f107 0010 	add.w	r0, r7, #16
 800128e:	f7ff fbd1 	bl	8000a34 <VL53L1_WrByte>
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrWord(&dev, SD_CONFIG__WOI_SD0, 0x0705);
 8001296:	f240 7205 	movw	r2, #1797	; 0x705
 800129a:	2178      	movs	r1, #120	; 0x78
 800129c:	f107 0010 	add.w	r0, r7, #16
 80012a0:	f7ff fbf2 	bl	8000a88 <VL53L1_WrWord>
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrWord(&dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 80012a8:	f240 6206 	movw	r2, #1542	; 0x606
 80012ac:	217a      	movs	r1, #122	; 0x7a
 80012ae:	f107 0010 	add.w	r0, r7, #16
 80012b2:	f7ff fbe9 	bl	8000a88 <VL53L1_WrWord>
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
		break;
 80012ba:	e032      	b.n	8001322 <VL53L1X_SetDistanceMode+0x10c>
		status = VL53L1_WrByte(&dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 80012bc:	220a      	movs	r2, #10
 80012be:	214b      	movs	r1, #75	; 0x4b
 80012c0:	f107 0010 	add.w	r0, r7, #16
 80012c4:	f7ff fbb6 	bl	8000a34 <VL53L1_WrByte>
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 80012cc:	220f      	movs	r2, #15
 80012ce:	2160      	movs	r1, #96	; 0x60
 80012d0:	f107 0010 	add.w	r0, r7, #16
 80012d4:	f7ff fbae 	bl	8000a34 <VL53L1_WrByte>
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 80012dc:	220d      	movs	r2, #13
 80012de:	2163      	movs	r1, #99	; 0x63
 80012e0:	f107 0010 	add.w	r0, r7, #16
 80012e4:	f7ff fba6 	bl	8000a34 <VL53L1_WrByte>
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 80012ec:	22b8      	movs	r2, #184	; 0xb8
 80012ee:	2169      	movs	r1, #105	; 0x69
 80012f0:	f107 0010 	add.w	r0, r7, #16
 80012f4:	f7ff fb9e 	bl	8000a34 <VL53L1_WrByte>
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrWord(&dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 80012fc:	f640 720d 	movw	r2, #3853	; 0xf0d
 8001300:	2178      	movs	r1, #120	; 0x78
 8001302:	f107 0010 	add.w	r0, r7, #16
 8001306:	f7ff fbbf 	bl	8000a88 <VL53L1_WrWord>
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrWord(&dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 800130e:	f640 620e 	movw	r2, #3598	; 0xe0e
 8001312:	217a      	movs	r1, #122	; 0x7a
 8001314:	f107 0010 	add.w	r0, r7, #16
 8001318:	f7ff fbb6 	bl	8000a88 <VL53L1_WrWord>
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
		break;
 8001320:	bf00      	nop
	}
	status = VL53L1X_SetTimingBudgetInMs(dev,TB);
 8001322:	88bb      	ldrh	r3, [r7, #4]
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	466a      	mov	r2, sp
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001330:	e882 0003 	stmia.w	r2, {r0, r1}
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800133a:	f7ff fdc9 	bl	8000ed0 <VL53L1X_SetTimingBudgetInMs>
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	return status;
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001350:	b004      	add	sp, #16
 8001352:	4770      	bx	lr

08001354 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(VL53L1_Dev_t dev, uint16_t *DM)
{
 8001354:	b084      	sub	sp, #16
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	f107 0c10 	add.w	ip, r7, #16
 8001360:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t TempDM, status=0;
 8001364:	2300      	movs	r3, #0
 8001366:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_RdByte(&dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8001368:	1dbb      	adds	r3, r7, #6
 800136a:	461a      	mov	r2, r3
 800136c:	214b      	movs	r1, #75	; 0x4b
 800136e:	f107 0010 	add.w	r0, r7, #16
 8001372:	f7ff fbbb 	bl	8000aec <VL53L1_RdByte>
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	if (TempDM == 0x14)
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	2b14      	cmp	r3, #20
 800137e:	d102      	bne.n	8001386 <VL53L1X_GetDistanceMode+0x32>
		*DM=1;
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	2201      	movs	r2, #1
 8001384:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	2b0a      	cmp	r3, #10
 800138a:	d102      	bne.n	8001392 <VL53L1X_GetDistanceMode+0x3e>
		*DM=2;
 800138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138e:	2202      	movs	r2, #2
 8001390:	801a      	strh	r2, [r3, #0]
	return status;
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013a0:	b004      	add	sp, #16
 80013a2:	4770      	bx	lr

080013a4 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(VL53L1_Dev_t dev, uint8_t *state)
{
 80013a4:	b084      	sub	sp, #16
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	f107 0c10 	add.w	ip, r7, #16
 80013b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	71bb      	strb	r3, [r7, #6]

	status = VL53L1_RdByte(&dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80013bc:	1dbb      	adds	r3, r7, #6
 80013be:	461a      	mov	r2, r3
 80013c0:	21e5      	movs	r1, #229	; 0xe5
 80013c2:	f107 0010 	add.w	r0, r7, #16
 80013c6:	f7ff fb91 	bl	8000aec <VL53L1_RdByte>
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	*state = tmp;
 80013ce:	79ba      	ldrb	r2, [r7, #6]
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	701a      	strb	r2, [r3, #0]
	return status;
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e2:	b004      	add	sp, #16
 80013e4:	4770      	bx	lr

080013e6 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(VL53L1_Dev_t dev, uint16_t *distance)
{
 80013e6:	b084      	sub	sp, #16
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	f107 0c10 	add.w	ip, r7, #16
 80013f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	status = (VL53L1_RdWord(&dev,
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	461a      	mov	r2, r3
 80013fe:	2196      	movs	r1, #150	; 0x96
 8001400:	f107 0010 	add.w	r0, r7, #16
 8001404:	f7ff fba6 	bl	8000b54 <VL53L1_RdWord>
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800140c:	88ba      	ldrh	r2, [r7, #4]
 800140e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001410:	801a      	strh	r2, [r3, #0]
	return status;
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001420:	b004      	add	sp, #16
 8001422:	4770      	bx	lr

08001424 <VL53L1X_SetROI>:
	*high = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_SetROI(VL53L1_Dev_t dev, uint16_t X, uint16_t Y)
{
 8001424:	b084      	sub	sp, #16
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	f107 0c10 	add.w	ip, r7, #16
 8001430:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t OpticalCenter;
	VL53L1X_ERROR status = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	71fb      	strb	r3, [r7, #7]

	status =VL53L1_RdByte(&dev, VL53L1_ROI_CONFIG__MODE_ROI_CENTRE_SPAD, &OpticalCenter);
 8001438:	1dbb      	adds	r3, r7, #6
 800143a:	461a      	mov	r2, r3
 800143c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001440:	f107 0010 	add.w	r0, r7, #16
 8001444:	f7ff fb52 	bl	8000aec <VL53L1_RdByte>
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
	if (X > 16)
 800144c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800144e:	2b10      	cmp	r3, #16
 8001450:	d901      	bls.n	8001456 <VL53L1X_SetROI+0x32>
		X = 16;
 8001452:	2310      	movs	r3, #16
 8001454:	853b      	strh	r3, [r7, #40]	; 0x28
	if (Y > 16)
 8001456:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001458:	2b10      	cmp	r3, #16
 800145a:	d901      	bls.n	8001460 <VL53L1X_SetROI+0x3c>
		Y = 16;
 800145c:	2310      	movs	r3, #16
 800145e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	if (X > 10 || Y > 10){
 8001460:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001462:	2b0a      	cmp	r3, #10
 8001464:	d802      	bhi.n	800146c <VL53L1X_SetROI+0x48>
 8001466:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001468:	2b0a      	cmp	r3, #10
 800146a:	d901      	bls.n	8001470 <VL53L1X_SetROI+0x4c>
		OpticalCenter = 199;
 800146c:	23c7      	movs	r3, #199	; 0xc7
 800146e:	71bb      	strb	r3, [r7, #6]
	}
	status = VL53L1_WrByte(&dev, ROI_CONFIG__USER_ROI_CENTRE_SPAD, OpticalCenter);
 8001470:	79bb      	ldrb	r3, [r7, #6]
 8001472:	461a      	mov	r2, r3
 8001474:	217f      	movs	r1, #127	; 0x7f
 8001476:	f107 0010 	add.w	r0, r7, #16
 800147a:	f7ff fadb 	bl	8000a34 <VL53L1_WrByte>
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	status = VL53L1_WrByte(&dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
		       (Y - 1) << 4 | (X - 1));
 8001482:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001484:	3b01      	subs	r3, #1
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	b25a      	sxtb	r2, r3
 800148a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3b01      	subs	r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	b25b      	sxtb	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b25b      	sxtb	r3, r3
	status = VL53L1_WrByte(&dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
 8001498:	b2db      	uxtb	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	f107 0010 	add.w	r0, r7, #16
 80014a2:	f7ff fac7 	bl	8000a34 <VL53L1_WrByte>
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	return status;
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014b8:	b004      	add	sp, #16
 80014ba:	4770      	bx	lr

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_Init+0x28>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_Init+0x28>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 f92b 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f000 f808 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff f910 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40022000 	.word	0x40022000

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f935 	bl	8001776 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001524:	f000 f90b 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000004 	.word	0x20000004
 8001540:	2000000c 	.word	0x2000000c
 8001544:	20000008 	.word	0x20000008

08001548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x1c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_IncTick+0x20>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a03      	ldr	r2, [pc, #12]	; (8001568 <HAL_IncTick+0x20>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	2000000c 	.word	0x2000000c
 8001568:	20000268 	.word	0x20000268

0800156c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b02      	ldr	r3, [pc, #8]	; (800157c <HAL_GetTick+0x10>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	20000268 	.word	0x20000268

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff fff0 	bl	800156c <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffe0 	bl	800156c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000000c 	.word	0x2000000c

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001708:	f7ff ff90 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff49 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff5e 	bl	8001610 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff90 	bl	8001680 <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5f 	bl	800162c <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffb0 	bl	80016e4 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b08b      	sub	sp, #44	; 0x2c
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a2:	e169      	b.n	8001a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017a4:	2201      	movs	r2, #1
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f040 8158 	bne.w	8001a72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a9a      	ldr	r2, [pc, #616]	; (8001a30 <HAL_GPIO_Init+0x2a0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d05e      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017cc:	4a98      	ldr	r2, [pc, #608]	; (8001a30 <HAL_GPIO_Init+0x2a0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d875      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017d2:	4a98      	ldr	r2, [pc, #608]	; (8001a34 <HAL_GPIO_Init+0x2a4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d058      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017d8:	4a96      	ldr	r2, [pc, #600]	; (8001a34 <HAL_GPIO_Init+0x2a4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d86f      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017de:	4a96      	ldr	r2, [pc, #600]	; (8001a38 <HAL_GPIO_Init+0x2a8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d052      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017e4:	4a94      	ldr	r2, [pc, #592]	; (8001a38 <HAL_GPIO_Init+0x2a8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d869      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017ea:	4a94      	ldr	r2, [pc, #592]	; (8001a3c <HAL_GPIO_Init+0x2ac>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d04c      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017f0:	4a92      	ldr	r2, [pc, #584]	; (8001a3c <HAL_GPIO_Init+0x2ac>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d863      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017f6:	4a92      	ldr	r2, [pc, #584]	; (8001a40 <HAL_GPIO_Init+0x2b0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d046      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017fc:	4a90      	ldr	r2, [pc, #576]	; (8001a40 <HAL_GPIO_Init+0x2b0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d85d      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 8001802:	2b12      	cmp	r3, #18
 8001804:	d82a      	bhi.n	800185c <HAL_GPIO_Init+0xcc>
 8001806:	2b12      	cmp	r3, #18
 8001808:	d859      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 800180a:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <HAL_GPIO_Init+0x80>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	0800188b 	.word	0x0800188b
 8001814:	08001865 	.word	0x08001865
 8001818:	08001877 	.word	0x08001877
 800181c:	080018b9 	.word	0x080018b9
 8001820:	080018bf 	.word	0x080018bf
 8001824:	080018bf 	.word	0x080018bf
 8001828:	080018bf 	.word	0x080018bf
 800182c:	080018bf 	.word	0x080018bf
 8001830:	080018bf 	.word	0x080018bf
 8001834:	080018bf 	.word	0x080018bf
 8001838:	080018bf 	.word	0x080018bf
 800183c:	080018bf 	.word	0x080018bf
 8001840:	080018bf 	.word	0x080018bf
 8001844:	080018bf 	.word	0x080018bf
 8001848:	080018bf 	.word	0x080018bf
 800184c:	080018bf 	.word	0x080018bf
 8001850:	080018bf 	.word	0x080018bf
 8001854:	0800186d 	.word	0x0800186d
 8001858:	08001881 	.word	0x08001881
 800185c:	4a79      	ldr	r2, [pc, #484]	; (8001a44 <HAL_GPIO_Init+0x2b4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001862:	e02c      	b.n	80018be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e029      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	3304      	adds	r3, #4
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e024      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	3308      	adds	r3, #8
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e01f      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	330c      	adds	r3, #12
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e01a      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001892:	2304      	movs	r3, #4
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e013      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a0:	2308      	movs	r3, #8
 80018a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	611a      	str	r2, [r3, #16]
          break;
 80018aa:	e009      	b.n	80018c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ac:	2308      	movs	r3, #8
 80018ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	615a      	str	r2, [r3, #20]
          break;
 80018b6:	e003      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e000      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          break;
 80018be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2bff      	cmp	r3, #255	; 0xff
 80018c4:	d801      	bhi.n	80018ca <HAL_GPIO_Init+0x13a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	e001      	b.n	80018ce <HAL_GPIO_Init+0x13e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2bff      	cmp	r3, #255	; 0xff
 80018d4:	d802      	bhi.n	80018dc <HAL_GPIO_Init+0x14c>
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	e002      	b.n	80018e2 <HAL_GPIO_Init+0x152>
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	3b08      	subs	r3, #8
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	210f      	movs	r1, #15
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	401a      	ands	r2, r3
 80018f4:	6a39      	ldr	r1, [r7, #32]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	431a      	orrs	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80b1 	beq.w	8001a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001910:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <HAL_GPIO_Init+0x2b8>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a4c      	ldr	r2, [pc, #304]	; (8001a48 <HAL_GPIO_Init+0x2b8>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_GPIO_Init+0x2b8>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001928:	4a48      	ldr	r2, [pc, #288]	; (8001a4c <HAL_GPIO_Init+0x2bc>)
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a40      	ldr	r2, [pc, #256]	; (8001a50 <HAL_GPIO_Init+0x2c0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d013      	beq.n	800197c <HAL_GPIO_Init+0x1ec>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3f      	ldr	r2, [pc, #252]	; (8001a54 <HAL_GPIO_Init+0x2c4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00d      	beq.n	8001978 <HAL_GPIO_Init+0x1e8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3e      	ldr	r2, [pc, #248]	; (8001a58 <HAL_GPIO_Init+0x2c8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d007      	beq.n	8001974 <HAL_GPIO_Init+0x1e4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3d      	ldr	r2, [pc, #244]	; (8001a5c <HAL_GPIO_Init+0x2cc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_GPIO_Init+0x1e0>
 800196c:	2303      	movs	r3, #3
 800196e:	e006      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 8001970:	2304      	movs	r3, #4
 8001972:	e004      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 8001974:	2302      	movs	r3, #2
 8001976:	e002      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 800197c:	2300      	movs	r3, #0
 800197e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001980:	f002 0203 	and.w	r2, r2, #3
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	4093      	lsls	r3, r2
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800198e:	492f      	ldr	r1, [pc, #188]	; (8001a4c <HAL_GPIO_Init+0x2bc>)
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3302      	adds	r3, #2
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	492c      	ldr	r1, [pc, #176]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	4928      	ldr	r1, [pc, #160]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019d0:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	4922      	ldr	r1, [pc, #136]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	60cb      	str	r3, [r1, #12]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	491e      	ldr	r1, [pc, #120]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4918      	ldr	r1, [pc, #96]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	4914      	ldr	r1, [pc, #80]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d021      	beq.n	8001a64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	490e      	ldr	r1, [pc, #56]	; (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e021      	b.n	8001a72 <HAL_GPIO_Init+0x2e2>
 8001a2e:	bf00      	nop
 8001a30:	10320000 	.word	0x10320000
 8001a34:	10310000 	.word	0x10310000
 8001a38:	10220000 	.word	0x10220000
 8001a3c:	10210000 	.word	0x10210000
 8001a40:	10120000 	.word	0x10120000
 8001a44:	10110000 	.word	0x10110000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40010800 	.word	0x40010800
 8001a54:	40010c00 	.word	0x40010c00
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40011400 	.word	0x40011400
 8001a60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_GPIO_Init+0x304>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	4909      	ldr	r1, [pc, #36]	; (8001a94 <HAL_GPIO_Init+0x304>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	3301      	adds	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f47f ae8e 	bne.w	80017a4 <HAL_GPIO_Init+0x14>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	372c      	adds	r7, #44	; 0x2c
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e12b      	b.n	8001d32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7fe fe26 	bl	8000740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2224      	movs	r2, #36	; 0x24
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b2c:	f001 fbca 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8001b30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a81      	ldr	r2, [pc, #516]	; (8001d3c <HAL_I2C_Init+0x274>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d807      	bhi.n	8001b4c <HAL_I2C_Init+0x84>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a80      	ldr	r2, [pc, #512]	; (8001d40 <HAL_I2C_Init+0x278>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	bf94      	ite	ls
 8001b44:	2301      	movls	r3, #1
 8001b46:	2300      	movhi	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	e006      	b.n	8001b5a <HAL_I2C_Init+0x92>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4a7d      	ldr	r2, [pc, #500]	; (8001d44 <HAL_I2C_Init+0x27c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	bf94      	ite	ls
 8001b54:	2301      	movls	r3, #1
 8001b56:	2300      	movhi	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0e7      	b.n	8001d32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4a78      	ldr	r2, [pc, #480]	; (8001d48 <HAL_I2C_Init+0x280>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0c9b      	lsrs	r3, r3, #18
 8001b6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4a6a      	ldr	r2, [pc, #424]	; (8001d3c <HAL_I2C_Init+0x274>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d802      	bhi.n	8001b9c <HAL_I2C_Init+0xd4>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	e009      	b.n	8001bb0 <HAL_I2C_Init+0xe8>
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	4a69      	ldr	r2, [pc, #420]	; (8001d4c <HAL_I2C_Init+0x284>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	3301      	adds	r3, #1
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	495c      	ldr	r1, [pc, #368]	; (8001d3c <HAL_I2C_Init+0x274>)
 8001bcc:	428b      	cmp	r3, r1
 8001bce:	d819      	bhi.n	8001c04 <HAL_I2C_Init+0x13c>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1e59      	subs	r1, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bde:	1c59      	adds	r1, r3, #1
 8001be0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001be4:	400b      	ands	r3, r1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00a      	beq.n	8001c00 <HAL_I2C_Init+0x138>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1e59      	subs	r1, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfe:	e051      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c00:	2304      	movs	r3, #4
 8001c02:	e04f      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d111      	bne.n	8001c30 <HAL_I2C_Init+0x168>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1e58      	subs	r0, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	440b      	add	r3, r1
 8001c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	e012      	b.n	8001c56 <HAL_I2C_Init+0x18e>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1e58      	subs	r0, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	0099      	lsls	r1, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf0c      	ite	eq
 8001c50:	2301      	moveq	r3, #1
 8001c52:	2300      	movne	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_I2C_Init+0x196>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e022      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10e      	bne.n	8001c84 <HAL_I2C_Init+0x1bc>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1e58      	subs	r0, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6859      	ldr	r1, [r3, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	440b      	add	r3, r1
 8001c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c82:	e00f      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e58      	subs	r0, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	0099      	lsls	r1, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	6809      	ldr	r1, [r1, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6911      	ldr	r1, [r2, #16]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68d2      	ldr	r2, [r2, #12]
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	000186a0 	.word	0x000186a0
 8001d40:	001e847f 	.word	0x001e847f
 8001d44:	003d08ff 	.word	0x003d08ff
 8001d48:	431bde83 	.word	0x431bde83
 8001d4c:	10624dd3 	.word	0x10624dd3

08001d50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	817b      	strh	r3, [r7, #10]
 8001d60:	4613      	mov	r3, r2
 8001d62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff fc02 	bl	800156c <HAL_GetTick>
 8001d68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	f040 80e0 	bne.w	8001f38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2319      	movs	r3, #25
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4970      	ldr	r1, [pc, #448]	; (8001f44 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fc9e 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e0d3      	b.n	8001f3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_I2C_Master_Transmit+0x50>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e0cc      	b.n	8001f3a <HAL_I2C_Master_Transmit+0x1ea>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d007      	beq.n	8001dc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2221      	movs	r2, #33	; 0x21
 8001dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2210      	movs	r2, #16
 8001de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	893a      	ldrh	r2, [r7, #8]
 8001df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4a50      	ldr	r2, [pc, #320]	; (8001f48 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e08:	8979      	ldrh	r1, [r7, #10]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	6a3a      	ldr	r2, [r7, #32]
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fb08 	bl	8002424 <I2C_MasterRequestWrite>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e08d      	b.n	8001f3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e34:	e066      	b.n	8001f04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	6a39      	ldr	r1, [r7, #32]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 fd5c 	bl	80028f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00d      	beq.n	8001e62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d107      	bne.n	8001e5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e06b      	b.n	8001f3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_I2C_Master_Transmit+0x188>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d017      	beq.n	8001ed8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	6a39      	ldr	r1, [r7, #32]
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fd53 	bl	8002988 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00d      	beq.n	8001f04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d107      	bne.n	8001f00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e01a      	b.n	8001f3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d194      	bne.n	8001e36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e000      	b.n	8001f3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f38:	2302      	movs	r3, #2
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	00100002 	.word	0x00100002
 8001f48:	ffff0000 	.word	0xffff0000

08001f4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	461a      	mov	r2, r3
 8001f58:	460b      	mov	r3, r1
 8001f5a:	817b      	strh	r3, [r7, #10]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff fb02 	bl	800156c <HAL_GetTick>
 8001f68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	f040 824b 	bne.w	800240e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2319      	movs	r3, #25
 8001f7e:	2201      	movs	r2, #1
 8001f80:	497f      	ldr	r1, [pc, #508]	; (8002180 <HAL_I2C_Master_Receive+0x234>)
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fb9e 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e23e      	b.n	8002410 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_I2C_Master_Receive+0x54>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e237      	b.n	8002410 <HAL_I2C_Master_Receive+0x4c4>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d007      	beq.n	8001fc6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0201 	orr.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2222      	movs	r2, #34	; 0x22
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	893a      	ldrh	r2, [r7, #8]
 8001ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a5f      	ldr	r2, [pc, #380]	; (8002184 <HAL_I2C_Master_Receive+0x238>)
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002008:	8979      	ldrh	r1, [r7, #10]
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fa8a 	bl	8002528 <I2C_MasterRequestRead>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e1f8      	b.n	8002410 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	2b00      	cmp	r3, #0
 8002024:	d113      	bne.n	800204e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e1cc      	b.n	80023e8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002052:	2b01      	cmp	r3, #1
 8002054:	d11e      	bne.n	8002094 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002064:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002066:	b672      	cpsid	i
}
 8002068:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002090:	b662      	cpsie	i
}
 8002092:	e035      	b.n	8002100 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002098:	2b02      	cmp	r3, #2
 800209a:	d11e      	bne.n	80020da <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020ac:	b672      	cpsid	i
}
 80020ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020d6:	b662      	cpsie	i
}
 80020d8:	e012      	b.n	8002100 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002100:	e172      	b.n	80023e8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002106:	2b03      	cmp	r3, #3
 8002108:	f200 811f 	bhi.w	800234a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002110:	2b01      	cmp	r3, #1
 8002112:	d123      	bne.n	800215c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fc7d 	bl	8002a18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e173      	b.n	8002410 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	855a      	strh	r2, [r3, #42]	; 0x2a
 800215a:	e145      	b.n	80023e8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002160:	2b02      	cmp	r3, #2
 8002162:	d152      	bne.n	800220a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216a:	2200      	movs	r2, #0
 800216c:	4906      	ldr	r1, [pc, #24]	; (8002188 <HAL_I2C_Master_Receive+0x23c>)
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 faa8 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e148      	b.n	8002410 <HAL_I2C_Master_Receive+0x4c4>
 800217e:	bf00      	nop
 8002180:	00100002 	.word	0x00100002
 8002184:	ffff0000 	.word	0xffff0000
 8002188:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800218c:	b672      	cpsid	i
}
 800218e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021d2:	b662      	cpsie	i
}
 80021d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002208:	e0ee      	b.n	80023e8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002210:	2200      	movs	r2, #0
 8002212:	4981      	ldr	r1, [pc, #516]	; (8002418 <HAL_I2C_Master_Receive+0x4cc>)
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 fa55 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0f5      	b.n	8002410 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002232:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002234:	b672      	cpsid	i
}
 8002236:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800226a:	4b6c      	ldr	r3, [pc, #432]	; (800241c <HAL_I2C_Master_Receive+0x4d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	4a6b      	ldr	r2, [pc, #428]	; (8002420 <HAL_I2C_Master_Receive+0x4d4>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	0a1a      	lsrs	r2, r3, #8
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00da      	lsls	r2, r3, #3
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	3b01      	subs	r3, #1
 8002288:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d118      	bne.n	80022c2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f043 0220 	orr.w	r2, r3, #32
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80022b2:	b662      	cpsie	i
}
 80022b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0a6      	b.n	8002410 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d1d9      	bne.n	8002284 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002312:	b662      	cpsie	i
}
 8002314:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002348:	e04e      	b.n	80023e8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fb62 	bl	8002a18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e058      	b.n	8002410 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b04      	cmp	r3, #4
 800239c:	d124      	bne.n	80023e8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d107      	bne.n	80023b6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f47f ae88 	bne.w	8002102 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e000      	b.n	8002410 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800240e:	2302      	movs	r3, #2
  }
}
 8002410:	4618      	mov	r0, r3
 8002412:	3728      	adds	r7, #40	; 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	00010004 	.word	0x00010004
 800241c:	20000004 	.word	0x20000004
 8002420:	14f8b589 	.word	0x14f8b589

08002424 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	460b      	mov	r3, r1
 8002432:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d006      	beq.n	800244e <I2C_MasterRequestWrite+0x2a>
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d003      	beq.n	800244e <I2C_MasterRequestWrite+0x2a>
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800244c:	d108      	bne.n	8002460 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e00b      	b.n	8002478 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	2b12      	cmp	r3, #18
 8002466:	d107      	bne.n	8002478 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002476:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f91d 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00d      	beq.n	80024ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249e:	d103      	bne.n	80024a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e035      	b.n	8002518 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024b4:	d108      	bne.n	80024c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024b6:	897b      	ldrh	r3, [r7, #10]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	e01b      	b.n	8002500 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024c8:	897b      	ldrh	r3, [r7, #10]
 80024ca:	11db      	asrs	r3, r3, #7
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 0306 	and.w	r3, r3, #6
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f063 030f 	orn	r3, r3, #15
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <I2C_MasterRequestWrite+0xfc>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f966 	bl	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e010      	b.n	8002518 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024f6:	897b      	ldrh	r3, [r7, #10]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4907      	ldr	r1, [pc, #28]	; (8002524 <I2C_MasterRequestWrite+0x100>)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f956 	bl	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	00010008 	.word	0x00010008
 8002524:	00010002 	.word	0x00010002

08002528 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	460b      	mov	r3, r1
 8002536:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800254c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b08      	cmp	r3, #8
 8002552:	d006      	beq.n	8002562 <I2C_MasterRequestRead+0x3a>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d003      	beq.n	8002562 <I2C_MasterRequestRead+0x3a>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002560:	d108      	bne.n	8002574 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e00b      	b.n	800258c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	2b11      	cmp	r3, #17
 800257a:	d107      	bne.n	800258c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800258a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f893 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00d      	beq.n	80025c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b2:	d103      	bne.n	80025bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e079      	b.n	80026b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025c8:	d108      	bne.n	80025dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025ca:	897b      	ldrh	r3, [r7, #10]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	611a      	str	r2, [r3, #16]
 80025da:	e05f      	b.n	800269c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025dc:	897b      	ldrh	r3, [r7, #10]
 80025de:	11db      	asrs	r3, r3, #7
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f003 0306 	and.w	r3, r3, #6
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f063 030f 	orn	r3, r3, #15
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4930      	ldr	r1, [pc, #192]	; (80026bc <I2C_MasterRequestRead+0x194>)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f8dc 	bl	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e054      	b.n	80026b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800260a:	897b      	ldrh	r3, [r7, #10]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4929      	ldr	r1, [pc, #164]	; (80026c0 <I2C_MasterRequestRead+0x198>)
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f8cc 	bl	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e044      	b.n	80026b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800264e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f831 	bl	80026c4 <I2C_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00d      	beq.n	8002684 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002676:	d103      	bne.n	8002680 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800267e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e017      	b.n	80026b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002684:	897b      	ldrh	r3, [r7, #10]
 8002686:	11db      	asrs	r3, r3, #7
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f003 0306 	and.w	r3, r3, #6
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f063 030e 	orn	r3, r3, #14
 8002694:	b2da      	uxtb	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4907      	ldr	r1, [pc, #28]	; (80026c0 <I2C_MasterRequestRead+0x198>)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f888 	bl	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	00010008 	.word	0x00010008
 80026c0:	00010002 	.word	0x00010002

080026c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d4:	e048      	b.n	8002768 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026dc:	d044      	beq.n	8002768 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026de:	f7fe ff45 	bl	800156c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d302      	bcc.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d139      	bne.n	8002768 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	0c1b      	lsrs	r3, r3, #16
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d10d      	bne.n	800271a <I2C_WaitOnFlagUntilTimeout+0x56>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	43da      	mvns	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4013      	ands	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	e00c      	b.n	8002734 <I2C_WaitOnFlagUntilTimeout+0x70>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	43da      	mvns	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	4013      	ands	r3, r2
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	429a      	cmp	r2, r3
 8002738:	d116      	bne.n	8002768 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f043 0220 	orr.w	r2, r3, #32
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e023      	b.n	80027b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	0c1b      	lsrs	r3, r3, #16
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d10d      	bne.n	800278e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	43da      	mvns	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4013      	ands	r3, r2
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	e00c      	b.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	43da      	mvns	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4013      	ands	r3, r2
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d093      	beq.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027c6:	e071      	b.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d123      	bne.n	8002820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0204 	orr.w	r2, r3, #4
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e067      	b.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002826:	d041      	beq.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002828:	f7fe fea0 	bl	800156c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	429a      	cmp	r2, r3
 8002836:	d302      	bcc.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d136      	bne.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d10c      	bne.n	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4013      	ands	r3, r2
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	bf14      	ite	ne
 800285a:	2301      	movne	r3, #1
 800285c:	2300      	moveq	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	e00b      	b.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	43da      	mvns	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4013      	ands	r3, r2
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e021      	b.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	0c1b      	lsrs	r3, r3, #16
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d10c      	bne.n	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	43da      	mvns	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4013      	ands	r3, r2
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e00b      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf14      	ite	ne
 80028e2:	2301      	movne	r3, #1
 80028e4:	2300      	moveq	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f47f af6d 	bne.w	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002904:	e034      	b.n	8002970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f8e3 	bl	8002ad2 <I2C_IsAcknowledgeFailed>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e034      	b.n	8002980 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291c:	d028      	beq.n	8002970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291e:	f7fe fe25 	bl	800156c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	429a      	cmp	r2, r3
 800292c:	d302      	bcc.n	8002934 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d11d      	bne.n	8002970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	2b80      	cmp	r3, #128	; 0x80
 8002940:	d016      	beq.n	8002970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f043 0220 	orr.w	r2, r3, #32
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e007      	b.n	8002980 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	d1c3      	bne.n	8002906 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002994:	e034      	b.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f89b 	bl	8002ad2 <I2C_IsAcknowledgeFailed>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e034      	b.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ac:	d028      	beq.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ae:	f7fe fddd 	bl	800156c <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d302      	bcc.n	80029c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d11d      	bne.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d016      	beq.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e007      	b.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d1c3      	bne.n	8002996 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a24:	e049      	b.n	8002aba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d119      	bne.n	8002a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0210 	mvn.w	r2, #16
 8002a3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e030      	b.n	8002aca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a68:	f7fe fd80 	bl	800156c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d302      	bcc.n	8002a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11d      	bne.n	8002aba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d016      	beq.n	8002aba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e007      	b.n	8002aca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d1ae      	bne.n	8002a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae8:	d11b      	bne.n	8002b22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f043 0204 	orr.w	r2, r3, #4
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
	...

08002b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e272      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8087 	beq.w	8002c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b50:	4b92      	ldr	r3, [pc, #584]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d00c      	beq.n	8002b76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b5c:	4b8f      	ldr	r3, [pc, #572]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d112      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5e>
 8002b68:	4b8c      	ldr	r3, [pc, #560]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	d10b      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b76:	4b89      	ldr	r3, [pc, #548]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d06c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x12c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d168      	bne.n	8002c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e24c      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x76>
 8002b98:	4b80      	ldr	r3, [pc, #512]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a7f      	ldr	r2, [pc, #508]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e02e      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x98>
 8002bae:	4b7b      	ldr	r3, [pc, #492]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7a      	ldr	r2, [pc, #488]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b78      	ldr	r3, [pc, #480]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a77      	ldr	r2, [pc, #476]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0xbc>
 8002bd2:	4b72      	ldr	r3, [pc, #456]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a71      	ldr	r2, [pc, #452]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b6f      	ldr	r3, [pc, #444]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a6e      	ldr	r2, [pc, #440]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002bec:	4b6b      	ldr	r3, [pc, #428]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6a      	ldr	r2, [pc, #424]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b68      	ldr	r3, [pc, #416]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a67      	ldr	r2, [pc, #412]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fcae 	bl	800156c <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fcaa 	bl	800156c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e200      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b5d      	ldr	r3, [pc, #372]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe4>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe fc9a 	bl	800156c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fc96 	bl	800156c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1ec      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x10c>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d063      	beq.n	8002d32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6a:	4b4c      	ldr	r3, [pc, #304]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c76:	4b49      	ldr	r3, [pc, #292]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d11c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x18c>
 8002c82:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d116      	bne.n	8002cbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x176>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1c0      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4939      	ldr	r1, [pc, #228]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	e03a      	b.n	8002d32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc4:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe fc4f 	bl	800156c <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fc4b 	bl	800156c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e1a1      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4927      	ldr	r1, [pc, #156]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_RCC_OscConfig+0x270>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fc2e 	bl	800156c <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d14:	f7fe fc2a 	bl	800156c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e180      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03a      	beq.n	8002db4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d019      	beq.n	8002d7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <HAL_RCC_OscConfig+0x274>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4c:	f7fe fc0e 	bl	800156c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d54:	f7fe fc0a 	bl	800156c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e160      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d72:	2001      	movs	r0, #1
 8002d74:	f000 face 	bl	8003314 <RCC_Delay>
 8002d78:	e01c      	b.n	8002db4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d80:	f7fe fbf4 	bl	800156c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d86:	e00f      	b.n	8002da8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d88:	f7fe fbf0 	bl	800156c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d908      	bls.n	8002da8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e146      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	42420000 	.word	0x42420000
 8002da4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b92      	ldr	r3, [pc, #584]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e9      	bne.n	8002d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a6 	beq.w	8002f0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b8b      	ldr	r3, [pc, #556]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b88      	ldr	r3, [pc, #544]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4a87      	ldr	r2, [pc, #540]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	61d3      	str	r3, [r2, #28]
 8002dde:	4b85      	ldr	r3, [pc, #532]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <HAL_RCC_OscConfig+0x4c8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ff8 <HAL_RCC_OscConfig+0x4c8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ff8 <HAL_RCC_OscConfig+0x4c8>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fbb1 	bl	800156c <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7fe fbad 	bl	800156c <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b64      	cmp	r3, #100	; 0x64
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e103      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	4b75      	ldr	r3, [pc, #468]	; (8002ff8 <HAL_RCC_OscConfig+0x4c8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x312>
 8002e34:	4b6f      	ldr	r3, [pc, #444]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4a6e      	ldr	r2, [pc, #440]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6213      	str	r3, [r2, #32]
 8002e40:	e02d      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x334>
 8002e4a:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a69      	ldr	r2, [pc, #420]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6213      	str	r3, [r2, #32]
 8002e56:	4b67      	ldr	r3, [pc, #412]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a66      	ldr	r2, [pc, #408]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	6213      	str	r3, [r2, #32]
 8002e62:	e01c      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d10c      	bne.n	8002e86 <HAL_RCC_OscConfig+0x356>
 8002e6c:	4b61      	ldr	r3, [pc, #388]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4a60      	ldr	r2, [pc, #384]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	6213      	str	r3, [r2, #32]
 8002e78:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a5d      	ldr	r2, [pc, #372]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	e00b      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e86:	4b5b      	ldr	r3, [pc, #364]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4a5a      	ldr	r2, [pc, #360]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6213      	str	r3, [r2, #32]
 8002e92:	4b58      	ldr	r3, [pc, #352]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a57      	ldr	r2, [pc, #348]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d015      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fb61 	bl	800156c <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe fb5d 	bl	800156c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0b1      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	4b4b      	ldr	r3, [pc, #300]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ee      	beq.n	8002eae <HAL_RCC_OscConfig+0x37e>
 8002ed0:	e014      	b.n	8002efc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fb4b 	bl	800156c <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fe fb47 	bl	800156c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e09b      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	4b40      	ldr	r3, [pc, #256]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ee      	bne.n	8002eda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f02:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8087 	beq.w	8003026 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f18:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d061      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d146      	bne.n	8002fba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	4b33      	ldr	r3, [pc, #204]	; (8002ffc <HAL_RCC_OscConfig+0x4cc>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fe fb1b 	bl	800156c <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe fb17 	bl	800156c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e06d      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4c:	4b29      	ldr	r3, [pc, #164]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f60:	d108      	bne.n	8002f74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	4921      	ldr	r1, [pc, #132]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f74:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a19      	ldr	r1, [r3, #32]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	430b      	orrs	r3, r1
 8002f86:	491b      	ldr	r1, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x4cc>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe faeb 	bl	800156c <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe fae7 	bl	800156c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e03d      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x46a>
 8002fb8:	e035      	b.n	8003026 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_RCC_OscConfig+0x4cc>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fad4 	bl	800156c <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe fad0 	bl	800156c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e026      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x498>
 8002fe6:	e01e      	b.n	8003026 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e019      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_OscConfig+0x500>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	429a      	cmp	r2, r3
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000

08003034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0d0      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d910      	bls.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	4965      	ldr	r1, [pc, #404]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a58      	ldr	r2, [pc, #352]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800309a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a52      	ldr	r2, [pc, #328]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	494d      	ldr	r1, [pc, #308]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d040      	beq.n	8003154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d115      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e073      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06b      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4936      	ldr	r1, [pc, #216]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003124:	f7fe fa22 	bl	800156c <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fe fa1e 	bl	800156c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e053      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 020c 	and.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	429a      	cmp	r2, r3
 8003152:	d1eb      	bne.n	800312c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d210      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 0207 	bic.w	r2, r3, #7
 800316a:	4922      	ldr	r1, [pc, #136]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e032      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4916      	ldr	r1, [pc, #88]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490e      	ldr	r1, [pc, #56]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f821 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	490a      	ldr	r1, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	5ccb      	ldrb	r3, [r1, r3]
 80031d6:	fa22 f303 	lsr.w	r3, r2, r3
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1cc>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1d0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe f980 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40021000 	.word	0x40021000
 80031fc:	08004780 	.word	0x08004780
 8003200:	20000004 	.word	0x20000004
 8003204:	20000008 	.word	0x20000008

08003208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003222:	4b1e      	ldr	r3, [pc, #120]	; (800329c <HAL_RCC_GetSysClockFreq+0x94>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b04      	cmp	r3, #4
 8003230:	d002      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x30>
 8003232:	2b08      	cmp	r3, #8
 8003234:	d003      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x36>
 8003236:	e027      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800323a:	613b      	str	r3, [r7, #16]
      break;
 800323c:	e027      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	0c9b      	lsrs	r3, r3, #18
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	4a17      	ldr	r2, [pc, #92]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003248:	5cd3      	ldrb	r3, [r2, r3]
 800324a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d010      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <HAL_RCC_GetSysClockFreq+0x94>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	0c5b      	lsrs	r3, r3, #17
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800326a:	fb03 f202 	mul.w	r2, r3, r2
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e004      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	613b      	str	r3, [r7, #16]
      break;
 8003286:	e002      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800328a:	613b      	str	r3, [r7, #16]
      break;
 800328c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800328e:	693b      	ldr	r3, [r7, #16]
}
 8003290:	4618      	mov	r0, r3
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	007a1200 	.word	0x007a1200
 80032a4:	080047f4 	.word	0x080047f4
 80032a8:	08004804 	.word	0x08004804
 80032ac:	003d0900 	.word	0x003d0900

080032b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b4:	4b02      	ldr	r3, [pc, #8]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	20000004 	.word	0x20000004

080032c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032c8:	f7ff fff2 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	08004790 	.word	0x08004790

080032ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032f0:	f7ff ffde 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	0adb      	lsrs	r3, r3, #11
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4903      	ldr	r1, [pc, #12]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	08004790 	.word	0x08004790

08003314 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <RCC_Delay+0x34>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0a      	ldr	r2, [pc, #40]	; (800334c <RCC_Delay+0x38>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	0a5b      	lsrs	r3, r3, #9
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003330:	bf00      	nop
  }
  while (Delay --);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1e5a      	subs	r2, r3, #1
 8003336:	60fa      	str	r2, [r7, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f9      	bne.n	8003330 <RCC_Delay+0x1c>
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	20000004 	.word	0x20000004
 800334c:	10624dd3 	.word	0x10624dd3

08003350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e042      	b.n	80033e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fa22 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	; 0x24
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f91d 	bl	80035d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b20      	cmp	r3, #32
 800340e:	d16d      	bne.n	80034ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_UART_Transmit+0x2c>
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e066      	b.n	80034ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2221      	movs	r2, #33	; 0x21
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800342e:	f7fe f89d 	bl	800156c <HAL_GetTick>
 8003432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	88fa      	ldrh	r2, [r7, #6]
 8003438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	88fa      	ldrh	r2, [r7, #6]
 800343e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003448:	d108      	bne.n	800345c <HAL_UART_Transmit+0x6c>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e003      	b.n	8003464 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003464:	e02a      	b.n	80034bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f840 	bl	80034f6 <UART_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e036      	b.n	80034ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3302      	adds	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e007      	b.n	80034ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1cf      	bne.n	8003466 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2140      	movs	r1, #64	; 0x40
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f810 	bl	80034f6 <UART_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e006      	b.n	80034ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b090      	sub	sp, #64	; 0x40
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003506:	e050      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350e:	d04c      	beq.n	80035aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0x30>
 8003516:	f7fe f829 	bl	800156c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003522:	429a      	cmp	r2, r3
 8003524:	d241      	bcs.n	80035aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800353c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	330c      	adds	r3, #12
 8003544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003546:	637a      	str	r2, [r7, #52]	; 0x34
 8003548:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800354c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e5      	bne.n	8003526 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3314      	adds	r3, #20
 8003560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	613b      	str	r3, [r7, #16]
   return(result);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	63bb      	str	r3, [r7, #56]	; 0x38
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3314      	adds	r3, #20
 8003578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800357a:	623a      	str	r2, [r7, #32]
 800357c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	69f9      	ldr	r1, [r7, #28]
 8003580:	6a3a      	ldr	r2, [r7, #32]
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	61bb      	str	r3, [r7, #24]
   return(result);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e5      	bne.n	800355a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e00f      	b.n	80035ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d09f      	beq.n	8003508 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3740      	adds	r7, #64	; 0x40
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800360e:	f023 030c 	bic.w	r3, r3, #12
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	430b      	orrs	r3, r1
 800361a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2c      	ldr	r2, [pc, #176]	; (80036e8 <UART_SetConfig+0x114>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d103      	bne.n	8003644 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800363c:	f7ff fe56 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	e002      	b.n	800364a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003644:	f7ff fe3e 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8003648:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009a      	lsls	r2, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	4a22      	ldr	r2, [pc, #136]	; (80036ec <UART_SetConfig+0x118>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	0119      	lsls	r1, r3, #4
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009a      	lsls	r2, r3, #2
 8003674:	441a      	add	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <UART_SetConfig+0x118>)
 8003682:	fba3 0302 	umull	r0, r3, r3, r2
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2064      	movs	r0, #100	; 0x64
 800368a:	fb00 f303 	mul.w	r3, r0, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	3332      	adds	r3, #50	; 0x32
 8003694:	4a15      	ldr	r2, [pc, #84]	; (80036ec <UART_SetConfig+0x118>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a0:	4419      	add	r1, r3
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009a      	lsls	r2, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <UART_SetConfig+0x118>)
 80036ba:	fba3 0302 	umull	r0, r3, r3, r2
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2064      	movs	r0, #100	; 0x64
 80036c2:	fb00 f303 	mul.w	r3, r0, r3
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	3332      	adds	r3, #50	; 0x32
 80036cc:	4a07      	ldr	r2, [pc, #28]	; (80036ec <UART_SetConfig+0x118>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	f003 020f 	and.w	r2, r3, #15
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	440a      	add	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40013800 	.word	0x40013800
 80036ec:	51eb851f 	.word	0x51eb851f

080036f0 <__errno>:
 80036f0:	4b01      	ldr	r3, [pc, #4]	; (80036f8 <__errno+0x8>)
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000010 	.word	0x20000010

080036fc <__libc_init_array>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	2600      	movs	r6, #0
 8003700:	4d0c      	ldr	r5, [pc, #48]	; (8003734 <__libc_init_array+0x38>)
 8003702:	4c0d      	ldr	r4, [pc, #52]	; (8003738 <__libc_init_array+0x3c>)
 8003704:	1b64      	subs	r4, r4, r5
 8003706:	10a4      	asrs	r4, r4, #2
 8003708:	42a6      	cmp	r6, r4
 800370a:	d109      	bne.n	8003720 <__libc_init_array+0x24>
 800370c:	f000 ffb6 	bl	800467c <_init>
 8003710:	2600      	movs	r6, #0
 8003712:	4d0a      	ldr	r5, [pc, #40]	; (800373c <__libc_init_array+0x40>)
 8003714:	4c0a      	ldr	r4, [pc, #40]	; (8003740 <__libc_init_array+0x44>)
 8003716:	1b64      	subs	r4, r4, r5
 8003718:	10a4      	asrs	r4, r4, #2
 800371a:	42a6      	cmp	r6, r4
 800371c:	d105      	bne.n	800372a <__libc_init_array+0x2e>
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	f855 3b04 	ldr.w	r3, [r5], #4
 8003724:	4798      	blx	r3
 8003726:	3601      	adds	r6, #1
 8003728:	e7ee      	b.n	8003708 <__libc_init_array+0xc>
 800372a:	f855 3b04 	ldr.w	r3, [r5], #4
 800372e:	4798      	blx	r3
 8003730:	3601      	adds	r6, #1
 8003732:	e7f2      	b.n	800371a <__libc_init_array+0x1e>
 8003734:	080048a0 	.word	0x080048a0
 8003738:	080048a0 	.word	0x080048a0
 800373c:	080048a0 	.word	0x080048a0
 8003740:	080048a4 	.word	0x080048a4

08003744 <memset>:
 8003744:	4603      	mov	r3, r0
 8003746:	4402      	add	r2, r0
 8003748:	4293      	cmp	r3, r2
 800374a:	d100      	bne.n	800374e <memset+0xa>
 800374c:	4770      	bx	lr
 800374e:	f803 1b01 	strb.w	r1, [r3], #1
 8003752:	e7f9      	b.n	8003748 <memset+0x4>

08003754 <iprintf>:
 8003754:	b40f      	push	{r0, r1, r2, r3}
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <iprintf+0x2c>)
 8003758:	b513      	push	{r0, r1, r4, lr}
 800375a:	681c      	ldr	r4, [r3, #0]
 800375c:	b124      	cbz	r4, 8003768 <iprintf+0x14>
 800375e:	69a3      	ldr	r3, [r4, #24]
 8003760:	b913      	cbnz	r3, 8003768 <iprintf+0x14>
 8003762:	4620      	mov	r0, r4
 8003764:	f000 f866 	bl	8003834 <__sinit>
 8003768:	ab05      	add	r3, sp, #20
 800376a:	4620      	mov	r0, r4
 800376c:	9a04      	ldr	r2, [sp, #16]
 800376e:	68a1      	ldr	r1, [r4, #8]
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	f000 f9bb 	bl	8003aec <_vfiprintf_r>
 8003776:	b002      	add	sp, #8
 8003778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800377c:	b004      	add	sp, #16
 800377e:	4770      	bx	lr
 8003780:	20000010 	.word	0x20000010

08003784 <std>:
 8003784:	2300      	movs	r3, #0
 8003786:	b510      	push	{r4, lr}
 8003788:	4604      	mov	r4, r0
 800378a:	e9c0 3300 	strd	r3, r3, [r0]
 800378e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003792:	6083      	str	r3, [r0, #8]
 8003794:	8181      	strh	r1, [r0, #12]
 8003796:	6643      	str	r3, [r0, #100]	; 0x64
 8003798:	81c2      	strh	r2, [r0, #14]
 800379a:	6183      	str	r3, [r0, #24]
 800379c:	4619      	mov	r1, r3
 800379e:	2208      	movs	r2, #8
 80037a0:	305c      	adds	r0, #92	; 0x5c
 80037a2:	f7ff ffcf 	bl	8003744 <memset>
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <std+0x38>)
 80037a8:	6224      	str	r4, [r4, #32]
 80037aa:	6263      	str	r3, [r4, #36]	; 0x24
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <std+0x3c>)
 80037ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <std+0x40>)
 80037b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <std+0x44>)
 80037b6:	6323      	str	r3, [r4, #48]	; 0x30
 80037b8:	bd10      	pop	{r4, pc}
 80037ba:	bf00      	nop
 80037bc:	08004099 	.word	0x08004099
 80037c0:	080040bb 	.word	0x080040bb
 80037c4:	080040f3 	.word	0x080040f3
 80037c8:	08004117 	.word	0x08004117

080037cc <_cleanup_r>:
 80037cc:	4901      	ldr	r1, [pc, #4]	; (80037d4 <_cleanup_r+0x8>)
 80037ce:	f000 b8af 	b.w	8003930 <_fwalk_reent>
 80037d2:	bf00      	nop
 80037d4:	080043e9 	.word	0x080043e9

080037d8 <__sfmoreglue>:
 80037d8:	2268      	movs	r2, #104	; 0x68
 80037da:	b570      	push	{r4, r5, r6, lr}
 80037dc:	1e4d      	subs	r5, r1, #1
 80037de:	4355      	muls	r5, r2
 80037e0:	460e      	mov	r6, r1
 80037e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037e6:	f000 f8e5 	bl	80039b4 <_malloc_r>
 80037ea:	4604      	mov	r4, r0
 80037ec:	b140      	cbz	r0, 8003800 <__sfmoreglue+0x28>
 80037ee:	2100      	movs	r1, #0
 80037f0:	e9c0 1600 	strd	r1, r6, [r0]
 80037f4:	300c      	adds	r0, #12
 80037f6:	60a0      	str	r0, [r4, #8]
 80037f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037fc:	f7ff ffa2 	bl	8003744 <memset>
 8003800:	4620      	mov	r0, r4
 8003802:	bd70      	pop	{r4, r5, r6, pc}

08003804 <__sfp_lock_acquire>:
 8003804:	4801      	ldr	r0, [pc, #4]	; (800380c <__sfp_lock_acquire+0x8>)
 8003806:	f000 b8b3 	b.w	8003970 <__retarget_lock_acquire_recursive>
 800380a:	bf00      	nop
 800380c:	2000026d 	.word	0x2000026d

08003810 <__sfp_lock_release>:
 8003810:	4801      	ldr	r0, [pc, #4]	; (8003818 <__sfp_lock_release+0x8>)
 8003812:	f000 b8ae 	b.w	8003972 <__retarget_lock_release_recursive>
 8003816:	bf00      	nop
 8003818:	2000026d 	.word	0x2000026d

0800381c <__sinit_lock_acquire>:
 800381c:	4801      	ldr	r0, [pc, #4]	; (8003824 <__sinit_lock_acquire+0x8>)
 800381e:	f000 b8a7 	b.w	8003970 <__retarget_lock_acquire_recursive>
 8003822:	bf00      	nop
 8003824:	2000026e 	.word	0x2000026e

08003828 <__sinit_lock_release>:
 8003828:	4801      	ldr	r0, [pc, #4]	; (8003830 <__sinit_lock_release+0x8>)
 800382a:	f000 b8a2 	b.w	8003972 <__retarget_lock_release_recursive>
 800382e:	bf00      	nop
 8003830:	2000026e 	.word	0x2000026e

08003834 <__sinit>:
 8003834:	b510      	push	{r4, lr}
 8003836:	4604      	mov	r4, r0
 8003838:	f7ff fff0 	bl	800381c <__sinit_lock_acquire>
 800383c:	69a3      	ldr	r3, [r4, #24]
 800383e:	b11b      	cbz	r3, 8003848 <__sinit+0x14>
 8003840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003844:	f7ff bff0 	b.w	8003828 <__sinit_lock_release>
 8003848:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800384c:	6523      	str	r3, [r4, #80]	; 0x50
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <__sinit+0x68>)
 8003850:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <__sinit+0x6c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	62a2      	str	r2, [r4, #40]	; 0x28
 8003856:	42a3      	cmp	r3, r4
 8003858:	bf08      	it	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	4620      	mov	r0, r4
 800385e:	bf08      	it	eq
 8003860:	61a3      	streq	r3, [r4, #24]
 8003862:	f000 f81f 	bl	80038a4 <__sfp>
 8003866:	6060      	str	r0, [r4, #4]
 8003868:	4620      	mov	r0, r4
 800386a:	f000 f81b 	bl	80038a4 <__sfp>
 800386e:	60a0      	str	r0, [r4, #8]
 8003870:	4620      	mov	r0, r4
 8003872:	f000 f817 	bl	80038a4 <__sfp>
 8003876:	2200      	movs	r2, #0
 8003878:	2104      	movs	r1, #4
 800387a:	60e0      	str	r0, [r4, #12]
 800387c:	6860      	ldr	r0, [r4, #4]
 800387e:	f7ff ff81 	bl	8003784 <std>
 8003882:	2201      	movs	r2, #1
 8003884:	2109      	movs	r1, #9
 8003886:	68a0      	ldr	r0, [r4, #8]
 8003888:	f7ff ff7c 	bl	8003784 <std>
 800388c:	2202      	movs	r2, #2
 800388e:	2112      	movs	r1, #18
 8003890:	68e0      	ldr	r0, [r4, #12]
 8003892:	f7ff ff77 	bl	8003784 <std>
 8003896:	2301      	movs	r3, #1
 8003898:	61a3      	str	r3, [r4, #24]
 800389a:	e7d1      	b.n	8003840 <__sinit+0xc>
 800389c:	08004808 	.word	0x08004808
 80038a0:	080037cd 	.word	0x080037cd

080038a4 <__sfp>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	4607      	mov	r7, r0
 80038a8:	f7ff ffac 	bl	8003804 <__sfp_lock_acquire>
 80038ac:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <__sfp+0x84>)
 80038ae:	681e      	ldr	r6, [r3, #0]
 80038b0:	69b3      	ldr	r3, [r6, #24]
 80038b2:	b913      	cbnz	r3, 80038ba <__sfp+0x16>
 80038b4:	4630      	mov	r0, r6
 80038b6:	f7ff ffbd 	bl	8003834 <__sinit>
 80038ba:	3648      	adds	r6, #72	; 0x48
 80038bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	d503      	bpl.n	80038cc <__sfp+0x28>
 80038c4:	6833      	ldr	r3, [r6, #0]
 80038c6:	b30b      	cbz	r3, 800390c <__sfp+0x68>
 80038c8:	6836      	ldr	r6, [r6, #0]
 80038ca:	e7f7      	b.n	80038bc <__sfp+0x18>
 80038cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038d0:	b9d5      	cbnz	r5, 8003908 <__sfp+0x64>
 80038d2:	4b16      	ldr	r3, [pc, #88]	; (800392c <__sfp+0x88>)
 80038d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038d8:	60e3      	str	r3, [r4, #12]
 80038da:	6665      	str	r5, [r4, #100]	; 0x64
 80038dc:	f000 f847 	bl	800396e <__retarget_lock_init_recursive>
 80038e0:	f7ff ff96 	bl	8003810 <__sfp_lock_release>
 80038e4:	2208      	movs	r2, #8
 80038e6:	4629      	mov	r1, r5
 80038e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80038ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80038f0:	6025      	str	r5, [r4, #0]
 80038f2:	61a5      	str	r5, [r4, #24]
 80038f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038f8:	f7ff ff24 	bl	8003744 <memset>
 80038fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003900:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003904:	4620      	mov	r0, r4
 8003906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003908:	3468      	adds	r4, #104	; 0x68
 800390a:	e7d9      	b.n	80038c0 <__sfp+0x1c>
 800390c:	2104      	movs	r1, #4
 800390e:	4638      	mov	r0, r7
 8003910:	f7ff ff62 	bl	80037d8 <__sfmoreglue>
 8003914:	4604      	mov	r4, r0
 8003916:	6030      	str	r0, [r6, #0]
 8003918:	2800      	cmp	r0, #0
 800391a:	d1d5      	bne.n	80038c8 <__sfp+0x24>
 800391c:	f7ff ff78 	bl	8003810 <__sfp_lock_release>
 8003920:	230c      	movs	r3, #12
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	e7ee      	b.n	8003904 <__sfp+0x60>
 8003926:	bf00      	nop
 8003928:	08004808 	.word	0x08004808
 800392c:	ffff0001 	.word	0xffff0001

08003930 <_fwalk_reent>:
 8003930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003934:	4606      	mov	r6, r0
 8003936:	4688      	mov	r8, r1
 8003938:	2700      	movs	r7, #0
 800393a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800393e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003942:	f1b9 0901 	subs.w	r9, r9, #1
 8003946:	d505      	bpl.n	8003954 <_fwalk_reent+0x24>
 8003948:	6824      	ldr	r4, [r4, #0]
 800394a:	2c00      	cmp	r4, #0
 800394c:	d1f7      	bne.n	800393e <_fwalk_reent+0xe>
 800394e:	4638      	mov	r0, r7
 8003950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003954:	89ab      	ldrh	r3, [r5, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d907      	bls.n	800396a <_fwalk_reent+0x3a>
 800395a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800395e:	3301      	adds	r3, #1
 8003960:	d003      	beq.n	800396a <_fwalk_reent+0x3a>
 8003962:	4629      	mov	r1, r5
 8003964:	4630      	mov	r0, r6
 8003966:	47c0      	blx	r8
 8003968:	4307      	orrs	r7, r0
 800396a:	3568      	adds	r5, #104	; 0x68
 800396c:	e7e9      	b.n	8003942 <_fwalk_reent+0x12>

0800396e <__retarget_lock_init_recursive>:
 800396e:	4770      	bx	lr

08003970 <__retarget_lock_acquire_recursive>:
 8003970:	4770      	bx	lr

08003972 <__retarget_lock_release_recursive>:
 8003972:	4770      	bx	lr

08003974 <sbrk_aligned>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4e0e      	ldr	r6, [pc, #56]	; (80039b0 <sbrk_aligned+0x3c>)
 8003978:	460c      	mov	r4, r1
 800397a:	6831      	ldr	r1, [r6, #0]
 800397c:	4605      	mov	r5, r0
 800397e:	b911      	cbnz	r1, 8003986 <sbrk_aligned+0x12>
 8003980:	f000 fb7a 	bl	8004078 <_sbrk_r>
 8003984:	6030      	str	r0, [r6, #0]
 8003986:	4621      	mov	r1, r4
 8003988:	4628      	mov	r0, r5
 800398a:	f000 fb75 	bl	8004078 <_sbrk_r>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	d00a      	beq.n	80039a8 <sbrk_aligned+0x34>
 8003992:	1cc4      	adds	r4, r0, #3
 8003994:	f024 0403 	bic.w	r4, r4, #3
 8003998:	42a0      	cmp	r0, r4
 800399a:	d007      	beq.n	80039ac <sbrk_aligned+0x38>
 800399c:	1a21      	subs	r1, r4, r0
 800399e:	4628      	mov	r0, r5
 80039a0:	f000 fb6a 	bl	8004078 <_sbrk_r>
 80039a4:	3001      	adds	r0, #1
 80039a6:	d101      	bne.n	80039ac <sbrk_aligned+0x38>
 80039a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80039ac:	4620      	mov	r0, r4
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
 80039b0:	20000274 	.word	0x20000274

080039b4 <_malloc_r>:
 80039b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	1ccd      	adds	r5, r1, #3
 80039ba:	f025 0503 	bic.w	r5, r5, #3
 80039be:	3508      	adds	r5, #8
 80039c0:	2d0c      	cmp	r5, #12
 80039c2:	bf38      	it	cc
 80039c4:	250c      	movcc	r5, #12
 80039c6:	2d00      	cmp	r5, #0
 80039c8:	4607      	mov	r7, r0
 80039ca:	db01      	blt.n	80039d0 <_malloc_r+0x1c>
 80039cc:	42a9      	cmp	r1, r5
 80039ce:	d905      	bls.n	80039dc <_malloc_r+0x28>
 80039d0:	230c      	movs	r3, #12
 80039d2:	2600      	movs	r6, #0
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	4630      	mov	r0, r6
 80039d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039dc:	4e2e      	ldr	r6, [pc, #184]	; (8003a98 <_malloc_r+0xe4>)
 80039de:	f000 fdc5 	bl	800456c <__malloc_lock>
 80039e2:	6833      	ldr	r3, [r6, #0]
 80039e4:	461c      	mov	r4, r3
 80039e6:	bb34      	cbnz	r4, 8003a36 <_malloc_r+0x82>
 80039e8:	4629      	mov	r1, r5
 80039ea:	4638      	mov	r0, r7
 80039ec:	f7ff ffc2 	bl	8003974 <sbrk_aligned>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	4604      	mov	r4, r0
 80039f4:	d14d      	bne.n	8003a92 <_malloc_r+0xde>
 80039f6:	6834      	ldr	r4, [r6, #0]
 80039f8:	4626      	mov	r6, r4
 80039fa:	2e00      	cmp	r6, #0
 80039fc:	d140      	bne.n	8003a80 <_malloc_r+0xcc>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	4631      	mov	r1, r6
 8003a02:	4638      	mov	r0, r7
 8003a04:	eb04 0803 	add.w	r8, r4, r3
 8003a08:	f000 fb36 	bl	8004078 <_sbrk_r>
 8003a0c:	4580      	cmp	r8, r0
 8003a0e:	d13a      	bne.n	8003a86 <_malloc_r+0xd2>
 8003a10:	6821      	ldr	r1, [r4, #0]
 8003a12:	3503      	adds	r5, #3
 8003a14:	1a6d      	subs	r5, r5, r1
 8003a16:	f025 0503 	bic.w	r5, r5, #3
 8003a1a:	3508      	adds	r5, #8
 8003a1c:	2d0c      	cmp	r5, #12
 8003a1e:	bf38      	it	cc
 8003a20:	250c      	movcc	r5, #12
 8003a22:	4638      	mov	r0, r7
 8003a24:	4629      	mov	r1, r5
 8003a26:	f7ff ffa5 	bl	8003974 <sbrk_aligned>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d02b      	beq.n	8003a86 <_malloc_r+0xd2>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	442b      	add	r3, r5
 8003a32:	6023      	str	r3, [r4, #0]
 8003a34:	e00e      	b.n	8003a54 <_malloc_r+0xa0>
 8003a36:	6822      	ldr	r2, [r4, #0]
 8003a38:	1b52      	subs	r2, r2, r5
 8003a3a:	d41e      	bmi.n	8003a7a <_malloc_r+0xc6>
 8003a3c:	2a0b      	cmp	r2, #11
 8003a3e:	d916      	bls.n	8003a6e <_malloc_r+0xba>
 8003a40:	1961      	adds	r1, r4, r5
 8003a42:	42a3      	cmp	r3, r4
 8003a44:	6025      	str	r5, [r4, #0]
 8003a46:	bf18      	it	ne
 8003a48:	6059      	strne	r1, [r3, #4]
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	bf08      	it	eq
 8003a4e:	6031      	streq	r1, [r6, #0]
 8003a50:	5162      	str	r2, [r4, r5]
 8003a52:	604b      	str	r3, [r1, #4]
 8003a54:	4638      	mov	r0, r7
 8003a56:	f104 060b 	add.w	r6, r4, #11
 8003a5a:	f000 fd8d 	bl	8004578 <__malloc_unlock>
 8003a5e:	f026 0607 	bic.w	r6, r6, #7
 8003a62:	1d23      	adds	r3, r4, #4
 8003a64:	1af2      	subs	r2, r6, r3
 8003a66:	d0b6      	beq.n	80039d6 <_malloc_r+0x22>
 8003a68:	1b9b      	subs	r3, r3, r6
 8003a6a:	50a3      	str	r3, [r4, r2]
 8003a6c:	e7b3      	b.n	80039d6 <_malloc_r+0x22>
 8003a6e:	6862      	ldr	r2, [r4, #4]
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	bf0c      	ite	eq
 8003a74:	6032      	streq	r2, [r6, #0]
 8003a76:	605a      	strne	r2, [r3, #4]
 8003a78:	e7ec      	b.n	8003a54 <_malloc_r+0xa0>
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	6864      	ldr	r4, [r4, #4]
 8003a7e:	e7b2      	b.n	80039e6 <_malloc_r+0x32>
 8003a80:	4634      	mov	r4, r6
 8003a82:	6876      	ldr	r6, [r6, #4]
 8003a84:	e7b9      	b.n	80039fa <_malloc_r+0x46>
 8003a86:	230c      	movs	r3, #12
 8003a88:	4638      	mov	r0, r7
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	f000 fd74 	bl	8004578 <__malloc_unlock>
 8003a90:	e7a1      	b.n	80039d6 <_malloc_r+0x22>
 8003a92:	6025      	str	r5, [r4, #0]
 8003a94:	e7de      	b.n	8003a54 <_malloc_r+0xa0>
 8003a96:	bf00      	nop
 8003a98:	20000270 	.word	0x20000270

08003a9c <__sfputc_r>:
 8003a9c:	6893      	ldr	r3, [r2, #8]
 8003a9e:	b410      	push	{r4}
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	6093      	str	r3, [r2, #8]
 8003aa6:	da07      	bge.n	8003ab8 <__sfputc_r+0x1c>
 8003aa8:	6994      	ldr	r4, [r2, #24]
 8003aaa:	42a3      	cmp	r3, r4
 8003aac:	db01      	blt.n	8003ab2 <__sfputc_r+0x16>
 8003aae:	290a      	cmp	r1, #10
 8003ab0:	d102      	bne.n	8003ab8 <__sfputc_r+0x1c>
 8003ab2:	bc10      	pop	{r4}
 8003ab4:	f000 bb34 	b.w	8004120 <__swbuf_r>
 8003ab8:	6813      	ldr	r3, [r2, #0]
 8003aba:	1c58      	adds	r0, r3, #1
 8003abc:	6010      	str	r0, [r2, #0]
 8003abe:	7019      	strb	r1, [r3, #0]
 8003ac0:	4608      	mov	r0, r1
 8003ac2:	bc10      	pop	{r4}
 8003ac4:	4770      	bx	lr

08003ac6 <__sfputs_r>:
 8003ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac8:	4606      	mov	r6, r0
 8003aca:	460f      	mov	r7, r1
 8003acc:	4614      	mov	r4, r2
 8003ace:	18d5      	adds	r5, r2, r3
 8003ad0:	42ac      	cmp	r4, r5
 8003ad2:	d101      	bne.n	8003ad8 <__sfputs_r+0x12>
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	e007      	b.n	8003ae8 <__sfputs_r+0x22>
 8003ad8:	463a      	mov	r2, r7
 8003ada:	4630      	mov	r0, r6
 8003adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ae0:	f7ff ffdc 	bl	8003a9c <__sfputc_r>
 8003ae4:	1c43      	adds	r3, r0, #1
 8003ae6:	d1f3      	bne.n	8003ad0 <__sfputs_r+0xa>
 8003ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003aec <_vfiprintf_r>:
 8003aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af0:	460d      	mov	r5, r1
 8003af2:	4614      	mov	r4, r2
 8003af4:	4698      	mov	r8, r3
 8003af6:	4606      	mov	r6, r0
 8003af8:	b09d      	sub	sp, #116	; 0x74
 8003afa:	b118      	cbz	r0, 8003b04 <_vfiprintf_r+0x18>
 8003afc:	6983      	ldr	r3, [r0, #24]
 8003afe:	b90b      	cbnz	r3, 8003b04 <_vfiprintf_r+0x18>
 8003b00:	f7ff fe98 	bl	8003834 <__sinit>
 8003b04:	4b89      	ldr	r3, [pc, #548]	; (8003d2c <_vfiprintf_r+0x240>)
 8003b06:	429d      	cmp	r5, r3
 8003b08:	d11b      	bne.n	8003b42 <_vfiprintf_r+0x56>
 8003b0a:	6875      	ldr	r5, [r6, #4]
 8003b0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b0e:	07d9      	lsls	r1, r3, #31
 8003b10:	d405      	bmi.n	8003b1e <_vfiprintf_r+0x32>
 8003b12:	89ab      	ldrh	r3, [r5, #12]
 8003b14:	059a      	lsls	r2, r3, #22
 8003b16:	d402      	bmi.n	8003b1e <_vfiprintf_r+0x32>
 8003b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b1a:	f7ff ff29 	bl	8003970 <__retarget_lock_acquire_recursive>
 8003b1e:	89ab      	ldrh	r3, [r5, #12]
 8003b20:	071b      	lsls	r3, r3, #28
 8003b22:	d501      	bpl.n	8003b28 <_vfiprintf_r+0x3c>
 8003b24:	692b      	ldr	r3, [r5, #16]
 8003b26:	b9eb      	cbnz	r3, 8003b64 <_vfiprintf_r+0x78>
 8003b28:	4629      	mov	r1, r5
 8003b2a:	4630      	mov	r0, r6
 8003b2c:	f000 fb5c 	bl	80041e8 <__swsetup_r>
 8003b30:	b1c0      	cbz	r0, 8003b64 <_vfiprintf_r+0x78>
 8003b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b34:	07dc      	lsls	r4, r3, #31
 8003b36:	d50e      	bpl.n	8003b56 <_vfiprintf_r+0x6a>
 8003b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b3c:	b01d      	add	sp, #116	; 0x74
 8003b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b42:	4b7b      	ldr	r3, [pc, #492]	; (8003d30 <_vfiprintf_r+0x244>)
 8003b44:	429d      	cmp	r5, r3
 8003b46:	d101      	bne.n	8003b4c <_vfiprintf_r+0x60>
 8003b48:	68b5      	ldr	r5, [r6, #8]
 8003b4a:	e7df      	b.n	8003b0c <_vfiprintf_r+0x20>
 8003b4c:	4b79      	ldr	r3, [pc, #484]	; (8003d34 <_vfiprintf_r+0x248>)
 8003b4e:	429d      	cmp	r5, r3
 8003b50:	bf08      	it	eq
 8003b52:	68f5      	ldreq	r5, [r6, #12]
 8003b54:	e7da      	b.n	8003b0c <_vfiprintf_r+0x20>
 8003b56:	89ab      	ldrh	r3, [r5, #12]
 8003b58:	0598      	lsls	r0, r3, #22
 8003b5a:	d4ed      	bmi.n	8003b38 <_vfiprintf_r+0x4c>
 8003b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b5e:	f7ff ff08 	bl	8003972 <__retarget_lock_release_recursive>
 8003b62:	e7e9      	b.n	8003b38 <_vfiprintf_r+0x4c>
 8003b64:	2300      	movs	r3, #0
 8003b66:	9309      	str	r3, [sp, #36]	; 0x24
 8003b68:	2320      	movs	r3, #32
 8003b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b6e:	2330      	movs	r3, #48	; 0x30
 8003b70:	f04f 0901 	mov.w	r9, #1
 8003b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003d38 <_vfiprintf_r+0x24c>
 8003b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b80:	4623      	mov	r3, r4
 8003b82:	469a      	mov	sl, r3
 8003b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b88:	b10a      	cbz	r2, 8003b8e <_vfiprintf_r+0xa2>
 8003b8a:	2a25      	cmp	r2, #37	; 0x25
 8003b8c:	d1f9      	bne.n	8003b82 <_vfiprintf_r+0x96>
 8003b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8003b92:	d00b      	beq.n	8003bac <_vfiprintf_r+0xc0>
 8003b94:	465b      	mov	r3, fp
 8003b96:	4622      	mov	r2, r4
 8003b98:	4629      	mov	r1, r5
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f7ff ff93 	bl	8003ac6 <__sfputs_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	f000 80aa 	beq.w	8003cfa <_vfiprintf_r+0x20e>
 8003ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ba8:	445a      	add	r2, fp
 8003baa:	9209      	str	r2, [sp, #36]	; 0x24
 8003bac:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80a2 	beq.w	8003cfa <_vfiprintf_r+0x20e>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc0:	f10a 0a01 	add.w	sl, sl, #1
 8003bc4:	9304      	str	r3, [sp, #16]
 8003bc6:	9307      	str	r3, [sp, #28]
 8003bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8003bce:	4654      	mov	r4, sl
 8003bd0:	2205      	movs	r2, #5
 8003bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd6:	4858      	ldr	r0, [pc, #352]	; (8003d38 <_vfiprintf_r+0x24c>)
 8003bd8:	f000 fcba 	bl	8004550 <memchr>
 8003bdc:	9a04      	ldr	r2, [sp, #16]
 8003bde:	b9d8      	cbnz	r0, 8003c18 <_vfiprintf_r+0x12c>
 8003be0:	06d1      	lsls	r1, r2, #27
 8003be2:	bf44      	itt	mi
 8003be4:	2320      	movmi	r3, #32
 8003be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bea:	0713      	lsls	r3, r2, #28
 8003bec:	bf44      	itt	mi
 8003bee:	232b      	movmi	r3, #43	; 0x2b
 8003bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8003bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bfa:	d015      	beq.n	8003c28 <_vfiprintf_r+0x13c>
 8003bfc:	4654      	mov	r4, sl
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f04f 0c0a 	mov.w	ip, #10
 8003c04:	9a07      	ldr	r2, [sp, #28]
 8003c06:	4621      	mov	r1, r4
 8003c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c0c:	3b30      	subs	r3, #48	; 0x30
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	d94e      	bls.n	8003cb0 <_vfiprintf_r+0x1c4>
 8003c12:	b1b0      	cbz	r0, 8003c42 <_vfiprintf_r+0x156>
 8003c14:	9207      	str	r2, [sp, #28]
 8003c16:	e014      	b.n	8003c42 <_vfiprintf_r+0x156>
 8003c18:	eba0 0308 	sub.w	r3, r0, r8
 8003c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c20:	4313      	orrs	r3, r2
 8003c22:	46a2      	mov	sl, r4
 8003c24:	9304      	str	r3, [sp, #16]
 8003c26:	e7d2      	b.n	8003bce <_vfiprintf_r+0xe2>
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	1d19      	adds	r1, r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	9103      	str	r1, [sp, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bfbb      	ittet	lt
 8003c34:	425b      	neglt	r3, r3
 8003c36:	f042 0202 	orrlt.w	r2, r2, #2
 8003c3a:	9307      	strge	r3, [sp, #28]
 8003c3c:	9307      	strlt	r3, [sp, #28]
 8003c3e:	bfb8      	it	lt
 8003c40:	9204      	strlt	r2, [sp, #16]
 8003c42:	7823      	ldrb	r3, [r4, #0]
 8003c44:	2b2e      	cmp	r3, #46	; 0x2e
 8003c46:	d10c      	bne.n	8003c62 <_vfiprintf_r+0x176>
 8003c48:	7863      	ldrb	r3, [r4, #1]
 8003c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4c:	d135      	bne.n	8003cba <_vfiprintf_r+0x1ce>
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	3402      	adds	r4, #2
 8003c52:	1d1a      	adds	r2, r3, #4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	9203      	str	r2, [sp, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bfb8      	it	lt
 8003c5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003c60:	9305      	str	r3, [sp, #20]
 8003c62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003d3c <_vfiprintf_r+0x250>
 8003c66:	2203      	movs	r2, #3
 8003c68:	4650      	mov	r0, sl
 8003c6a:	7821      	ldrb	r1, [r4, #0]
 8003c6c:	f000 fc70 	bl	8004550 <memchr>
 8003c70:	b140      	cbz	r0, 8003c84 <_vfiprintf_r+0x198>
 8003c72:	2340      	movs	r3, #64	; 0x40
 8003c74:	eba0 000a 	sub.w	r0, r0, sl
 8003c78:	fa03 f000 	lsl.w	r0, r3, r0
 8003c7c:	9b04      	ldr	r3, [sp, #16]
 8003c7e:	3401      	adds	r4, #1
 8003c80:	4303      	orrs	r3, r0
 8003c82:	9304      	str	r3, [sp, #16]
 8003c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c88:	2206      	movs	r2, #6
 8003c8a:	482d      	ldr	r0, [pc, #180]	; (8003d40 <_vfiprintf_r+0x254>)
 8003c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c90:	f000 fc5e 	bl	8004550 <memchr>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d03f      	beq.n	8003d18 <_vfiprintf_r+0x22c>
 8003c98:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <_vfiprintf_r+0x258>)
 8003c9a:	bb1b      	cbnz	r3, 8003ce4 <_vfiprintf_r+0x1f8>
 8003c9c:	9b03      	ldr	r3, [sp, #12]
 8003c9e:	3307      	adds	r3, #7
 8003ca0:	f023 0307 	bic.w	r3, r3, #7
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	9303      	str	r3, [sp, #12]
 8003ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003caa:	443b      	add	r3, r7
 8003cac:	9309      	str	r3, [sp, #36]	; 0x24
 8003cae:	e767      	b.n	8003b80 <_vfiprintf_r+0x94>
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb8:	e7a5      	b.n	8003c06 <_vfiprintf_r+0x11a>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f04f 0c0a 	mov.w	ip, #10
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	3401      	adds	r4, #1
 8003cc4:	9305      	str	r3, [sp, #20]
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ccc:	3a30      	subs	r2, #48	; 0x30
 8003cce:	2a09      	cmp	r2, #9
 8003cd0:	d903      	bls.n	8003cda <_vfiprintf_r+0x1ee>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0c5      	beq.n	8003c62 <_vfiprintf_r+0x176>
 8003cd6:	9105      	str	r1, [sp, #20]
 8003cd8:	e7c3      	b.n	8003c62 <_vfiprintf_r+0x176>
 8003cda:	4604      	mov	r4, r0
 8003cdc:	2301      	movs	r3, #1
 8003cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ce2:	e7f0      	b.n	8003cc6 <_vfiprintf_r+0x1da>
 8003ce4:	ab03      	add	r3, sp, #12
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	462a      	mov	r2, r5
 8003cea:	4630      	mov	r0, r6
 8003cec:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <_vfiprintf_r+0x25c>)
 8003cee:	a904      	add	r1, sp, #16
 8003cf0:	f3af 8000 	nop.w
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	1c78      	adds	r0, r7, #1
 8003cf8:	d1d6      	bne.n	8003ca8 <_vfiprintf_r+0x1bc>
 8003cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cfc:	07d9      	lsls	r1, r3, #31
 8003cfe:	d405      	bmi.n	8003d0c <_vfiprintf_r+0x220>
 8003d00:	89ab      	ldrh	r3, [r5, #12]
 8003d02:	059a      	lsls	r2, r3, #22
 8003d04:	d402      	bmi.n	8003d0c <_vfiprintf_r+0x220>
 8003d06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d08:	f7ff fe33 	bl	8003972 <__retarget_lock_release_recursive>
 8003d0c:	89ab      	ldrh	r3, [r5, #12]
 8003d0e:	065b      	lsls	r3, r3, #25
 8003d10:	f53f af12 	bmi.w	8003b38 <_vfiprintf_r+0x4c>
 8003d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d16:	e711      	b.n	8003b3c <_vfiprintf_r+0x50>
 8003d18:	ab03      	add	r3, sp, #12
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	462a      	mov	r2, r5
 8003d1e:	4630      	mov	r0, r6
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <_vfiprintf_r+0x25c>)
 8003d22:	a904      	add	r1, sp, #16
 8003d24:	f000 f882 	bl	8003e2c <_printf_i>
 8003d28:	e7e4      	b.n	8003cf4 <_vfiprintf_r+0x208>
 8003d2a:	bf00      	nop
 8003d2c:	0800482c 	.word	0x0800482c
 8003d30:	0800484c 	.word	0x0800484c
 8003d34:	0800480c 	.word	0x0800480c
 8003d38:	0800486c 	.word	0x0800486c
 8003d3c:	08004872 	.word	0x08004872
 8003d40:	08004876 	.word	0x08004876
 8003d44:	00000000 	.word	0x00000000
 8003d48:	08003ac7 	.word	0x08003ac7

08003d4c <_printf_common>:
 8003d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d50:	4616      	mov	r6, r2
 8003d52:	4699      	mov	r9, r3
 8003d54:	688a      	ldr	r2, [r1, #8]
 8003d56:	690b      	ldr	r3, [r1, #16]
 8003d58:	4607      	mov	r7, r0
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	bfb8      	it	lt
 8003d5e:	4613      	movlt	r3, r2
 8003d60:	6033      	str	r3, [r6, #0]
 8003d62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d66:	460c      	mov	r4, r1
 8003d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d6c:	b10a      	cbz	r2, 8003d72 <_printf_common+0x26>
 8003d6e:	3301      	adds	r3, #1
 8003d70:	6033      	str	r3, [r6, #0]
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	0699      	lsls	r1, r3, #26
 8003d76:	bf42      	ittt	mi
 8003d78:	6833      	ldrmi	r3, [r6, #0]
 8003d7a:	3302      	addmi	r3, #2
 8003d7c:	6033      	strmi	r3, [r6, #0]
 8003d7e:	6825      	ldr	r5, [r4, #0]
 8003d80:	f015 0506 	ands.w	r5, r5, #6
 8003d84:	d106      	bne.n	8003d94 <_printf_common+0x48>
 8003d86:	f104 0a19 	add.w	sl, r4, #25
 8003d8a:	68e3      	ldr	r3, [r4, #12]
 8003d8c:	6832      	ldr	r2, [r6, #0]
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	42ab      	cmp	r3, r5
 8003d92:	dc28      	bgt.n	8003de6 <_printf_common+0x9a>
 8003d94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d98:	1e13      	subs	r3, r2, #0
 8003d9a:	6822      	ldr	r2, [r4, #0]
 8003d9c:	bf18      	it	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	0692      	lsls	r2, r2, #26
 8003da2:	d42d      	bmi.n	8003e00 <_printf_common+0xb4>
 8003da4:	4649      	mov	r1, r9
 8003da6:	4638      	mov	r0, r7
 8003da8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dac:	47c0      	blx	r8
 8003dae:	3001      	adds	r0, #1
 8003db0:	d020      	beq.n	8003df4 <_printf_common+0xa8>
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	68e5      	ldr	r5, [r4, #12]
 8003db6:	f003 0306 	and.w	r3, r3, #6
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	bf18      	it	ne
 8003dbe:	2500      	movne	r5, #0
 8003dc0:	6832      	ldr	r2, [r6, #0]
 8003dc2:	f04f 0600 	mov.w	r6, #0
 8003dc6:	68a3      	ldr	r3, [r4, #8]
 8003dc8:	bf08      	it	eq
 8003dca:	1aad      	subeq	r5, r5, r2
 8003dcc:	6922      	ldr	r2, [r4, #16]
 8003dce:	bf08      	it	eq
 8003dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	bfc4      	itt	gt
 8003dd8:	1a9b      	subgt	r3, r3, r2
 8003dda:	18ed      	addgt	r5, r5, r3
 8003ddc:	341a      	adds	r4, #26
 8003dde:	42b5      	cmp	r5, r6
 8003de0:	d11a      	bne.n	8003e18 <_printf_common+0xcc>
 8003de2:	2000      	movs	r0, #0
 8003de4:	e008      	b.n	8003df8 <_printf_common+0xac>
 8003de6:	2301      	movs	r3, #1
 8003de8:	4652      	mov	r2, sl
 8003dea:	4649      	mov	r1, r9
 8003dec:	4638      	mov	r0, r7
 8003dee:	47c0      	blx	r8
 8003df0:	3001      	adds	r0, #1
 8003df2:	d103      	bne.n	8003dfc <_printf_common+0xb0>
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dfc:	3501      	adds	r5, #1
 8003dfe:	e7c4      	b.n	8003d8a <_printf_common+0x3e>
 8003e00:	2030      	movs	r0, #48	; 0x30
 8003e02:	18e1      	adds	r1, r4, r3
 8003e04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e0e:	4422      	add	r2, r4
 8003e10:	3302      	adds	r3, #2
 8003e12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e16:	e7c5      	b.n	8003da4 <_printf_common+0x58>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	4638      	mov	r0, r7
 8003e20:	47c0      	blx	r8
 8003e22:	3001      	adds	r0, #1
 8003e24:	d0e6      	beq.n	8003df4 <_printf_common+0xa8>
 8003e26:	3601      	adds	r6, #1
 8003e28:	e7d9      	b.n	8003dde <_printf_common+0x92>
	...

08003e2c <_printf_i>:
 8003e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e30:	7e0f      	ldrb	r7, [r1, #24]
 8003e32:	4691      	mov	r9, r2
 8003e34:	2f78      	cmp	r7, #120	; 0x78
 8003e36:	4680      	mov	r8, r0
 8003e38:	460c      	mov	r4, r1
 8003e3a:	469a      	mov	sl, r3
 8003e3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e42:	d807      	bhi.n	8003e54 <_printf_i+0x28>
 8003e44:	2f62      	cmp	r7, #98	; 0x62
 8003e46:	d80a      	bhi.n	8003e5e <_printf_i+0x32>
 8003e48:	2f00      	cmp	r7, #0
 8003e4a:	f000 80d9 	beq.w	8004000 <_printf_i+0x1d4>
 8003e4e:	2f58      	cmp	r7, #88	; 0x58
 8003e50:	f000 80a4 	beq.w	8003f9c <_printf_i+0x170>
 8003e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e5c:	e03a      	b.n	8003ed4 <_printf_i+0xa8>
 8003e5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e62:	2b15      	cmp	r3, #21
 8003e64:	d8f6      	bhi.n	8003e54 <_printf_i+0x28>
 8003e66:	a101      	add	r1, pc, #4	; (adr r1, 8003e6c <_printf_i+0x40>)
 8003e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e6c:	08003ec5 	.word	0x08003ec5
 8003e70:	08003ed9 	.word	0x08003ed9
 8003e74:	08003e55 	.word	0x08003e55
 8003e78:	08003e55 	.word	0x08003e55
 8003e7c:	08003e55 	.word	0x08003e55
 8003e80:	08003e55 	.word	0x08003e55
 8003e84:	08003ed9 	.word	0x08003ed9
 8003e88:	08003e55 	.word	0x08003e55
 8003e8c:	08003e55 	.word	0x08003e55
 8003e90:	08003e55 	.word	0x08003e55
 8003e94:	08003e55 	.word	0x08003e55
 8003e98:	08003fe7 	.word	0x08003fe7
 8003e9c:	08003f09 	.word	0x08003f09
 8003ea0:	08003fc9 	.word	0x08003fc9
 8003ea4:	08003e55 	.word	0x08003e55
 8003ea8:	08003e55 	.word	0x08003e55
 8003eac:	08004009 	.word	0x08004009
 8003eb0:	08003e55 	.word	0x08003e55
 8003eb4:	08003f09 	.word	0x08003f09
 8003eb8:	08003e55 	.word	0x08003e55
 8003ebc:	08003e55 	.word	0x08003e55
 8003ec0:	08003fd1 	.word	0x08003fd1
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	1d1a      	adds	r2, r3, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	602a      	str	r2, [r5, #0]
 8003ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0a4      	b.n	8004022 <_printf_i+0x1f6>
 8003ed8:	6820      	ldr	r0, [r4, #0]
 8003eda:	6829      	ldr	r1, [r5, #0]
 8003edc:	0606      	lsls	r6, r0, #24
 8003ede:	f101 0304 	add.w	r3, r1, #4
 8003ee2:	d50a      	bpl.n	8003efa <_printf_i+0xce>
 8003ee4:	680e      	ldr	r6, [r1, #0]
 8003ee6:	602b      	str	r3, [r5, #0]
 8003ee8:	2e00      	cmp	r6, #0
 8003eea:	da03      	bge.n	8003ef4 <_printf_i+0xc8>
 8003eec:	232d      	movs	r3, #45	; 0x2d
 8003eee:	4276      	negs	r6, r6
 8003ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef4:	230a      	movs	r3, #10
 8003ef6:	485e      	ldr	r0, [pc, #376]	; (8004070 <_printf_i+0x244>)
 8003ef8:	e019      	b.n	8003f2e <_printf_i+0x102>
 8003efa:	680e      	ldr	r6, [r1, #0]
 8003efc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f00:	602b      	str	r3, [r5, #0]
 8003f02:	bf18      	it	ne
 8003f04:	b236      	sxthne	r6, r6
 8003f06:	e7ef      	b.n	8003ee8 <_printf_i+0xbc>
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	6820      	ldr	r0, [r4, #0]
 8003f0c:	1d19      	adds	r1, r3, #4
 8003f0e:	6029      	str	r1, [r5, #0]
 8003f10:	0601      	lsls	r1, r0, #24
 8003f12:	d501      	bpl.n	8003f18 <_printf_i+0xec>
 8003f14:	681e      	ldr	r6, [r3, #0]
 8003f16:	e002      	b.n	8003f1e <_printf_i+0xf2>
 8003f18:	0646      	lsls	r6, r0, #25
 8003f1a:	d5fb      	bpl.n	8003f14 <_printf_i+0xe8>
 8003f1c:	881e      	ldrh	r6, [r3, #0]
 8003f1e:	2f6f      	cmp	r7, #111	; 0x6f
 8003f20:	bf0c      	ite	eq
 8003f22:	2308      	moveq	r3, #8
 8003f24:	230a      	movne	r3, #10
 8003f26:	4852      	ldr	r0, [pc, #328]	; (8004070 <_printf_i+0x244>)
 8003f28:	2100      	movs	r1, #0
 8003f2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f2e:	6865      	ldr	r5, [r4, #4]
 8003f30:	2d00      	cmp	r5, #0
 8003f32:	bfa8      	it	ge
 8003f34:	6821      	ldrge	r1, [r4, #0]
 8003f36:	60a5      	str	r5, [r4, #8]
 8003f38:	bfa4      	itt	ge
 8003f3a:	f021 0104 	bicge.w	r1, r1, #4
 8003f3e:	6021      	strge	r1, [r4, #0]
 8003f40:	b90e      	cbnz	r6, 8003f46 <_printf_i+0x11a>
 8003f42:	2d00      	cmp	r5, #0
 8003f44:	d04d      	beq.n	8003fe2 <_printf_i+0x1b6>
 8003f46:	4615      	mov	r5, r2
 8003f48:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f4c:	fb03 6711 	mls	r7, r3, r1, r6
 8003f50:	5dc7      	ldrb	r7, [r0, r7]
 8003f52:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f56:	4637      	mov	r7, r6
 8003f58:	42bb      	cmp	r3, r7
 8003f5a:	460e      	mov	r6, r1
 8003f5c:	d9f4      	bls.n	8003f48 <_printf_i+0x11c>
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d10b      	bne.n	8003f7a <_printf_i+0x14e>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	07de      	lsls	r6, r3, #31
 8003f66:	d508      	bpl.n	8003f7a <_printf_i+0x14e>
 8003f68:	6923      	ldr	r3, [r4, #16]
 8003f6a:	6861      	ldr	r1, [r4, #4]
 8003f6c:	4299      	cmp	r1, r3
 8003f6e:	bfde      	ittt	le
 8003f70:	2330      	movle	r3, #48	; 0x30
 8003f72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f76:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f7a:	1b52      	subs	r2, r2, r5
 8003f7c:	6122      	str	r2, [r4, #16]
 8003f7e:	464b      	mov	r3, r9
 8003f80:	4621      	mov	r1, r4
 8003f82:	4640      	mov	r0, r8
 8003f84:	f8cd a000 	str.w	sl, [sp]
 8003f88:	aa03      	add	r2, sp, #12
 8003f8a:	f7ff fedf 	bl	8003d4c <_printf_common>
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d14c      	bne.n	800402c <_printf_i+0x200>
 8003f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f96:	b004      	add	sp, #16
 8003f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9c:	4834      	ldr	r0, [pc, #208]	; (8004070 <_printf_i+0x244>)
 8003f9e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fa2:	6829      	ldr	r1, [r5, #0]
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	f851 6b04 	ldr.w	r6, [r1], #4
 8003faa:	6029      	str	r1, [r5, #0]
 8003fac:	061d      	lsls	r5, r3, #24
 8003fae:	d514      	bpl.n	8003fda <_printf_i+0x1ae>
 8003fb0:	07df      	lsls	r7, r3, #31
 8003fb2:	bf44      	itt	mi
 8003fb4:	f043 0320 	orrmi.w	r3, r3, #32
 8003fb8:	6023      	strmi	r3, [r4, #0]
 8003fba:	b91e      	cbnz	r6, 8003fc4 <_printf_i+0x198>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	f023 0320 	bic.w	r3, r3, #32
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	e7af      	b.n	8003f28 <_printf_i+0xfc>
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	f043 0320 	orr.w	r3, r3, #32
 8003fce:	6023      	str	r3, [r4, #0]
 8003fd0:	2378      	movs	r3, #120	; 0x78
 8003fd2:	4828      	ldr	r0, [pc, #160]	; (8004074 <_printf_i+0x248>)
 8003fd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fd8:	e7e3      	b.n	8003fa2 <_printf_i+0x176>
 8003fda:	0659      	lsls	r1, r3, #25
 8003fdc:	bf48      	it	mi
 8003fde:	b2b6      	uxthmi	r6, r6
 8003fe0:	e7e6      	b.n	8003fb0 <_printf_i+0x184>
 8003fe2:	4615      	mov	r5, r2
 8003fe4:	e7bb      	b.n	8003f5e <_printf_i+0x132>
 8003fe6:	682b      	ldr	r3, [r5, #0]
 8003fe8:	6826      	ldr	r6, [r4, #0]
 8003fea:	1d18      	adds	r0, r3, #4
 8003fec:	6961      	ldr	r1, [r4, #20]
 8003fee:	6028      	str	r0, [r5, #0]
 8003ff0:	0635      	lsls	r5, r6, #24
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	d501      	bpl.n	8003ffa <_printf_i+0x1ce>
 8003ff6:	6019      	str	r1, [r3, #0]
 8003ff8:	e002      	b.n	8004000 <_printf_i+0x1d4>
 8003ffa:	0670      	lsls	r0, r6, #25
 8003ffc:	d5fb      	bpl.n	8003ff6 <_printf_i+0x1ca>
 8003ffe:	8019      	strh	r1, [r3, #0]
 8004000:	2300      	movs	r3, #0
 8004002:	4615      	mov	r5, r2
 8004004:	6123      	str	r3, [r4, #16]
 8004006:	e7ba      	b.n	8003f7e <_printf_i+0x152>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	2100      	movs	r1, #0
 800400c:	1d1a      	adds	r2, r3, #4
 800400e:	602a      	str	r2, [r5, #0]
 8004010:	681d      	ldr	r5, [r3, #0]
 8004012:	6862      	ldr	r2, [r4, #4]
 8004014:	4628      	mov	r0, r5
 8004016:	f000 fa9b 	bl	8004550 <memchr>
 800401a:	b108      	cbz	r0, 8004020 <_printf_i+0x1f4>
 800401c:	1b40      	subs	r0, r0, r5
 800401e:	6060      	str	r0, [r4, #4]
 8004020:	6863      	ldr	r3, [r4, #4]
 8004022:	6123      	str	r3, [r4, #16]
 8004024:	2300      	movs	r3, #0
 8004026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800402a:	e7a8      	b.n	8003f7e <_printf_i+0x152>
 800402c:	462a      	mov	r2, r5
 800402e:	4649      	mov	r1, r9
 8004030:	4640      	mov	r0, r8
 8004032:	6923      	ldr	r3, [r4, #16]
 8004034:	47d0      	blx	sl
 8004036:	3001      	adds	r0, #1
 8004038:	d0ab      	beq.n	8003f92 <_printf_i+0x166>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	079b      	lsls	r3, r3, #30
 800403e:	d413      	bmi.n	8004068 <_printf_i+0x23c>
 8004040:	68e0      	ldr	r0, [r4, #12]
 8004042:	9b03      	ldr	r3, [sp, #12]
 8004044:	4298      	cmp	r0, r3
 8004046:	bfb8      	it	lt
 8004048:	4618      	movlt	r0, r3
 800404a:	e7a4      	b.n	8003f96 <_printf_i+0x16a>
 800404c:	2301      	movs	r3, #1
 800404e:	4632      	mov	r2, r6
 8004050:	4649      	mov	r1, r9
 8004052:	4640      	mov	r0, r8
 8004054:	47d0      	blx	sl
 8004056:	3001      	adds	r0, #1
 8004058:	d09b      	beq.n	8003f92 <_printf_i+0x166>
 800405a:	3501      	adds	r5, #1
 800405c:	68e3      	ldr	r3, [r4, #12]
 800405e:	9903      	ldr	r1, [sp, #12]
 8004060:	1a5b      	subs	r3, r3, r1
 8004062:	42ab      	cmp	r3, r5
 8004064:	dcf2      	bgt.n	800404c <_printf_i+0x220>
 8004066:	e7eb      	b.n	8004040 <_printf_i+0x214>
 8004068:	2500      	movs	r5, #0
 800406a:	f104 0619 	add.w	r6, r4, #25
 800406e:	e7f5      	b.n	800405c <_printf_i+0x230>
 8004070:	0800487d 	.word	0x0800487d
 8004074:	0800488e 	.word	0x0800488e

08004078 <_sbrk_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	2300      	movs	r3, #0
 800407c:	4d05      	ldr	r5, [pc, #20]	; (8004094 <_sbrk_r+0x1c>)
 800407e:	4604      	mov	r4, r0
 8004080:	4608      	mov	r0, r1
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	f7fc fc5c 	bl	8000940 <_sbrk>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d102      	bne.n	8004092 <_sbrk_r+0x1a>
 800408c:	682b      	ldr	r3, [r5, #0]
 800408e:	b103      	cbz	r3, 8004092 <_sbrk_r+0x1a>
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	bd38      	pop	{r3, r4, r5, pc}
 8004094:	20000278 	.word	0x20000278

08004098 <__sread>:
 8004098:	b510      	push	{r4, lr}
 800409a:	460c      	mov	r4, r1
 800409c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a0:	f000 fab8 	bl	8004614 <_read_r>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	bfab      	itete	ge
 80040a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040aa:	89a3      	ldrhlt	r3, [r4, #12]
 80040ac:	181b      	addge	r3, r3, r0
 80040ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040b2:	bfac      	ite	ge
 80040b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80040b6:	81a3      	strhlt	r3, [r4, #12]
 80040b8:	bd10      	pop	{r4, pc}

080040ba <__swrite>:
 80040ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040be:	461f      	mov	r7, r3
 80040c0:	898b      	ldrh	r3, [r1, #12]
 80040c2:	4605      	mov	r5, r0
 80040c4:	05db      	lsls	r3, r3, #23
 80040c6:	460c      	mov	r4, r1
 80040c8:	4616      	mov	r6, r2
 80040ca:	d505      	bpl.n	80040d8 <__swrite+0x1e>
 80040cc:	2302      	movs	r3, #2
 80040ce:	2200      	movs	r2, #0
 80040d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d4:	f000 f9c4 	bl	8004460 <_lseek_r>
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	4632      	mov	r2, r6
 80040dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040e0:	81a3      	strh	r3, [r4, #12]
 80040e2:	4628      	mov	r0, r5
 80040e4:	463b      	mov	r3, r7
 80040e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ee:	f000 b869 	b.w	80041c4 <_write_r>

080040f2 <__sseek>:
 80040f2:	b510      	push	{r4, lr}
 80040f4:	460c      	mov	r4, r1
 80040f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040fa:	f000 f9b1 	bl	8004460 <_lseek_r>
 80040fe:	1c43      	adds	r3, r0, #1
 8004100:	89a3      	ldrh	r3, [r4, #12]
 8004102:	bf15      	itete	ne
 8004104:	6560      	strne	r0, [r4, #84]	; 0x54
 8004106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800410a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800410e:	81a3      	strheq	r3, [r4, #12]
 8004110:	bf18      	it	ne
 8004112:	81a3      	strhne	r3, [r4, #12]
 8004114:	bd10      	pop	{r4, pc}

08004116 <__sclose>:
 8004116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800411a:	f000 b8d3 	b.w	80042c4 <_close_r>
	...

08004120 <__swbuf_r>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	460e      	mov	r6, r1
 8004124:	4614      	mov	r4, r2
 8004126:	4605      	mov	r5, r0
 8004128:	b118      	cbz	r0, 8004132 <__swbuf_r+0x12>
 800412a:	6983      	ldr	r3, [r0, #24]
 800412c:	b90b      	cbnz	r3, 8004132 <__swbuf_r+0x12>
 800412e:	f7ff fb81 	bl	8003834 <__sinit>
 8004132:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <__swbuf_r+0x98>)
 8004134:	429c      	cmp	r4, r3
 8004136:	d12b      	bne.n	8004190 <__swbuf_r+0x70>
 8004138:	686c      	ldr	r4, [r5, #4]
 800413a:	69a3      	ldr	r3, [r4, #24]
 800413c:	60a3      	str	r3, [r4, #8]
 800413e:	89a3      	ldrh	r3, [r4, #12]
 8004140:	071a      	lsls	r2, r3, #28
 8004142:	d52f      	bpl.n	80041a4 <__swbuf_r+0x84>
 8004144:	6923      	ldr	r3, [r4, #16]
 8004146:	b36b      	cbz	r3, 80041a4 <__swbuf_r+0x84>
 8004148:	6923      	ldr	r3, [r4, #16]
 800414a:	6820      	ldr	r0, [r4, #0]
 800414c:	b2f6      	uxtb	r6, r6
 800414e:	1ac0      	subs	r0, r0, r3
 8004150:	6963      	ldr	r3, [r4, #20]
 8004152:	4637      	mov	r7, r6
 8004154:	4283      	cmp	r3, r0
 8004156:	dc04      	bgt.n	8004162 <__swbuf_r+0x42>
 8004158:	4621      	mov	r1, r4
 800415a:	4628      	mov	r0, r5
 800415c:	f000 f944 	bl	80043e8 <_fflush_r>
 8004160:	bb30      	cbnz	r0, 80041b0 <__swbuf_r+0x90>
 8004162:	68a3      	ldr	r3, [r4, #8]
 8004164:	3001      	adds	r0, #1
 8004166:	3b01      	subs	r3, #1
 8004168:	60a3      	str	r3, [r4, #8]
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	6022      	str	r2, [r4, #0]
 8004170:	701e      	strb	r6, [r3, #0]
 8004172:	6963      	ldr	r3, [r4, #20]
 8004174:	4283      	cmp	r3, r0
 8004176:	d004      	beq.n	8004182 <__swbuf_r+0x62>
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	07db      	lsls	r3, r3, #31
 800417c:	d506      	bpl.n	800418c <__swbuf_r+0x6c>
 800417e:	2e0a      	cmp	r6, #10
 8004180:	d104      	bne.n	800418c <__swbuf_r+0x6c>
 8004182:	4621      	mov	r1, r4
 8004184:	4628      	mov	r0, r5
 8004186:	f000 f92f 	bl	80043e8 <_fflush_r>
 800418a:	b988      	cbnz	r0, 80041b0 <__swbuf_r+0x90>
 800418c:	4638      	mov	r0, r7
 800418e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004190:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <__swbuf_r+0x9c>)
 8004192:	429c      	cmp	r4, r3
 8004194:	d101      	bne.n	800419a <__swbuf_r+0x7a>
 8004196:	68ac      	ldr	r4, [r5, #8]
 8004198:	e7cf      	b.n	800413a <__swbuf_r+0x1a>
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <__swbuf_r+0xa0>)
 800419c:	429c      	cmp	r4, r3
 800419e:	bf08      	it	eq
 80041a0:	68ec      	ldreq	r4, [r5, #12]
 80041a2:	e7ca      	b.n	800413a <__swbuf_r+0x1a>
 80041a4:	4621      	mov	r1, r4
 80041a6:	4628      	mov	r0, r5
 80041a8:	f000 f81e 	bl	80041e8 <__swsetup_r>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d0cb      	beq.n	8004148 <__swbuf_r+0x28>
 80041b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80041b4:	e7ea      	b.n	800418c <__swbuf_r+0x6c>
 80041b6:	bf00      	nop
 80041b8:	0800482c 	.word	0x0800482c
 80041bc:	0800484c 	.word	0x0800484c
 80041c0:	0800480c 	.word	0x0800480c

080041c4 <_write_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4604      	mov	r4, r0
 80041c8:	4608      	mov	r0, r1
 80041ca:	4611      	mov	r1, r2
 80041cc:	2200      	movs	r2, #0
 80041ce:	4d05      	ldr	r5, [pc, #20]	; (80041e4 <_write_r+0x20>)
 80041d0:	602a      	str	r2, [r5, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f7fb ffda 	bl	800018c <_write>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d102      	bne.n	80041e2 <_write_r+0x1e>
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	b103      	cbz	r3, 80041e2 <_write_r+0x1e>
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
 80041e4:	20000278 	.word	0x20000278

080041e8 <__swsetup_r>:
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <__swsetup_r+0xcc>)
 80041ea:	b570      	push	{r4, r5, r6, lr}
 80041ec:	681d      	ldr	r5, [r3, #0]
 80041ee:	4606      	mov	r6, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	b125      	cbz	r5, 80041fe <__swsetup_r+0x16>
 80041f4:	69ab      	ldr	r3, [r5, #24]
 80041f6:	b913      	cbnz	r3, 80041fe <__swsetup_r+0x16>
 80041f8:	4628      	mov	r0, r5
 80041fa:	f7ff fb1b 	bl	8003834 <__sinit>
 80041fe:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <__swsetup_r+0xd0>)
 8004200:	429c      	cmp	r4, r3
 8004202:	d10f      	bne.n	8004224 <__swsetup_r+0x3c>
 8004204:	686c      	ldr	r4, [r5, #4]
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800420c:	0719      	lsls	r1, r3, #28
 800420e:	d42c      	bmi.n	800426a <__swsetup_r+0x82>
 8004210:	06dd      	lsls	r5, r3, #27
 8004212:	d411      	bmi.n	8004238 <__swsetup_r+0x50>
 8004214:	2309      	movs	r3, #9
 8004216:	6033      	str	r3, [r6, #0]
 8004218:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800421c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004220:	81a3      	strh	r3, [r4, #12]
 8004222:	e03e      	b.n	80042a2 <__swsetup_r+0xba>
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <__swsetup_r+0xd4>)
 8004226:	429c      	cmp	r4, r3
 8004228:	d101      	bne.n	800422e <__swsetup_r+0x46>
 800422a:	68ac      	ldr	r4, [r5, #8]
 800422c:	e7eb      	b.n	8004206 <__swsetup_r+0x1e>
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <__swsetup_r+0xd8>)
 8004230:	429c      	cmp	r4, r3
 8004232:	bf08      	it	eq
 8004234:	68ec      	ldreq	r4, [r5, #12]
 8004236:	e7e6      	b.n	8004206 <__swsetup_r+0x1e>
 8004238:	0758      	lsls	r0, r3, #29
 800423a:	d512      	bpl.n	8004262 <__swsetup_r+0x7a>
 800423c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800423e:	b141      	cbz	r1, 8004252 <__swsetup_r+0x6a>
 8004240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004244:	4299      	cmp	r1, r3
 8004246:	d002      	beq.n	800424e <__swsetup_r+0x66>
 8004248:	4630      	mov	r0, r6
 800424a:	f000 f99b 	bl	8004584 <_free_r>
 800424e:	2300      	movs	r3, #0
 8004250:	6363      	str	r3, [r4, #52]	; 0x34
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	2300      	movs	r3, #0
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	f043 0308 	orr.w	r3, r3, #8
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	b94b      	cbnz	r3, 8004282 <__swsetup_r+0x9a>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004278:	d003      	beq.n	8004282 <__swsetup_r+0x9a>
 800427a:	4621      	mov	r1, r4
 800427c:	4630      	mov	r0, r6
 800427e:	f000 f927 	bl	80044d0 <__smakebuf_r>
 8004282:	89a0      	ldrh	r0, [r4, #12]
 8004284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004288:	f010 0301 	ands.w	r3, r0, #1
 800428c:	d00a      	beq.n	80042a4 <__swsetup_r+0xbc>
 800428e:	2300      	movs	r3, #0
 8004290:	60a3      	str	r3, [r4, #8]
 8004292:	6963      	ldr	r3, [r4, #20]
 8004294:	425b      	negs	r3, r3
 8004296:	61a3      	str	r3, [r4, #24]
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	b943      	cbnz	r3, 80042ae <__swsetup_r+0xc6>
 800429c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042a0:	d1ba      	bne.n	8004218 <__swsetup_r+0x30>
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	0781      	lsls	r1, r0, #30
 80042a6:	bf58      	it	pl
 80042a8:	6963      	ldrpl	r3, [r4, #20]
 80042aa:	60a3      	str	r3, [r4, #8]
 80042ac:	e7f4      	b.n	8004298 <__swsetup_r+0xb0>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e7f7      	b.n	80042a2 <__swsetup_r+0xba>
 80042b2:	bf00      	nop
 80042b4:	20000010 	.word	0x20000010
 80042b8:	0800482c 	.word	0x0800482c
 80042bc:	0800484c 	.word	0x0800484c
 80042c0:	0800480c 	.word	0x0800480c

080042c4 <_close_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	2300      	movs	r3, #0
 80042c8:	4d05      	ldr	r5, [pc, #20]	; (80042e0 <_close_r+0x1c>)
 80042ca:	4604      	mov	r4, r0
 80042cc:	4608      	mov	r0, r1
 80042ce:	602b      	str	r3, [r5, #0]
 80042d0:	f7fc fb06 	bl	80008e0 <_close>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d102      	bne.n	80042de <_close_r+0x1a>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b103      	cbz	r3, 80042de <_close_r+0x1a>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	20000278 	.word	0x20000278

080042e4 <__sflush_r>:
 80042e4:	898a      	ldrh	r2, [r1, #12]
 80042e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e8:	4605      	mov	r5, r0
 80042ea:	0710      	lsls	r0, r2, #28
 80042ec:	460c      	mov	r4, r1
 80042ee:	d457      	bmi.n	80043a0 <__sflush_r+0xbc>
 80042f0:	684b      	ldr	r3, [r1, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	dc04      	bgt.n	8004300 <__sflush_r+0x1c>
 80042f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	dc01      	bgt.n	8004300 <__sflush_r+0x1c>
 80042fc:	2000      	movs	r0, #0
 80042fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004302:	2e00      	cmp	r6, #0
 8004304:	d0fa      	beq.n	80042fc <__sflush_r+0x18>
 8004306:	2300      	movs	r3, #0
 8004308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800430c:	682f      	ldr	r7, [r5, #0]
 800430e:	602b      	str	r3, [r5, #0]
 8004310:	d032      	beq.n	8004378 <__sflush_r+0x94>
 8004312:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	075a      	lsls	r2, r3, #29
 8004318:	d505      	bpl.n	8004326 <__sflush_r+0x42>
 800431a:	6863      	ldr	r3, [r4, #4]
 800431c:	1ac0      	subs	r0, r0, r3
 800431e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004320:	b10b      	cbz	r3, 8004326 <__sflush_r+0x42>
 8004322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004324:	1ac0      	subs	r0, r0, r3
 8004326:	2300      	movs	r3, #0
 8004328:	4602      	mov	r2, r0
 800432a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800432c:	4628      	mov	r0, r5
 800432e:	6a21      	ldr	r1, [r4, #32]
 8004330:	47b0      	blx	r6
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	d106      	bne.n	8004346 <__sflush_r+0x62>
 8004338:	6829      	ldr	r1, [r5, #0]
 800433a:	291d      	cmp	r1, #29
 800433c:	d82c      	bhi.n	8004398 <__sflush_r+0xb4>
 800433e:	4a29      	ldr	r2, [pc, #164]	; (80043e4 <__sflush_r+0x100>)
 8004340:	40ca      	lsrs	r2, r1
 8004342:	07d6      	lsls	r6, r2, #31
 8004344:	d528      	bpl.n	8004398 <__sflush_r+0xb4>
 8004346:	2200      	movs	r2, #0
 8004348:	6062      	str	r2, [r4, #4]
 800434a:	6922      	ldr	r2, [r4, #16]
 800434c:	04d9      	lsls	r1, r3, #19
 800434e:	6022      	str	r2, [r4, #0]
 8004350:	d504      	bpl.n	800435c <__sflush_r+0x78>
 8004352:	1c42      	adds	r2, r0, #1
 8004354:	d101      	bne.n	800435a <__sflush_r+0x76>
 8004356:	682b      	ldr	r3, [r5, #0]
 8004358:	b903      	cbnz	r3, 800435c <__sflush_r+0x78>
 800435a:	6560      	str	r0, [r4, #84]	; 0x54
 800435c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800435e:	602f      	str	r7, [r5, #0]
 8004360:	2900      	cmp	r1, #0
 8004362:	d0cb      	beq.n	80042fc <__sflush_r+0x18>
 8004364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004368:	4299      	cmp	r1, r3
 800436a:	d002      	beq.n	8004372 <__sflush_r+0x8e>
 800436c:	4628      	mov	r0, r5
 800436e:	f000 f909 	bl	8004584 <_free_r>
 8004372:	2000      	movs	r0, #0
 8004374:	6360      	str	r0, [r4, #52]	; 0x34
 8004376:	e7c2      	b.n	80042fe <__sflush_r+0x1a>
 8004378:	6a21      	ldr	r1, [r4, #32]
 800437a:	2301      	movs	r3, #1
 800437c:	4628      	mov	r0, r5
 800437e:	47b0      	blx	r6
 8004380:	1c41      	adds	r1, r0, #1
 8004382:	d1c7      	bne.n	8004314 <__sflush_r+0x30>
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0c4      	beq.n	8004314 <__sflush_r+0x30>
 800438a:	2b1d      	cmp	r3, #29
 800438c:	d001      	beq.n	8004392 <__sflush_r+0xae>
 800438e:	2b16      	cmp	r3, #22
 8004390:	d101      	bne.n	8004396 <__sflush_r+0xb2>
 8004392:	602f      	str	r7, [r5, #0]
 8004394:	e7b2      	b.n	80042fc <__sflush_r+0x18>
 8004396:	89a3      	ldrh	r3, [r4, #12]
 8004398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800439c:	81a3      	strh	r3, [r4, #12]
 800439e:	e7ae      	b.n	80042fe <__sflush_r+0x1a>
 80043a0:	690f      	ldr	r7, [r1, #16]
 80043a2:	2f00      	cmp	r7, #0
 80043a4:	d0aa      	beq.n	80042fc <__sflush_r+0x18>
 80043a6:	0793      	lsls	r3, r2, #30
 80043a8:	bf18      	it	ne
 80043aa:	2300      	movne	r3, #0
 80043ac:	680e      	ldr	r6, [r1, #0]
 80043ae:	bf08      	it	eq
 80043b0:	694b      	ldreq	r3, [r1, #20]
 80043b2:	1bf6      	subs	r6, r6, r7
 80043b4:	600f      	str	r7, [r1, #0]
 80043b6:	608b      	str	r3, [r1, #8]
 80043b8:	2e00      	cmp	r6, #0
 80043ba:	dd9f      	ble.n	80042fc <__sflush_r+0x18>
 80043bc:	4633      	mov	r3, r6
 80043be:	463a      	mov	r2, r7
 80043c0:	4628      	mov	r0, r5
 80043c2:	6a21      	ldr	r1, [r4, #32]
 80043c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80043c8:	47e0      	blx	ip
 80043ca:	2800      	cmp	r0, #0
 80043cc:	dc06      	bgt.n	80043dc <__sflush_r+0xf8>
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d8:	81a3      	strh	r3, [r4, #12]
 80043da:	e790      	b.n	80042fe <__sflush_r+0x1a>
 80043dc:	4407      	add	r7, r0
 80043de:	1a36      	subs	r6, r6, r0
 80043e0:	e7ea      	b.n	80043b8 <__sflush_r+0xd4>
 80043e2:	bf00      	nop
 80043e4:	20400001 	.word	0x20400001

080043e8 <_fflush_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	690b      	ldr	r3, [r1, #16]
 80043ec:	4605      	mov	r5, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	b913      	cbnz	r3, 80043f8 <_fflush_r+0x10>
 80043f2:	2500      	movs	r5, #0
 80043f4:	4628      	mov	r0, r5
 80043f6:	bd38      	pop	{r3, r4, r5, pc}
 80043f8:	b118      	cbz	r0, 8004402 <_fflush_r+0x1a>
 80043fa:	6983      	ldr	r3, [r0, #24]
 80043fc:	b90b      	cbnz	r3, 8004402 <_fflush_r+0x1a>
 80043fe:	f7ff fa19 	bl	8003834 <__sinit>
 8004402:	4b14      	ldr	r3, [pc, #80]	; (8004454 <_fflush_r+0x6c>)
 8004404:	429c      	cmp	r4, r3
 8004406:	d11b      	bne.n	8004440 <_fflush_r+0x58>
 8004408:	686c      	ldr	r4, [r5, #4]
 800440a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0ef      	beq.n	80043f2 <_fflush_r+0xa>
 8004412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004414:	07d0      	lsls	r0, r2, #31
 8004416:	d404      	bmi.n	8004422 <_fflush_r+0x3a>
 8004418:	0599      	lsls	r1, r3, #22
 800441a:	d402      	bmi.n	8004422 <_fflush_r+0x3a>
 800441c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800441e:	f7ff faa7 	bl	8003970 <__retarget_lock_acquire_recursive>
 8004422:	4628      	mov	r0, r5
 8004424:	4621      	mov	r1, r4
 8004426:	f7ff ff5d 	bl	80042e4 <__sflush_r>
 800442a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800442c:	4605      	mov	r5, r0
 800442e:	07da      	lsls	r2, r3, #31
 8004430:	d4e0      	bmi.n	80043f4 <_fflush_r+0xc>
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	059b      	lsls	r3, r3, #22
 8004436:	d4dd      	bmi.n	80043f4 <_fflush_r+0xc>
 8004438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800443a:	f7ff fa9a 	bl	8003972 <__retarget_lock_release_recursive>
 800443e:	e7d9      	b.n	80043f4 <_fflush_r+0xc>
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <_fflush_r+0x70>)
 8004442:	429c      	cmp	r4, r3
 8004444:	d101      	bne.n	800444a <_fflush_r+0x62>
 8004446:	68ac      	ldr	r4, [r5, #8]
 8004448:	e7df      	b.n	800440a <_fflush_r+0x22>
 800444a:	4b04      	ldr	r3, [pc, #16]	; (800445c <_fflush_r+0x74>)
 800444c:	429c      	cmp	r4, r3
 800444e:	bf08      	it	eq
 8004450:	68ec      	ldreq	r4, [r5, #12]
 8004452:	e7da      	b.n	800440a <_fflush_r+0x22>
 8004454:	0800482c 	.word	0x0800482c
 8004458:	0800484c 	.word	0x0800484c
 800445c:	0800480c 	.word	0x0800480c

08004460 <_lseek_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	4611      	mov	r1, r2
 8004468:	2200      	movs	r2, #0
 800446a:	4d05      	ldr	r5, [pc, #20]	; (8004480 <_lseek_r+0x20>)
 800446c:	602a      	str	r2, [r5, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	f7fc fa5a 	bl	8000928 <_lseek>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	d102      	bne.n	800447e <_lseek_r+0x1e>
 8004478:	682b      	ldr	r3, [r5, #0]
 800447a:	b103      	cbz	r3, 800447e <_lseek_r+0x1e>
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	20000278 	.word	0x20000278

08004484 <__swhatbuf_r>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	460e      	mov	r6, r1
 8004488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800448c:	4614      	mov	r4, r2
 800448e:	2900      	cmp	r1, #0
 8004490:	461d      	mov	r5, r3
 8004492:	b096      	sub	sp, #88	; 0x58
 8004494:	da08      	bge.n	80044a8 <__swhatbuf_r+0x24>
 8004496:	2200      	movs	r2, #0
 8004498:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800449c:	602a      	str	r2, [r5, #0]
 800449e:	061a      	lsls	r2, r3, #24
 80044a0:	d410      	bmi.n	80044c4 <__swhatbuf_r+0x40>
 80044a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a6:	e00e      	b.n	80044c6 <__swhatbuf_r+0x42>
 80044a8:	466a      	mov	r2, sp
 80044aa:	f000 f8c5 	bl	8004638 <_fstat_r>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	dbf1      	blt.n	8004496 <__swhatbuf_r+0x12>
 80044b2:	9a01      	ldr	r2, [sp, #4]
 80044b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044bc:	425a      	negs	r2, r3
 80044be:	415a      	adcs	r2, r3
 80044c0:	602a      	str	r2, [r5, #0]
 80044c2:	e7ee      	b.n	80044a2 <__swhatbuf_r+0x1e>
 80044c4:	2340      	movs	r3, #64	; 0x40
 80044c6:	2000      	movs	r0, #0
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	b016      	add	sp, #88	; 0x58
 80044cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080044d0 <__smakebuf_r>:
 80044d0:	898b      	ldrh	r3, [r1, #12]
 80044d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044d4:	079d      	lsls	r5, r3, #30
 80044d6:	4606      	mov	r6, r0
 80044d8:	460c      	mov	r4, r1
 80044da:	d507      	bpl.n	80044ec <__smakebuf_r+0x1c>
 80044dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	6123      	str	r3, [r4, #16]
 80044e4:	2301      	movs	r3, #1
 80044e6:	6163      	str	r3, [r4, #20]
 80044e8:	b002      	add	sp, #8
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	466a      	mov	r2, sp
 80044ee:	ab01      	add	r3, sp, #4
 80044f0:	f7ff ffc8 	bl	8004484 <__swhatbuf_r>
 80044f4:	9900      	ldr	r1, [sp, #0]
 80044f6:	4605      	mov	r5, r0
 80044f8:	4630      	mov	r0, r6
 80044fa:	f7ff fa5b 	bl	80039b4 <_malloc_r>
 80044fe:	b948      	cbnz	r0, 8004514 <__smakebuf_r+0x44>
 8004500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004504:	059a      	lsls	r2, r3, #22
 8004506:	d4ef      	bmi.n	80044e8 <__smakebuf_r+0x18>
 8004508:	f023 0303 	bic.w	r3, r3, #3
 800450c:	f043 0302 	orr.w	r3, r3, #2
 8004510:	81a3      	strh	r3, [r4, #12]
 8004512:	e7e3      	b.n	80044dc <__smakebuf_r+0xc>
 8004514:	4b0d      	ldr	r3, [pc, #52]	; (800454c <__smakebuf_r+0x7c>)
 8004516:	62b3      	str	r3, [r6, #40]	; 0x28
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	6020      	str	r0, [r4, #0]
 800451c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	9b00      	ldr	r3, [sp, #0]
 8004524:	6120      	str	r0, [r4, #16]
 8004526:	6163      	str	r3, [r4, #20]
 8004528:	9b01      	ldr	r3, [sp, #4]
 800452a:	b15b      	cbz	r3, 8004544 <__smakebuf_r+0x74>
 800452c:	4630      	mov	r0, r6
 800452e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004532:	f000 f893 	bl	800465c <_isatty_r>
 8004536:	b128      	cbz	r0, 8004544 <__smakebuf_r+0x74>
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	81a3      	strh	r3, [r4, #12]
 8004544:	89a0      	ldrh	r0, [r4, #12]
 8004546:	4305      	orrs	r5, r0
 8004548:	81a5      	strh	r5, [r4, #12]
 800454a:	e7cd      	b.n	80044e8 <__smakebuf_r+0x18>
 800454c:	080037cd 	.word	0x080037cd

08004550 <memchr>:
 8004550:	4603      	mov	r3, r0
 8004552:	b510      	push	{r4, lr}
 8004554:	b2c9      	uxtb	r1, r1
 8004556:	4402      	add	r2, r0
 8004558:	4293      	cmp	r3, r2
 800455a:	4618      	mov	r0, r3
 800455c:	d101      	bne.n	8004562 <memchr+0x12>
 800455e:	2000      	movs	r0, #0
 8004560:	e003      	b.n	800456a <memchr+0x1a>
 8004562:	7804      	ldrb	r4, [r0, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	428c      	cmp	r4, r1
 8004568:	d1f6      	bne.n	8004558 <memchr+0x8>
 800456a:	bd10      	pop	{r4, pc}

0800456c <__malloc_lock>:
 800456c:	4801      	ldr	r0, [pc, #4]	; (8004574 <__malloc_lock+0x8>)
 800456e:	f7ff b9ff 	b.w	8003970 <__retarget_lock_acquire_recursive>
 8004572:	bf00      	nop
 8004574:	2000026c 	.word	0x2000026c

08004578 <__malloc_unlock>:
 8004578:	4801      	ldr	r0, [pc, #4]	; (8004580 <__malloc_unlock+0x8>)
 800457a:	f7ff b9fa 	b.w	8003972 <__retarget_lock_release_recursive>
 800457e:	bf00      	nop
 8004580:	2000026c 	.word	0x2000026c

08004584 <_free_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4605      	mov	r5, r0
 8004588:	2900      	cmp	r1, #0
 800458a:	d040      	beq.n	800460e <_free_r+0x8a>
 800458c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004590:	1f0c      	subs	r4, r1, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	bfb8      	it	lt
 8004596:	18e4      	addlt	r4, r4, r3
 8004598:	f7ff ffe8 	bl	800456c <__malloc_lock>
 800459c:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <_free_r+0x8c>)
 800459e:	6813      	ldr	r3, [r2, #0]
 80045a0:	b933      	cbnz	r3, 80045b0 <_free_r+0x2c>
 80045a2:	6063      	str	r3, [r4, #4]
 80045a4:	6014      	str	r4, [r2, #0]
 80045a6:	4628      	mov	r0, r5
 80045a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ac:	f7ff bfe4 	b.w	8004578 <__malloc_unlock>
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	d908      	bls.n	80045c6 <_free_r+0x42>
 80045b4:	6820      	ldr	r0, [r4, #0]
 80045b6:	1821      	adds	r1, r4, r0
 80045b8:	428b      	cmp	r3, r1
 80045ba:	bf01      	itttt	eq
 80045bc:	6819      	ldreq	r1, [r3, #0]
 80045be:	685b      	ldreq	r3, [r3, #4]
 80045c0:	1809      	addeq	r1, r1, r0
 80045c2:	6021      	streq	r1, [r4, #0]
 80045c4:	e7ed      	b.n	80045a2 <_free_r+0x1e>
 80045c6:	461a      	mov	r2, r3
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	b10b      	cbz	r3, 80045d0 <_free_r+0x4c>
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	d9fa      	bls.n	80045c6 <_free_r+0x42>
 80045d0:	6811      	ldr	r1, [r2, #0]
 80045d2:	1850      	adds	r0, r2, r1
 80045d4:	42a0      	cmp	r0, r4
 80045d6:	d10b      	bne.n	80045f0 <_free_r+0x6c>
 80045d8:	6820      	ldr	r0, [r4, #0]
 80045da:	4401      	add	r1, r0
 80045dc:	1850      	adds	r0, r2, r1
 80045de:	4283      	cmp	r3, r0
 80045e0:	6011      	str	r1, [r2, #0]
 80045e2:	d1e0      	bne.n	80045a6 <_free_r+0x22>
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4401      	add	r1, r0
 80045ea:	6011      	str	r1, [r2, #0]
 80045ec:	6053      	str	r3, [r2, #4]
 80045ee:	e7da      	b.n	80045a6 <_free_r+0x22>
 80045f0:	d902      	bls.n	80045f8 <_free_r+0x74>
 80045f2:	230c      	movs	r3, #12
 80045f4:	602b      	str	r3, [r5, #0]
 80045f6:	e7d6      	b.n	80045a6 <_free_r+0x22>
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	1821      	adds	r1, r4, r0
 80045fc:	428b      	cmp	r3, r1
 80045fe:	bf01      	itttt	eq
 8004600:	6819      	ldreq	r1, [r3, #0]
 8004602:	685b      	ldreq	r3, [r3, #4]
 8004604:	1809      	addeq	r1, r1, r0
 8004606:	6021      	streq	r1, [r4, #0]
 8004608:	6063      	str	r3, [r4, #4]
 800460a:	6054      	str	r4, [r2, #4]
 800460c:	e7cb      	b.n	80045a6 <_free_r+0x22>
 800460e:	bd38      	pop	{r3, r4, r5, pc}
 8004610:	20000270 	.word	0x20000270

08004614 <_read_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	4604      	mov	r4, r0
 8004618:	4608      	mov	r0, r1
 800461a:	4611      	mov	r1, r2
 800461c:	2200      	movs	r2, #0
 800461e:	4d05      	ldr	r5, [pc, #20]	; (8004634 <_read_r+0x20>)
 8004620:	602a      	str	r2, [r5, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	f7fc f93f 	bl	80008a6 <_read>
 8004628:	1c43      	adds	r3, r0, #1
 800462a:	d102      	bne.n	8004632 <_read_r+0x1e>
 800462c:	682b      	ldr	r3, [r5, #0]
 800462e:	b103      	cbz	r3, 8004632 <_read_r+0x1e>
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	bd38      	pop	{r3, r4, r5, pc}
 8004634:	20000278 	.word	0x20000278

08004638 <_fstat_r>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	2300      	movs	r3, #0
 800463c:	4d06      	ldr	r5, [pc, #24]	; (8004658 <_fstat_r+0x20>)
 800463e:	4604      	mov	r4, r0
 8004640:	4608      	mov	r0, r1
 8004642:	4611      	mov	r1, r2
 8004644:	602b      	str	r3, [r5, #0]
 8004646:	f7fc f956 	bl	80008f6 <_fstat>
 800464a:	1c43      	adds	r3, r0, #1
 800464c:	d102      	bne.n	8004654 <_fstat_r+0x1c>
 800464e:	682b      	ldr	r3, [r5, #0]
 8004650:	b103      	cbz	r3, 8004654 <_fstat_r+0x1c>
 8004652:	6023      	str	r3, [r4, #0]
 8004654:	bd38      	pop	{r3, r4, r5, pc}
 8004656:	bf00      	nop
 8004658:	20000278 	.word	0x20000278

0800465c <_isatty_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	2300      	movs	r3, #0
 8004660:	4d05      	ldr	r5, [pc, #20]	; (8004678 <_isatty_r+0x1c>)
 8004662:	4604      	mov	r4, r0
 8004664:	4608      	mov	r0, r1
 8004666:	602b      	str	r3, [r5, #0]
 8004668:	f7fc f954 	bl	8000914 <_isatty>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d102      	bne.n	8004676 <_isatty_r+0x1a>
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	b103      	cbz	r3, 8004676 <_isatty_r+0x1a>
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	20000278 	.word	0x20000278

0800467c <_init>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	bf00      	nop
 8004680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004682:	bc08      	pop	{r3}
 8004684:	469e      	mov	lr, r3
 8004686:	4770      	bx	lr

08004688 <_fini>:
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	bf00      	nop
 800468c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468e:	bc08      	pop	{r3}
 8004690:	469e      	mov	lr, r3
 8004692:	4770      	bx	lr
