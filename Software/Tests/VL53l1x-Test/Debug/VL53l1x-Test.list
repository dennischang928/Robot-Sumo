
VL53l1x-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000446c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004718  08004718  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004718  08004718  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004718  08004718  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004718  08004718  00014718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000006c  0800478c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800478c  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd6a  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c44  00000000  00000000  0002be42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002da88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000904  00000000  00000000  0002e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189b7  00000000  00000000  0002ef24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d919  00000000  00000000  000478db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000888ba  00000000  00000000  000551f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003920  00000000  00000000  000ddab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000e13d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004560 	.word	0x08004560

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08004560 	.word	0x08004560

0800014c <EnableSensor>:
static void	MX_USART1_UART_Init(void);
static void	MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */

void	EnableSensor(VL53L1_Dev_t *device)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((*device).XSHUT_GPIO, (*device).XSHUT_PIN, GPIO_PIN_SET);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	6918      	ldr	r0, [r3, #16]
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	8a9b      	ldrh	r3, [r3, #20]
 800015c:	2201      	movs	r2, #1
 800015e:	4619      	mov	r1, r3
 8000160:	f001 fc96 	bl	8001a90 <HAL_GPIO_WritePin>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}

0800016c <DisableSensor>:

void	DisableSensor(VL53L1_Dev_t *device)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((*device).XSHUT_GPIO, (*device).XSHUT_PIN,
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	6918      	ldr	r0, [r3, #16]
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	8a9b      	ldrh	r3, [r3, #20]
 800017c:	2200      	movs	r2, #0
 800017e:	4619      	mov	r1, r3
 8000180:	f001 fc86 	bl	8001a90 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <_write>:

ssize_t	_write(int fd, const char *buf, size_t nbyte)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, nbyte, 10);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	b29a      	uxth	r2, r3
 800019c:	230a      	movs	r3, #10
 800019e:	68b9      	ldr	r1, [r7, #8]
 80001a0:	4803      	ldr	r0, [pc, #12]	; (80001b0 <_write+0x24>)
 80001a2:	f003 f921 	bl	80033e8 <HAL_UART_Transmit>
	return (nbyte);
 80001a6:	687b      	ldr	r3, [r7, #4]
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	3710      	adds	r7, #16
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	200000dc 	.word	0x200000dc

080001b4 <SetDeviceAddress>:
	printf("SignalRate: %u, ", SignalRate);
	printf("AmbientPerSpad: %u\n\r", AmbientPerSpad);
}

void	SetDeviceAddress(VL53L1_Dev_t *device, uint8_t NewAddress)
{
 80001b4:	b590      	push	{r4, r7, lr}
 80001b6:	b087      	sub	sp, #28
 80001b8:	af04      	add	r7, sp, #16
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	70fb      	strb	r3, [r7, #3]
	VL53L1X_SetI2CAddress(*device, NewAddress);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	78fa      	ldrb	r2, [r7, #3]
 80001c4:	9202      	str	r2, [sp, #8]
 80001c6:	466c      	mov	r4, sp
 80001c8:	f103 0210 	add.w	r2, r3, #16
 80001cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80001d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001d6:	f000 fd1e 	bl	8000c16 <VL53L1X_SetI2CAddress>
	(*device).I2cDevAddr = NewAddress;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	78fa      	ldrb	r2, [r7, #3]
 80001de:	709a      	strb	r2, [r3, #2]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd90      	pop	{r4, r7, pc}

080001e8 <InitSensor>:

void	InitSensor(VL53L1_Dev_t *device, uint8_t AddressToAssign)
{ // Boot up and initialize the device and assign a new addr to the device.
 80001e8:	b590      	push	{r4, r7, lr}
 80001ea:	b089      	sub	sp, #36	; 0x24
 80001ec:	af04      	add	r7, sp, #16
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	EnableSensor(device);
 80001f4:	6878      	ldr	r0, [r7, #4]
 80001f6:	f7ff ffa9 	bl	800014c <EnableSensor>
	printf("DeviceXSHUTBooted\n\r");
 80001fa:	4843      	ldr	r0, [pc, #268]	; (8000308 <InitSensor+0x120>)
 80001fc:	f003 fb36 	bl	800386c <iprintf>
	status = VL53L1X_SensorInit(*device);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	466c      	mov	r4, sp
 8000204:	f103 0210 	add.w	r2, r3, #16
 8000208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800020c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000212:	f000 fd1f 	bl	8000c54 <VL53L1X_SensorInit>
 8000216:	4603      	mov	r3, r0
 8000218:	461a      	mov	r2, r3
 800021a:	4b3c      	ldr	r3, [pc, #240]	; (800030c <InitSensor+0x124>)
 800021c:	601a      	str	r2, [r3, #0]
	SetDeviceAddress(device, AddressToAssign);
 800021e:	78fb      	ldrb	r3, [r7, #3]
 8000220:	4619      	mov	r1, r3
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f7ff ffc6 	bl	80001b4 <SetDeviceAddress>
	printf("DeviceNewAddr: %X\n\r", (*device).I2cDevAddr);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	789b      	ldrb	r3, [r3, #2]
 800022c:	4619      	mov	r1, r3
 800022e:	4838      	ldr	r0, [pc, #224]	; (8000310 <InitSensor+0x128>)
 8000230:	f003 fb1c 	bl	800386c <iprintf>

	uint8_t byteData;
	status = VL53L1_RdByte(device, 0x010F, &byteData);
 8000234:	f107 030f 	add.w	r3, r7, #15
 8000238:	461a      	mov	r2, r3
 800023a:	f240 110f 	movw	r1, #271	; 0x10f
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f000 fc50 	bl	8000ae4 <VL53L1_RdByte>
 8000244:	4603      	mov	r3, r0
 8000246:	461a      	mov	r2, r3
 8000248:	4b30      	ldr	r3, [pc, #192]	; (800030c <InitSensor+0x124>)
 800024a:	601a      	str	r2, [r3, #0]
	printf("VL53L1X Model_ID: %X\n\r", byteData);
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	4619      	mov	r1, r3
 8000250:	4830      	ldr	r0, [pc, #192]	; (8000314 <InitSensor+0x12c>)
 8000252:	f003 fb0b 	bl	800386c <iprintf>
	status = VL53L1_RdByte(device, 0x0110, &byteData);
 8000256:	f107 030f 	add.w	r3, r7, #15
 800025a:	461a      	mov	r2, r3
 800025c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	f000 fc3f 	bl	8000ae4 <VL53L1_RdByte>
 8000266:	4603      	mov	r3, r0
 8000268:	461a      	mov	r2, r3
 800026a:	4b28      	ldr	r3, [pc, #160]	; (800030c <InitSensor+0x124>)
 800026c:	601a      	str	r2, [r3, #0]
	printf("VL53L1X Module_Type: %X\n\r", byteData);
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	4619      	mov	r1, r3
 8000272:	4829      	ldr	r0, [pc, #164]	; (8000318 <InitSensor+0x130>)
 8000274:	f003 fafa 	bl	800386c <iprintf>

	while (sensorState == 0)
 8000278:	e016      	b.n	80002a8 <InitSensor+0xc0>
	{
		status = VL53L1X_BootState(*device, &sensorState);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a27      	ldr	r2, [pc, #156]	; (800031c <InitSensor+0x134>)
 800027e:	9202      	str	r2, [sp, #8]
 8000280:	466c      	mov	r4, sp
 8000282:	f103 0210 	add.w	r2, r3, #16
 8000286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800028a:	e884 0003 	stmia.w	r4, {r0, r1}
 800028e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000290:	f001 f884 	bl	800139c <VL53L1X_BootState>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b1c      	ldr	r3, [pc, #112]	; (800030c <InitSensor+0x124>)
 800029a:	601a      	str	r2, [r3, #0]
		HAL_Delay(2);
 800029c:	2002      	movs	r0, #2
 800029e:	f001 f96b 	bl	8001578 <HAL_Delay>
		printf("Chip failed to boot\n\r");
 80002a2:	481f      	ldr	r0, [pc, #124]	; (8000320 <InitSensor+0x138>)
 80002a4:	f003 fae2 	bl	800386c <iprintf>
	while (sensorState == 0)
 80002a8:	4b1c      	ldr	r3, [pc, #112]	; (800031c <InitSensor+0x134>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0e4      	beq.n	800027a <InitSensor+0x92>
	}

	printf("Chip booted\n\r");
 80002b0:	481c      	ldr	r0, [pc, #112]	; (8000324 <InitSensor+0x13c>)
 80002b2:	f003 fadb 	bl	800386c <iprintf>

	status = VL53L1X_SetDistanceMode(*device, 1); /* 1=short, 2=long */
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2201      	movs	r2, #1
 80002ba:	9202      	str	r2, [sp, #8]
 80002bc:	466c      	mov	r4, sp
 80002be:	f103 0210 	add.w	r2, r3, #16
 80002c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80002ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002cc:	f000 ff9f 	bl	800120e <VL53L1X_SetDistanceMode>
 80002d0:	4603      	mov	r3, r0
 80002d2:	461a      	mov	r2, r3
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <InitSensor+0x124>)
 80002d6:	601a      	str	r2, [r3, #0]
	status = VL53L1X_SetROI(*device, 4, 5);       /* minimum ROI 4,4 */
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2205      	movs	r2, #5
 80002dc:	9203      	str	r2, [sp, #12]
 80002de:	2204      	movs	r2, #4
 80002e0:	9202      	str	r2, [sp, #8]
 80002e2:	466c      	mov	r4, sp
 80002e4:	f103 0210 	add.w	r2, r3, #16
 80002e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80002f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002f2:	f001 f893 	bl	800141c <VL53L1X_SetROI>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <InitSensor+0x124>)
 80002fc:	601a      	str	r2, [r3, #0]
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	bd90      	pop	{r4, r7, pc}
 8000306:	bf00      	nop
 8000308:	080045c8 	.word	0x080045c8
 800030c:	2000013c 	.word	0x2000013c
 8000310:	080045dc 	.word	0x080045dc
 8000314:	080045f0 	.word	0x080045f0
 8000318:	08004608 	.word	0x08004608
 800031c:	20000140 	.word	0x20000140
 8000320:	08004624 	.word	0x08004624
 8000324:	0800463c 	.word	0x0800463c

08000328 <InitAllSensors2Ranging.0>:
  */
int	main(void)
{
	/* USER CODE BEGIN 1 */
	void InitAllSensors2Ranging()
	{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b087      	sub	sp, #28
 800032c:	af02      	add	r7, sp, #8
 800032e:	f8c7 c004 	str.w	ip, [r7, #4]
		for (int i = 0; i < SensorNumber; i++)
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	e00c      	b.n	8000352 <InitAllSensors2Ranging.0+0x2a>
		{
			DisableSensor(&(devs[i]));
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	4613      	mov	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	4413      	add	r3, r2
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	4a23      	ldr	r2, [pc, #140]	; (80003d0 <InitAllSensors2Ranging.0+0xa8>)
 8000344:	4413      	add	r3, r2
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff10 	bl	800016c <DisableSensor>
		for (int i = 0; i < SensorNumber; i++)
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b00      	cmp	r3, #0
 8000356:	ddef      	ble.n	8000338 <InitAllSensors2Ranging.0+0x10>
		}

		for (int i = 0; i < SensorNumber; i++)
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
 800035c:	e030      	b.n	80003c0 <InitAllSensors2Ranging.0+0x98>
		{
			EnableSensor(&(devs[i]));
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	4613      	mov	r3, r2
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	4413      	add	r3, r2
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	4a19      	ldr	r2, [pc, #100]	; (80003d0 <InitAllSensors2Ranging.0+0xa8>)
 800036a:	4413      	add	r3, r2
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff feed 	bl	800014c <EnableSensor>
			InitSensor(&(devs[i]), DevicesAddresses[i]);
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	4613      	mov	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <InitAllSensors2Ranging.0+0xa8>)
 800037e:	441a      	add	r2, r3
 8000380:	4914      	ldr	r1, [pc, #80]	; (80003d4 <InitAllSensors2Ranging.0+0xac>)
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	440b      	add	r3, r1
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4619      	mov	r1, r3
 800038a:	4610      	mov	r0, r2
 800038c:	f7ff ff2c 	bl	80001e8 <InitSensor>
			status = VL53L1X_StartRanging(devs[i]);
 8000390:	490f      	ldr	r1, [pc, #60]	; (80003d0 <InitAllSensors2Ranging.0+0xa8>)
 8000392:	68ba      	ldr	r2, [r7, #8]
 8000394:	4613      	mov	r3, r2
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	4413      	add	r3, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	440b      	add	r3, r1
 800039e:	466c      	mov	r4, sp
 80003a0:	f103 0210 	add.w	r2, r3, #16
 80003a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80003ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003ae:	f000 fd18 	bl	8000de2 <VL53L1X_StartRanging>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <InitAllSensors2Ranging.0+0xb0>)
 80003b8:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < SensorNumber; i++)
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	3301      	adds	r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	ddcb      	ble.n	800035e <InitAllSensors2Ranging.0+0x36>
		}
	}
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd90      	pop	{r4, r7, pc}
 80003d0:	20000124 	.word	0x20000124
 80003d4:	20000000 	.word	0x20000000
 80003d8:	2000013c 	.word	0x2000013c

080003dc <main>:
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b087      	sub	sp, #28
 80003e0:	af04      	add	r7, sp, #16
int	main(void)
 80003e2:	f107 0318 	add.w	r3, r7, #24
 80003e6:	603b      	str	r3, [r7, #0]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals,
		Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003e8:	f001 f864 	bl	80014b4 <HAL_Init>

	/* USER CODE BEGIN Init */

	for (int i = 0; i < SensorNumber; i++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	e016      	b.n	8000420 <main+0x44>
	{
		devs[i].I2cHandle = &hi2c2;
 80003f2:	4924      	ldr	r1, [pc, #144]	; (8000484 <main+0xa8>)
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4613      	mov	r3, r2
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	4413      	add	r3, r2
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	440b      	add	r3, r1
 8000400:	330c      	adds	r3, #12
 8000402:	4a21      	ldr	r2, [pc, #132]	; (8000488 <main+0xac>)
 8000404:	601a      	str	r2, [r3, #0]
		devs[i].I2cDevAddr = 0x52;
 8000406:	491f      	ldr	r1, [pc, #124]	; (8000484 <main+0xa8>)
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	4613      	mov	r3, r2
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	4413      	add	r3, r2
 8000410:	00db      	lsls	r3, r3, #3
 8000412:	440b      	add	r3, r1
 8000414:	3302      	adds	r3, #2
 8000416:	2252      	movs	r2, #82	; 0x52
 8000418:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SensorNumber; i++)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	3301      	adds	r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	dde5      	ble.n	80003f2 <main+0x16>
	}

	devs[0].XSHUT_GPIO = Dev2_GPIO_Port;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <main+0xa8>)
 8000428:	4a18      	ldr	r2, [pc, #96]	; (800048c <main+0xb0>)
 800042a:	611a      	str	r2, [r3, #16]
	// devs[1].XSHUT_GPIO = Dev2_GPIO_Port;

	devs[0].XSHUT_PIN = Dev2_Pin;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <main+0xa8>)
 800042e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000432:	829a      	strh	r2, [r3, #20]
	// devs[1].XSHUT_PIN = Dev2_Pin;
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000434:	f000 f834 	bl	80004a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000438:	f000 f8d0 	bl	80005dc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800043c:	f000 f8a4 	bl	8000588 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 8000440:	f000 f874 	bl	800052c <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	InitAllSensors2Ranging();
 8000444:	463b      	mov	r3, r7
 8000446:	469c      	mov	ip, r3
 8000448:	f7ff ff6e 	bl	8000328 <InitAllSensors2Ranging.0>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		status = VL53L1X_GetDistance(devs[0], &Distance);
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <main+0xa8>)
 800044e:	4a10      	ldr	r2, [pc, #64]	; (8000490 <main+0xb4>)
 8000450:	9202      	str	r2, [sp, #8]
 8000452:	466c      	mov	r4, sp
 8000454:	f103 0210 	add.w	r2, r3, #16
 8000458:	e892 0003 	ldmia.w	r2, {r0, r1}
 800045c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000460:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000462:	f000 ffbc 	bl	80013de <VL53L1X_GetDistance>
 8000466:	4603      	mov	r3, r0
 8000468:	461a      	mov	r2, r3
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <main+0xb8>)
 800046c:	601a      	str	r2, [r3, #0]
		printf("Dev0: %u, ", Distance );
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <main+0xb4>)
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	4619      	mov	r1, r3
 8000474:	4808      	ldr	r0, [pc, #32]	; (8000498 <main+0xbc>)
 8000476:	f003 f9f9 	bl	800386c <iprintf>
		// status = VL53L1X_GetDistance(devs[1], &Distance);
		// printf("Dev1: %u", Distance);
		printf("\n\r");
 800047a:	4808      	ldr	r0, [pc, #32]	; (800049c <main+0xc0>)
 800047c:	f003 f9f6 	bl	800386c <iprintf>
		status = VL53L1X_GetDistance(devs[0], &Distance);
 8000480:	e7e4      	b.n	800044c <main+0x70>
 8000482:	bf00      	nop
 8000484:	20000124 	.word	0x20000124
 8000488:	20000088 	.word	0x20000088
 800048c:	40010800 	.word	0x40010800
 8000490:	20000142 	.word	0x20000142
 8000494:	2000013c 	.word	0x2000013c
 8000498:	0800464c 	.word	0x0800464c
 800049c:	08004658 	.word	0x08004658

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void	SystemClock_Config(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b090      	sub	sp, #64	; 0x40
 80004a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	f107 0318 	add.w	r3, r7, #24
 80004aa:	2228      	movs	r2, #40	; 0x28
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f003 f9ee 	bl	8003890 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004c2:	2301      	movs	r3, #1
 80004c4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ca:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d0:	2301      	movs	r3, #1
 80004d2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d4:	2302      	movs	r3, #2
 80004d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e4:	f107 0318 	add.w	r3, r7, #24
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 fb1d 	bl	8002b28 <HAL_RCC_OscConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80004f4:	f000 f8f8 	bl	80006e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80004f8:	230f      	movs	r3, #15
 80004fa:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fc:	2302      	movs	r3, #2
 80004fe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000508:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2102      	movs	r1, #2
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fd8a 	bl	800302c <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x82>
	{
		Error_Handler();
 800051e:	f000 f8e3 	bl	80006e8 <Error_Handler>
	}
}
 8000522:	bf00      	nop
 8000524:	3740      	adds	r7, #64	; 0x40
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void	MX_I2C2_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <MX_I2C2_Init+0x50>)
 8000532:	4a13      	ldr	r2, [pc, #76]	; (8000580 <MX_I2C2_Init+0x54>)
 8000534:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_I2C2_Init+0x50>)
 8000538:	4a12      	ldr	r2, [pc, #72]	; (8000584 <MX_I2C2_Init+0x58>)
 800053a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_I2C2_Init+0x50>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_I2C2_Init+0x50>)
 8000544:	2200      	movs	r2, #0
 8000546:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_I2C2_Init+0x50>)
 800054a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800054e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <MX_I2C2_Init+0x50>)
 8000552:	2200      	movs	r2, #0
 8000554:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_I2C2_Init+0x50>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <MX_I2C2_Init+0x50>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_I2C2_Init+0x50>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <MX_I2C2_Init+0x50>)
 800056a:	f001 faa9 	bl	8001ac0 <HAL_I2C_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8000574:	f000 f8b8 	bl	80006e8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000088 	.word	0x20000088
 8000580:	40005800 	.word	0x40005800
 8000584:	000186a0 	.word	0x000186a0

08000588 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void	MX_USART1_UART_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <MX_USART1_UART_Init+0x50>)
 8000590:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 8000594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000598:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005ae:	220c      	movs	r2, #12
 80005b0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_USART1_UART_Init+0x4c>)
 80005c0:	f002 fec2 	bl	8003348 <HAL_UART_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80005ca:	f000 f88d 	bl	80006e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000dc 	.word	0x200000dc
 80005d8:	40013800 	.word	0x40013800

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void	MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <MX_GPIO_Init+0xfc>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <MX_GPIO_Init+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MX_GPIO_Init+0xfc>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0310 	and.w	r3, r3, #16
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000608:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <MX_GPIO_Init+0xfc>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a32      	ldr	r2, [pc, #200]	; (80006d8 <MX_GPIO_Init+0xfc>)
 800060e:	f043 0320 	orr.w	r3, r3, #32
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <MX_GPIO_Init+0xfc>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0320 	and.w	r3, r3, #32
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_GPIO_Init+0xfc>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a2c      	ldr	r2, [pc, #176]	; (80006d8 <MX_GPIO_Init+0xfc>)
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_GPIO_Init+0xfc>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0308 	and.w	r3, r3, #8
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_GPIO_Init+0xfc>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <MX_GPIO_Init+0xfc>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_GPIO_Init+0xfc>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	4821      	ldr	r0, [pc, #132]	; (80006dc <MX_GPIO_Init+0x100>)
 8000658:	f001 fa1a 	bl	8001a90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Dev1_GPIO_Port, Dev1_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000662:	481f      	ldr	r0, [pc, #124]	; (80006e0 <MX_GPIO_Init+0x104>)
 8000664:	f001 fa14 	bl	8001a90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Dev2_GPIO_Port, Dev2_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	481d      	ldr	r0, [pc, #116]	; (80006e4 <MX_GPIO_Init+0x108>)
 8000670:	f001 fa0e 	bl	8001a90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_PIN_Pin */
	GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000678:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2302      	movs	r3, #2
 8000684:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4619      	mov	r1, r3
 800068c:	4813      	ldr	r0, [pc, #76]	; (80006dc <MX_GPIO_Init+0x100>)
 800068e:	f001 f87b 	bl	8001788 <HAL_GPIO_Init>

	/*Configure GPIO pin : Dev1_Pin */
	GPIO_InitStruct.Pin = Dev1_Pin;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Dev1_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_GPIO_Init+0x104>)
 80006ac:	f001 f86c 	bl	8001788 <HAL_GPIO_Init>

	/*Configure GPIO pin : Dev2_Pin */
	GPIO_InitStruct.Pin = Dev2_Pin;
 80006b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2302      	movs	r3, #2
 80006c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Dev2_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4619      	mov	r1, r3
 80006c8:	4806      	ldr	r0, [pc, #24]	; (80006e4 <MX_GPIO_Init+0x108>)
 80006ca:	f001 f85d 	bl	8001788 <HAL_GPIO_Init>
}
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40011000 	.word	0x40011000
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	40010800 	.word	0x40010800

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void	Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_MspInit+0x40>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <HAL_MspInit+0x40>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <HAL_MspInit+0x40>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_MspInit+0x40>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a07      	ldr	r2, [pc, #28]	; (8000734 <HAL_MspInit+0x40>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_MspInit+0x40>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a16      	ldr	r2, [pc, #88]	; (80007ac <HAL_I2C_MspInit+0x74>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d124      	bne.n	80007a2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_I2C_MspInit+0x78>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <HAL_I2C_MspInit+0x78>)
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_I2C_MspInit+0x78>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000770:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000776:	2312      	movs	r3, #18
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	480b      	ldr	r0, [pc, #44]	; (80007b4 <HAL_I2C_MspInit+0x7c>)
 8000786:	f000 ffff 	bl	8001788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_I2C_MspInit+0x78>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_I2C_MspInit+0x78>)
 8000790:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_I2C_MspInit+0x78>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007a2:	bf00      	nop
 80007a4:	3720      	adds	r7, #32
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40005800 	.word	0x40005800
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010c00 	.word	0x40010c00

080007b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <HAL_UART_MspInit+0x8c>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d131      	bne.n	800083c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <HAL_UART_MspInit+0x90>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <HAL_UART_MspInit+0x90>)
 80007de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_UART_MspInit+0x90>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_UART_MspInit+0x90>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a14      	ldr	r2, [pc, #80]	; (8000848 <HAL_UART_MspInit+0x90>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_UART_MspInit+0x90>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800080c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4619      	mov	r1, r3
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <HAL_UART_MspInit+0x94>)
 800081e:	f000 ffb3 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_UART_MspInit+0x94>)
 8000838:	f000 ffa6 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40013800 	.word	0x40013800
 8000848:	40021000 	.word	0x40021000
 800084c:	40010800 	.word	0x40010800

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000896:	f000 fe53 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}

0800089e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b086      	sub	sp, #24
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	60f8      	str	r0, [r7, #12]
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	e00a      	b.n	80008c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008b0:	f3af 8000 	nop.w
 80008b4:	4601      	mov	r1, r0
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	60ba      	str	r2, [r7, #8]
 80008bc:	b2ca      	uxtb	r2, r1
 80008be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbf0      	blt.n	80008b0 <_read+0x12>
  }

  return len;
 80008ce:	687b      	ldr	r3, [r7, #4]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008fe:	605a      	str	r2, [r3, #4]
  return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <_isatty>:

int _isatty(int file)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000914:	2301      	movs	r3, #1
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <_sbrk+0x5c>)
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <_sbrk+0x60>)
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <_sbrk+0x64>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <_sbrk+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	429a      	cmp	r2, r3
 8000966:	d207      	bcs.n	8000978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000968:	f002 ff9a 	bl	80038a0 <__errno>
 800096c:	4603      	mov	r3, r0
 800096e:	220c      	movs	r2, #12
 8000970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000976:	e009      	b.n	800098c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <_sbrk+0x64>)
 8000988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20005000 	.word	0x20005000
 8000998:	00000400 	.word	0x00000400
 800099c:	20000144 	.word	0x20000144
 80009a0:	20000398 	.word	0x20000398

080009a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	330a      	adds	r3, #10
 80009c0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	68d8      	ldr	r0, [r3, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	b299      	uxth	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	4613      	mov	r3, r2
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f001 f9b6 	bl	8001d48 <HAL_I2C_Master_Transmit>
 80009dc:	4603      	mov	r3, r0
 80009de:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80009e0:	693b      	ldr	r3, [r7, #16]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b088      	sub	sp, #32
 80009ee:	af02      	add	r7, sp, #8
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	330a      	adds	r3, #10
 80009fa:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	68d8      	ldr	r0, [r3, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	789b      	ldrb	r3, [r3, #2]
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	b299      	uxth	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	4613      	mov	r3, r2
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f001 fa94 	bl	8001f44 <HAL_I2C_Master_Receive>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8000a20:	693b      	ldr	r3, [r7, #16]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <VL53L1_WrByte>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8000a40:	887b      	ldrh	r3, [r7, #2]
 8000a42:	0a1b      	lsrs	r3, r3, #8
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <VL53L1_WrByte+0x50>)
 8000a4a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8000a4c:	887b      	ldrh	r3, [r7, #2]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <VL53L1_WrByte+0x50>)
 8000a52:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <VL53L1_WrByte+0x50>)
 8000a56:	787b      	ldrb	r3, [r7, #1]
 8000a58:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <VL53L1_WrByte+0x50>)
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffa6 	bl	80009b0 <_I2CWrite>
 8000a64:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000a6c:	23f3      	movs	r3, #243	; 0xf3
 8000a6e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8000a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000148 	.word	0x20000148

08000a80 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <VL53L1_WrWord+0x60>)
 8000a9e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <VL53L1_WrWord+0x60>)
 8000aa6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8000aa8:	883b      	ldrh	r3, [r7, #0]
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <VL53L1_WrWord+0x60>)
 8000ab2:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8000ab4:	883b      	ldrh	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <VL53L1_WrWord+0x60>)
 8000aba:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8000abc:	2204      	movs	r2, #4
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <VL53L1_WrWord+0x60>)
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff75 	bl	80009b0 <_I2CWrite>
 8000ac6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000ace:	23f3      	movs	r3, #243	; 0xf3
 8000ad0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8000ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000148 	.word	0x20000148

08000ae4 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	460b      	mov	r3, r1
 8000aee:	607a      	str	r2, [r7, #4]
 8000af0:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8000af6:	897b      	ldrh	r3, [r7, #10]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <VL53L1_RdByte+0x64>)
 8000b00:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8000b02:	897b      	ldrh	r3, [r7, #10]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <VL53L1_RdByte+0x64>)
 8000b08:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	490e      	ldr	r1, [pc, #56]	; (8000b48 <VL53L1_RdByte+0x64>)
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff ff4e 	bl	80009b0 <_I2CWrite>
 8000b14:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000b1c:	23f3      	movs	r3, #243	; 0xf3
 8000b1e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000b20:	e00c      	b.n	8000b3c <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f7ff ff5f 	bl	80009ea <_I2CRead>
 8000b2c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000b34:	23f3      	movs	r3, #243	; 0xf3
 8000b36:	75fb      	strb	r3, [r7, #23]
 8000b38:	e000      	b.n	8000b3c <VL53L1_RdByte+0x58>
    }
done:
 8000b3a:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8000b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000148 	.word	0x20000148

08000b4c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	460b      	mov	r3, r1
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8000b5e:	897b      	ldrh	r3, [r7, #10]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <VL53L1_RdWord+0x7c>)
 8000b68:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8000b6a:	897b      	ldrh	r3, [r7, #10]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <VL53L1_RdWord+0x7c>)
 8000b70:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8000b72:	2202      	movs	r2, #2
 8000b74:	4914      	ldr	r1, [pc, #80]	; (8000bc8 <VL53L1_RdWord+0x7c>)
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff ff1a 	bl	80009b0 <_I2CWrite>
 8000b7c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000b84:	23f3      	movs	r3, #243	; 0xf3
 8000b86:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000b88:	e017      	b.n	8000bba <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <VL53L1_RdWord+0x7c>)
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff ff2b 	bl	80009ea <_I2CRead>
 8000b94:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8000b9c:	23f3      	movs	r3, #243	; 0xf3
 8000b9e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000ba0:	e00b      	b.n	8000bba <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <VL53L1_RdWord+0x7c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <VL53L1_RdWord+0x7c>)
 8000bae:	785b      	ldrb	r3, [r3, #1]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8000bba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000148 	.word	0x20000148

08000bcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bcc:	f7ff feea 	bl	80009a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bd2:	490c      	ldr	r1, [pc, #48]	; (8000c04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000be8:	4c09      	ldr	r4, [pc, #36]	; (8000c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f002 fe59 	bl	80038ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfa:	f7ff fbef 	bl	80003dc <main>
  bx lr
 8000bfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c08:	08004720 	.word	0x08004720
  ldr r2, =_sbss
 8000c0c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c10:	20000398 	.word	0x20000398

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>

08000c16 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(VL53L1_Dev_t dev, uint8_t new_address)
{
 8000c16:	b084      	sub	sp, #16
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	f107 0c10 	add.w	ip, r7, #16
 8000c22:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_WrByte(&dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8000c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c2e:	085b      	lsrs	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	2101      	movs	r1, #1
 8000c36:	f107 0010 	add.w	r0, r7, #16
 8000c3a:	f7ff fef7 	bl	8000a2c <VL53L1_WrByte>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	return status;
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c50:	b004      	add	sp, #16
 8000c52:	4770      	bx	lr

08000c54 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(VL53L1_Dev_t dev)
{
 8000c54:	b084      	sub	sp, #16
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af04      	add	r7, sp, #16
 8000c5c:	f107 0c10 	add.w	ip, r7, #16
 8000c60:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	71bb      	strb	r3, [r7, #6]
	uint8_t Addr = 0x00, tmp=0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	717b      	strb	r3, [r7, #5]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000c70:	232d      	movs	r3, #45	; 0x2d
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	e00f      	b.n	8000c96 <VL53L1X_SensorInit+0x42>
		status = VL53L1_WrByte(&dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	b299      	uxth	r1, r3
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	3b2d      	subs	r3, #45	; 0x2d
 8000c7e:	4a34      	ldr	r2, [pc, #208]	; (8000d50 <VL53L1X_SensorInit+0xfc>)
 8000c80:	5cd3      	ldrb	r3, [r2, r3]
 8000c82:	461a      	mov	r2, r3
 8000c84:	f107 0010 	add.w	r0, r7, #16
 8000c88:	f7ff fed0 	bl	8000a2c <VL53L1_WrByte>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71bb      	strb	r3, [r7, #6]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	3301      	adds	r3, #1
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b87      	cmp	r3, #135	; 0x87
 8000c9a:	d9ec      	bls.n	8000c76 <VL53L1X_SensorInit+0x22>
	}
	status = VL53L1X_StartRanging(dev);
 8000c9c:	466a      	mov	r2, sp
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ca6:	e882 0003 	stmia.w	r2, {r0, r1}
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb0:	f000 f897 	bl	8000de2 <VL53L1X_StartRanging>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71bb      	strb	r3, [r7, #6]
	while(tmp==0){
 8000cb8:	e00f      	b.n	8000cda <VL53L1X_SensorInit+0x86>
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 8000cba:	1d7b      	adds	r3, r7, #5
 8000cbc:	9302      	str	r3, [sp, #8]
 8000cbe:	466a      	mov	r2, sp
 8000cc0:	f107 0320 	add.w	r3, r7, #32
 8000cc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cc8:	e882 0003 	stmia.w	r2, {r0, r1}
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cd2:	f000 f8bc 	bl	8000e4e <VL53L1X_CheckForDataReady>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71bb      	strb	r3, [r7, #6]
	while(tmp==0){
 8000cda:	797b      	ldrb	r3, [r7, #5]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0ec      	beq.n	8000cba <VL53L1X_SensorInit+0x66>
	}
	tmp  = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	717b      	strb	r3, [r7, #5]
	status = VL53L1X_ClearInterrupt(dev);
 8000ce4:	466a      	mov	r2, sp
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cee:	e882 0003 	stmia.w	r2, {r0, r1}
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf8:	f000 f82c 	bl	8000d54 <VL53L1X_ClearInterrupt>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71bb      	strb	r3, [r7, #6]
	status = VL53L1X_StopRanging(dev);
 8000d00:	466a      	mov	r2, sp
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d0a:	e882 0003 	stmia.w	r2, {r0, r1}
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d14:	f000 f880 	bl	8000e18 <VL53L1X_StopRanging>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71bb      	strb	r3, [r7, #6]
	status = VL53L1_WrByte(&dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000d1c:	2209      	movs	r2, #9
 8000d1e:	2108      	movs	r1, #8
 8000d20:	f107 0010 	add.w	r0, r7, #16
 8000d24:	f7ff fe82 	bl	8000a2c <VL53L1_WrByte>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71bb      	strb	r3, [r7, #6]
	status = VL53L1_WrByte(&dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	210b      	movs	r1, #11
 8000d30:	f107 0010 	add.w	r0, r7, #16
 8000d34:	f7ff fe7a 	bl	8000a2c <VL53L1_WrByte>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71bb      	strb	r3, [r7, #6]
	return status;
 8000d3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d4a:	b004      	add	sp, #16
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	08004674 	.word	0x08004674

08000d54 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(VL53L1_Dev_t dev)
{
 8000d54:	b084      	sub	sp, #16
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	f107 0c10 	add.w	ip, r7, #16
 8000d60:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_WrByte(&dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2186      	movs	r1, #134	; 0x86
 8000d6c:	f107 0010 	add.w	r0, r7, #16
 8000d70:	f7ff fe5c 	bl	8000a2c <VL53L1_WrByte>
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
	return status;
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d86:	b004      	add	sp, #16
 8000d88:	4770      	bx	lr

08000d8a <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(&dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(VL53L1_Dev_t dev, uint8_t *pInterruptPolarity)
{
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	f107 0c10 	add.w	ip, r7, #16
 8000d96:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_RdByte(&dev, GPIO_HV_MUX__CTRL, &Temp);
 8000d9e:	1dbb      	adds	r3, r7, #6
 8000da0:	461a      	mov	r2, r3
 8000da2:	2130      	movs	r1, #48	; 0x30
 8000da4:	f107 0010 	add.w	r0, r7, #16
 8000da8:	f7ff fe9c 	bl	8000ae4 <VL53L1_RdByte>
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
	Temp = Temp & 0x10;
 8000db0:	79bb      	ldrb	r3, [r7, #6]
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	71bb      	strb	r3, [r7, #6]
	*pInterruptPolarity = !(Temp>>4);
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf0c      	ite	eq
 8000dc4:	2301      	moveq	r3, #1
 8000dc6:	2300      	movne	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dce:	701a      	strb	r2, [r3, #0]
	return status;
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dde:	b004      	add	sp, #16
 8000de0:	4770      	bx	lr

08000de2 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(VL53L1_Dev_t dev)
{
 8000de2:	b084      	sub	sp, #16
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	f107 0c10 	add.w	ip, r7, #16
 8000dee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000df6:	2240      	movs	r2, #64	; 0x40
 8000df8:	2187      	movs	r1, #135	; 0x87
 8000dfa:	f107 0010 	add.w	r0, r7, #16
 8000dfe:	f7ff fe15 	bl	8000a2c <VL53L1_WrByte>
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	return status;
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e14:	b004      	add	sp, #16
 8000e16:	4770      	bx	lr

08000e18 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(VL53L1_Dev_t dev)
{
 8000e18:	b084      	sub	sp, #16
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	f107 0c10 	add.w	ip, r7, #16
 8000e24:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2187      	movs	r1, #135	; 0x87
 8000e30:	f107 0010 	add.w	r0, r7, #16
 8000e34:	f7ff fdfa 	bl	8000a2c <VL53L1_WrByte>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
	return status;
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e4a:	b004      	add	sp, #16
 8000e4c:	4770      	bx	lr

08000e4e <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(VL53L1_Dev_t dev, uint8_t *isDataReady)
{
 8000e4e:	b084      	sub	sp, #16
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af04      	add	r7, sp, #16
 8000e56:	f107 0c10 	add.w	ip, r7, #16
 8000e5a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000e62:	1d7b      	adds	r3, r7, #5
 8000e64:	9302      	str	r3, [sp, #8]
 8000e66:	466a      	mov	r2, sp
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e70:	e882 0003 	stmia.w	r2, {r0, r1}
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e7a:	f7ff ff86 	bl	8000d8a <VL53L1X_GetInterruptPolarity>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
	status = VL53L1_RdByte(&dev, GPIO__TIO_HV_STATUS, &Temp);
 8000e82:	1dbb      	adds	r3, r7, #6
 8000e84:	461a      	mov	r2, r3
 8000e86:	2131      	movs	r1, #49	; 0x31
 8000e88:	f107 0010 	add.w	r0, r7, #16
 8000e8c:	f7ff fe2a 	bl	8000ae4 <VL53L1_RdByte>
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10c      	bne.n	8000eb6 <VL53L1X_CheckForDataReady+0x68>
		if ((Temp & 1) == IntPol)
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	797a      	ldrb	r2, [r7, #5]
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d103      	bne.n	8000eb0 <VL53L1X_CheckForDataReady+0x62>
			*isDataReady = 1;
 8000ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e002      	b.n	8000eb6 <VL53L1X_CheckForDataReady+0x68>
		else
			*isDataReady = 0;
 8000eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec4:	b004      	add	sp, #16
 8000ec6:	4770      	bx	lr

08000ec8 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(VL53L1_Dev_t dev, uint16_t TimingBudgetInMs)
{
 8000ec8:	b084      	sub	sp, #16
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af04      	add	r7, sp, #16
 8000ed0:	f107 0c10 	add.w	ip, r7, #16
 8000ed4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	71fb      	strb	r3, [r7, #7]

	status = VL53L1X_GetDistanceMode(dev, &DM);
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	466a      	mov	r2, sp
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000eea:	e882 0003 	stmia.w	r2, {r0, r1}
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef4:	f000 fa2a 	bl	800134c <VL53L1X_GetDistanceMode>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
	if (DM == 0)
 8000efc:	88bb      	ldrh	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <VL53L1X_SetTimingBudgetInMs+0x3e>
		return 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e0f6      	b.n	80010f4 <VL53L1X_SetTimingBudgetInMs+0x22c>
	else if (DM == 1) {	/* Short DistanceMode */
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	f040 8082 	bne.w	8001012 <VL53L1X_SetTimingBudgetInMs+0x14a>
		switch (TimingBudgetInMs) {
 8000f0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f14:	d06b      	beq.n	8000fee <VL53L1X_SetTimingBudgetInMs+0x126>
 8000f16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f1a:	dc77      	bgt.n	800100c <VL53L1X_SetTimingBudgetInMs+0x144>
 8000f1c:	2bc8      	cmp	r3, #200	; 0xc8
 8000f1e:	d057      	beq.n	8000fd0 <VL53L1X_SetTimingBudgetInMs+0x108>
 8000f20:	2bc8      	cmp	r3, #200	; 0xc8
 8000f22:	dc73      	bgt.n	800100c <VL53L1X_SetTimingBudgetInMs+0x144>
 8000f24:	2b64      	cmp	r3, #100	; 0x64
 8000f26:	d044      	beq.n	8000fb2 <VL53L1X_SetTimingBudgetInMs+0xea>
 8000f28:	2b64      	cmp	r3, #100	; 0x64
 8000f2a:	dc6f      	bgt.n	800100c <VL53L1X_SetTimingBudgetInMs+0x144>
 8000f2c:	2b32      	cmp	r3, #50	; 0x32
 8000f2e:	d031      	beq.n	8000f94 <VL53L1X_SetTimingBudgetInMs+0xcc>
 8000f30:	2b32      	cmp	r3, #50	; 0x32
 8000f32:	dc6b      	bgt.n	800100c <VL53L1X_SetTimingBudgetInMs+0x144>
 8000f34:	2b21      	cmp	r3, #33	; 0x21
 8000f36:	d020      	beq.n	8000f7a <VL53L1X_SetTimingBudgetInMs+0xb2>
 8000f38:	2b21      	cmp	r3, #33	; 0x21
 8000f3a:	dc67      	bgt.n	800100c <VL53L1X_SetTimingBudgetInMs+0x144>
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d002      	beq.n	8000f46 <VL53L1X_SetTimingBudgetInMs+0x7e>
 8000f40:	2b14      	cmp	r3, #20
 8000f42:	d00d      	beq.n	8000f60 <VL53L1X_SetTimingBudgetInMs+0x98>
 8000f44:	e062      	b.n	800100c <VL53L1X_SetTimingBudgetInMs+0x144>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000f46:	221d      	movs	r2, #29
 8000f48:	215e      	movs	r1, #94	; 0x5e
 8000f4a:	f107 0010 	add.w	r0, r7, #16
 8000f4e:	f7ff fd97 	bl	8000a80 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000f52:	2227      	movs	r2, #39	; 0x27
 8000f54:	2161      	movs	r1, #97	; 0x61
 8000f56:	f107 0010 	add.w	r0, r7, #16
 8000f5a:	f7ff fd91 	bl	8000a80 <VL53L1_WrWord>
					0x0027);
			break;
 8000f5e:	e0c7      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 20:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000f60:	2251      	movs	r2, #81	; 0x51
 8000f62:	215e      	movs	r1, #94	; 0x5e
 8000f64:	f107 0010 	add.w	r0, r7, #16
 8000f68:	f7ff fd8a 	bl	8000a80 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000f6c:	226e      	movs	r2, #110	; 0x6e
 8000f6e:	2161      	movs	r1, #97	; 0x61
 8000f70:	f107 0010 	add.w	r0, r7, #16
 8000f74:	f7ff fd84 	bl	8000a80 <VL53L1_WrWord>
					0x006E);
			break;
 8000f78:	e0ba      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 33:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000f7a:	22d6      	movs	r2, #214	; 0xd6
 8000f7c:	215e      	movs	r1, #94	; 0x5e
 8000f7e:	f107 0010 	add.w	r0, r7, #16
 8000f82:	f7ff fd7d 	bl	8000a80 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000f86:	226e      	movs	r2, #110	; 0x6e
 8000f88:	2161      	movs	r1, #97	; 0x61
 8000f8a:	f107 0010 	add.w	r0, r7, #16
 8000f8e:	f7ff fd77 	bl	8000a80 <VL53L1_WrWord>
					0x006E);
			break;
 8000f92:	e0ad      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 50:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000f94:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8000f98:	215e      	movs	r1, #94	; 0x5e
 8000f9a:	f107 0010 	add.w	r0, r7, #16
 8000f9e:	f7ff fd6f 	bl	8000a80 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000fa2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8000fa6:	2161      	movs	r1, #97	; 0x61
 8000fa8:	f107 0010 	add.w	r0, r7, #16
 8000fac:	f7ff fd68 	bl	8000a80 <VL53L1_WrWord>
					0x01E8);
			break;
 8000fb0:	e09e      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 100:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000fb2:	f240 22e1 	movw	r2, #737	; 0x2e1
 8000fb6:	215e      	movs	r1, #94	; 0x5e
 8000fb8:	f107 0010 	add.w	r0, r7, #16
 8000fbc:	f7ff fd60 	bl	8000a80 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000fc0:	f44f 7262 	mov.w	r2, #904	; 0x388
 8000fc4:	2161      	movs	r1, #97	; 0x61
 8000fc6:	f107 0010 	add.w	r0, r7, #16
 8000fca:	f7ff fd59 	bl	8000a80 <VL53L1_WrWord>
					0x0388);
			break;
 8000fce:	e08f      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 200:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000fd0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8000fd4:	215e      	movs	r1, #94	; 0x5e
 8000fd6:	f107 0010 	add.w	r0, r7, #16
 8000fda:	f7ff fd51 	bl	8000a80 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000fde:	f240 4296 	movw	r2, #1174	; 0x496
 8000fe2:	2161      	movs	r1, #97	; 0x61
 8000fe4:	f107 0010 	add.w	r0, r7, #16
 8000fe8:	f7ff fd4a 	bl	8000a80 <VL53L1_WrWord>
					0x0496);
			break;
 8000fec:	e080      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 500:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000fee:	f240 5291 	movw	r2, #1425	; 0x591
 8000ff2:	215e      	movs	r1, #94	; 0x5e
 8000ff4:	f107 0010 	add.w	r0, r7, #16
 8000ff8:	f7ff fd42 	bl	8000a80 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000ffc:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001000:	2161      	movs	r1, #97	; 0x61
 8001002:	f107 0010 	add.w	r0, r7, #16
 8001006:	f7ff fd3b 	bl	8000a80 <VL53L1_WrWord>
					0x05C1);
			break;
 800100a:	e071      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		default:
			status = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	71fb      	strb	r3, [r7, #7]
			break;
 8001010:	e06e      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		}
	} else {
		switch (TimingBudgetInMs) {
 8001012:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001014:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001018:	d058      	beq.n	80010cc <VL53L1X_SetTimingBudgetInMs+0x204>
 800101a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800101e:	dc64      	bgt.n	80010ea <VL53L1X_SetTimingBudgetInMs+0x222>
 8001020:	2bc8      	cmp	r3, #200	; 0xc8
 8001022:	d044      	beq.n	80010ae <VL53L1X_SetTimingBudgetInMs+0x1e6>
 8001024:	2bc8      	cmp	r3, #200	; 0xc8
 8001026:	dc60      	bgt.n	80010ea <VL53L1X_SetTimingBudgetInMs+0x222>
 8001028:	2b64      	cmp	r3, #100	; 0x64
 800102a:	d031      	beq.n	8001090 <VL53L1X_SetTimingBudgetInMs+0x1c8>
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	dc5c      	bgt.n	80010ea <VL53L1X_SetTimingBudgetInMs+0x222>
 8001030:	2b32      	cmp	r3, #50	; 0x32
 8001032:	d020      	beq.n	8001076 <VL53L1X_SetTimingBudgetInMs+0x1ae>
 8001034:	2b32      	cmp	r3, #50	; 0x32
 8001036:	dc58      	bgt.n	80010ea <VL53L1X_SetTimingBudgetInMs+0x222>
 8001038:	2b14      	cmp	r3, #20
 800103a:	d002      	beq.n	8001042 <VL53L1X_SetTimingBudgetInMs+0x17a>
 800103c:	2b21      	cmp	r3, #33	; 0x21
 800103e:	d00d      	beq.n	800105c <VL53L1X_SetTimingBudgetInMs+0x194>
 8001040:	e053      	b.n	80010ea <VL53L1X_SetTimingBudgetInMs+0x222>
		case 20:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001042:	221e      	movs	r2, #30
 8001044:	215e      	movs	r1, #94	; 0x5e
 8001046:	f107 0010 	add.w	r0, r7, #16
 800104a:	f7ff fd19 	bl	8000a80 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800104e:	2222      	movs	r2, #34	; 0x22
 8001050:	2161      	movs	r1, #97	; 0x61
 8001052:	f107 0010 	add.w	r0, r7, #16
 8001056:	f7ff fd13 	bl	8000a80 <VL53L1_WrWord>
					0x0022);
			break;
 800105a:	e049      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 33:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800105c:	2260      	movs	r2, #96	; 0x60
 800105e:	215e      	movs	r1, #94	; 0x5e
 8001060:	f107 0010 	add.w	r0, r7, #16
 8001064:	f7ff fd0c 	bl	8000a80 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001068:	226e      	movs	r2, #110	; 0x6e
 800106a:	2161      	movs	r1, #97	; 0x61
 800106c:	f107 0010 	add.w	r0, r7, #16
 8001070:	f7ff fd06 	bl	8000a80 <VL53L1_WrWord>
					0x006E);
			break;
 8001074:	e03c      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 50:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001076:	22ad      	movs	r2, #173	; 0xad
 8001078:	215e      	movs	r1, #94	; 0x5e
 800107a:	f107 0010 	add.w	r0, r7, #16
 800107e:	f7ff fcff 	bl	8000a80 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001082:	22c6      	movs	r2, #198	; 0xc6
 8001084:	2161      	movs	r1, #97	; 0x61
 8001086:	f107 0010 	add.w	r0, r7, #16
 800108a:	f7ff fcf9 	bl	8000a80 <VL53L1_WrWord>
					0x00C6);
			break;
 800108e:	e02f      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 100:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001090:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8001094:	215e      	movs	r1, #94	; 0x5e
 8001096:	f107 0010 	add.w	r0, r7, #16
 800109a:	f7ff fcf1 	bl	8000a80 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800109e:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 80010a2:	2161      	movs	r1, #97	; 0x61
 80010a4:	f107 0010 	add.w	r0, r7, #16
 80010a8:	f7ff fcea 	bl	8000a80 <VL53L1_WrWord>
					0x01EA);
			break;
 80010ac:	e020      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 200:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80010ae:	f240 22d9 	movw	r2, #729	; 0x2d9
 80010b2:	215e      	movs	r1, #94	; 0x5e
 80010b4:	f107 0010 	add.w	r0, r7, #16
 80010b8:	f7ff fce2 	bl	8000a80 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80010bc:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 80010c0:	2161      	movs	r1, #97	; 0x61
 80010c2:	f107 0010 	add.w	r0, r7, #16
 80010c6:	f7ff fcdb 	bl	8000a80 <VL53L1_WrWord>
					0x02F8);
			break;
 80010ca:	e011      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		case 500:
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80010cc:	f240 428f 	movw	r2, #1167	; 0x48f
 80010d0:	215e      	movs	r1, #94	; 0x5e
 80010d2:	f107 0010 	add.w	r0, r7, #16
 80010d6:	f7ff fcd3 	bl	8000a80 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80010da:	f240 42a4 	movw	r2, #1188	; 0x4a4
 80010de:	2161      	movs	r1, #97	; 0x61
 80010e0:	f107 0010 	add.w	r0, r7, #16
 80010e4:	f7ff fccc 	bl	8000a80 <VL53L1_WrWord>
					0x04A4);
			break;
 80010e8:	e002      	b.n	80010f0 <VL53L1X_SetTimingBudgetInMs+0x228>
		default:
			status = 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	71fb      	strb	r3, [r7, #7]
			break;
 80010ee:	bf00      	nop
		}
	}
	return status;
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010fe:	b004      	add	sp, #16
 8001100:	4770      	bx	lr

08001102 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(VL53L1_Dev_t dev, uint16_t *pTimingBudget)
{
 8001102:	b084      	sub	sp, #16
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	f107 0c10 	add.w	ip, r7, #16
 800110e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_RdWord(&dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	461a      	mov	r2, r3
 800111a:	215e      	movs	r1, #94	; 0x5e
 800111c:	f107 0010 	add.w	r0, r7, #16
 8001120:	f7ff fd14 	bl	8000b4c <VL53L1_RdWord>
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
	switch (Temp) {
 8001128:	88bb      	ldrh	r3, [r7, #4]
 800112a:	f240 5291 	movw	r2, #1425	; 0x591
 800112e:	4293      	cmp	r3, r2
 8001130:	d05b      	beq.n	80011ea <VL53L1X_GetTimingBudgetInMs+0xe8>
 8001132:	f240 5291 	movw	r2, #1425	; 0x591
 8001136:	4293      	cmp	r3, r2
 8001138:	dc5c      	bgt.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
 800113a:	f240 428f 	movw	r2, #1167	; 0x48f
 800113e:	4293      	cmp	r3, r2
 8001140:	d053      	beq.n	80011ea <VL53L1X_GetTimingBudgetInMs+0xe8>
 8001142:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8001146:	da55      	bge.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001148:	f240 32e1 	movw	r2, #993	; 0x3e1
 800114c:	4293      	cmp	r3, r2
 800114e:	d048      	beq.n	80011e2 <VL53L1X_GetTimingBudgetInMs+0xe0>
 8001150:	f240 32e1 	movw	r2, #993	; 0x3e1
 8001154:	4293      	cmp	r3, r2
 8001156:	dc4d      	bgt.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001158:	f240 22e1 	movw	r2, #737	; 0x2e1
 800115c:	4293      	cmp	r3, r2
 800115e:	d03c      	beq.n	80011da <VL53L1X_GetTimingBudgetInMs+0xd8>
 8001160:	f240 22e1 	movw	r2, #737	; 0x2e1
 8001164:	4293      	cmp	r3, r2
 8001166:	dc45      	bgt.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001168:	f240 22d9 	movw	r2, #729	; 0x2d9
 800116c:	4293      	cmp	r3, r2
 800116e:	d038      	beq.n	80011e2 <VL53L1X_GetTimingBudgetInMs+0xe0>
 8001170:	f240 22d9 	movw	r2, #729	; 0x2d9
 8001174:	4293      	cmp	r3, r2
 8001176:	dc3d      	bgt.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001178:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800117c:	d02d      	beq.n	80011da <VL53L1X_GetTimingBudgetInMs+0xd8>
 800117e:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001182:	dc37      	bgt.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001184:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8001188:	d023      	beq.n	80011d2 <VL53L1X_GetTimingBudgetInMs+0xd0>
 800118a:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 800118e:	dc31      	bgt.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001190:	2bd6      	cmp	r3, #214	; 0xd6
 8001192:	d01a      	beq.n	80011ca <VL53L1X_GetTimingBudgetInMs+0xc8>
 8001194:	2bd6      	cmp	r3, #214	; 0xd6
 8001196:	dc2d      	bgt.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
 8001198:	2bad      	cmp	r3, #173	; 0xad
 800119a:	d01a      	beq.n	80011d2 <VL53L1X_GetTimingBudgetInMs+0xd0>
 800119c:	2bad      	cmp	r3, #173	; 0xad
 800119e:	dc29      	bgt.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
 80011a0:	2b60      	cmp	r3, #96	; 0x60
 80011a2:	d012      	beq.n	80011ca <VL53L1X_GetTimingBudgetInMs+0xc8>
 80011a4:	2b60      	cmp	r3, #96	; 0x60
 80011a6:	dc25      	bgt.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
 80011a8:	2b51      	cmp	r3, #81	; 0x51
 80011aa:	d00a      	beq.n	80011c2 <VL53L1X_GetTimingBudgetInMs+0xc0>
 80011ac:	2b51      	cmp	r3, #81	; 0x51
 80011ae:	dc21      	bgt.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
 80011b0:	2b1d      	cmp	r3, #29
 80011b2:	d002      	beq.n	80011ba <VL53L1X_GetTimingBudgetInMs+0xb8>
 80011b4:	2b1e      	cmp	r3, #30
 80011b6:	d004      	beq.n	80011c2 <VL53L1X_GetTimingBudgetInMs+0xc0>
 80011b8:	e01c      	b.n	80011f4 <VL53L1X_GetTimingBudgetInMs+0xf2>
		case 0x001D :
			*pTimingBudget = 15;
 80011ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011bc:	220f      	movs	r2, #15
 80011be:	801a      	strh	r2, [r3, #0]
			break;
 80011c0:	e01c      	b.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	2214      	movs	r2, #20
 80011c6:	801a      	strh	r2, [r3, #0]
			break;
 80011c8:	e018      	b.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 80011ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011cc:	2221      	movs	r2, #33	; 0x21
 80011ce:	801a      	strh	r2, [r3, #0]
			break;
 80011d0:	e014      	b.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	2232      	movs	r2, #50	; 0x32
 80011d6:	801a      	strh	r2, [r3, #0]
			break;
 80011d8:	e010      	b.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 80011da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011dc:	2264      	movs	r2, #100	; 0x64
 80011de:	801a      	strh	r2, [r3, #0]
			break;
 80011e0:	e00c      	b.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	22c8      	movs	r2, #200	; 0xc8
 80011e6:	801a      	strh	r2, [r3, #0]
			break;
 80011e8:	e008      	b.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xfa>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 80011ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011f0:	801a      	strh	r2, [r3, #0]
			break;
 80011f2:	e003      	b.n	80011fc <VL53L1X_GetTimingBudgetInMs+0xfa>
		default:
			*pTimingBudget = 0;
 80011f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f6:	2200      	movs	r2, #0
 80011f8:	801a      	strh	r2, [r3, #0]
			break;
 80011fa:	bf00      	nop
	}
	return status;
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800120a:	b004      	add	sp, #16
 800120c:	4770      	bx	lr

0800120e <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(VL53L1_Dev_t dev, uint16_t DM)
{
 800120e:	b084      	sub	sp, #16
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	f107 0c10 	add.w	ip, r7, #16
 800121a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	71fb      	strb	r3, [r7, #7]

	status = VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	466a      	mov	r2, sp
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001230:	e882 0003 	stmia.w	r2, {r0, r1}
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800123a:	f7ff ff62 	bl	8001102 <VL53L1X_GetTimingBudgetInMs>
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	switch (DM) {
 8001242:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001244:	2b01      	cmp	r3, #1
 8001246:	d002      	beq.n	800124e <VL53L1X_SetDistanceMode+0x40>
 8001248:	2b02      	cmp	r3, #2
 800124a:	d033      	beq.n	80012b4 <VL53L1X_SetDistanceMode+0xa6>
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
		status = VL53L1_WrWord(&dev, SD_CONFIG__WOI_SD0, 0x0F0D);
		status = VL53L1_WrWord(&dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
		break;
	default:
		break;
 800124c:	e065      	b.n	800131a <VL53L1X_SetDistanceMode+0x10c>
		status = VL53L1_WrByte(&dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 800124e:	2214      	movs	r2, #20
 8001250:	214b      	movs	r1, #75	; 0x4b
 8001252:	f107 0010 	add.w	r0, r7, #16
 8001256:	f7ff fbe9 	bl	8000a2c <VL53L1_WrByte>
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 800125e:	2207      	movs	r2, #7
 8001260:	2160      	movs	r1, #96	; 0x60
 8001262:	f107 0010 	add.w	r0, r7, #16
 8001266:	f7ff fbe1 	bl	8000a2c <VL53L1_WrByte>
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 800126e:	2205      	movs	r2, #5
 8001270:	2163      	movs	r1, #99	; 0x63
 8001272:	f107 0010 	add.w	r0, r7, #16
 8001276:	f7ff fbd9 	bl	8000a2c <VL53L1_WrByte>
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 800127e:	2238      	movs	r2, #56	; 0x38
 8001280:	2169      	movs	r1, #105	; 0x69
 8001282:	f107 0010 	add.w	r0, r7, #16
 8001286:	f7ff fbd1 	bl	8000a2c <VL53L1_WrByte>
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrWord(&dev, SD_CONFIG__WOI_SD0, 0x0705);
 800128e:	f240 7205 	movw	r2, #1797	; 0x705
 8001292:	2178      	movs	r1, #120	; 0x78
 8001294:	f107 0010 	add.w	r0, r7, #16
 8001298:	f7ff fbf2 	bl	8000a80 <VL53L1_WrWord>
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrWord(&dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 80012a0:	f240 6206 	movw	r2, #1542	; 0x606
 80012a4:	217a      	movs	r1, #122	; 0x7a
 80012a6:	f107 0010 	add.w	r0, r7, #16
 80012aa:	f7ff fbe9 	bl	8000a80 <VL53L1_WrWord>
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
		break;
 80012b2:	e032      	b.n	800131a <VL53L1X_SetDistanceMode+0x10c>
		status = VL53L1_WrByte(&dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 80012b4:	220a      	movs	r2, #10
 80012b6:	214b      	movs	r1, #75	; 0x4b
 80012b8:	f107 0010 	add.w	r0, r7, #16
 80012bc:	f7ff fbb6 	bl	8000a2c <VL53L1_WrByte>
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 80012c4:	220f      	movs	r2, #15
 80012c6:	2160      	movs	r1, #96	; 0x60
 80012c8:	f107 0010 	add.w	r0, r7, #16
 80012cc:	f7ff fbae 	bl	8000a2c <VL53L1_WrByte>
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 80012d4:	220d      	movs	r2, #13
 80012d6:	2163      	movs	r1, #99	; 0x63
 80012d8:	f107 0010 	add.w	r0, r7, #16
 80012dc:	f7ff fba6 	bl	8000a2c <VL53L1_WrByte>
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrByte(&dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 80012e4:	22b8      	movs	r2, #184	; 0xb8
 80012e6:	2169      	movs	r1, #105	; 0x69
 80012e8:	f107 0010 	add.w	r0, r7, #16
 80012ec:	f7ff fb9e 	bl	8000a2c <VL53L1_WrByte>
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrWord(&dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 80012f4:	f640 720d 	movw	r2, #3853	; 0xf0d
 80012f8:	2178      	movs	r1, #120	; 0x78
 80012fa:	f107 0010 	add.w	r0, r7, #16
 80012fe:	f7ff fbbf 	bl	8000a80 <VL53L1_WrWord>
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
		status = VL53L1_WrWord(&dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8001306:	f640 620e 	movw	r2, #3598	; 0xe0e
 800130a:	217a      	movs	r1, #122	; 0x7a
 800130c:	f107 0010 	add.w	r0, r7, #16
 8001310:	f7ff fbb6 	bl	8000a80 <VL53L1_WrWord>
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
		break;
 8001318:	bf00      	nop
	}
	status = VL53L1X_SetTimingBudgetInMs(dev,TB);
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	466a      	mov	r2, sp
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001328:	e882 0003 	stmia.w	r2, {r0, r1}
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001332:	f7ff fdc9 	bl	8000ec8 <VL53L1X_SetTimingBudgetInMs>
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	return status;
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001348:	b004      	add	sp, #16
 800134a:	4770      	bx	lr

0800134c <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(VL53L1_Dev_t dev, uint16_t *DM)
{
 800134c:	b084      	sub	sp, #16
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	f107 0c10 	add.w	ip, r7, #16
 8001358:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t TempDM, status=0;
 800135c:	2300      	movs	r3, #0
 800135e:	71fb      	strb	r3, [r7, #7]

	status = VL53L1_RdByte(&dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8001360:	1dbb      	adds	r3, r7, #6
 8001362:	461a      	mov	r2, r3
 8001364:	214b      	movs	r1, #75	; 0x4b
 8001366:	f107 0010 	add.w	r0, r7, #16
 800136a:	f7ff fbbb 	bl	8000ae4 <VL53L1_RdByte>
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
	if (TempDM == 0x14)
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	2b14      	cmp	r3, #20
 8001376:	d102      	bne.n	800137e <VL53L1X_GetDistanceMode+0x32>
		*DM=1;
 8001378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137a:	2201      	movs	r2, #1
 800137c:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 800137e:	79bb      	ldrb	r3, [r7, #6]
 8001380:	2b0a      	cmp	r3, #10
 8001382:	d102      	bne.n	800138a <VL53L1X_GetDistanceMode+0x3e>
		*DM=2;
 8001384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001386:	2202      	movs	r2, #2
 8001388:	801a      	strh	r2, [r3, #0]
	return status;
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001398:	b004      	add	sp, #16
 800139a:	4770      	bx	lr

0800139c <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(VL53L1_Dev_t dev, uint8_t *state)
{
 800139c:	b084      	sub	sp, #16
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	f107 0c10 	add.w	ip, r7, #16
 80013a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	71bb      	strb	r3, [r7, #6]

	status = VL53L1_RdByte(&dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80013b4:	1dbb      	adds	r3, r7, #6
 80013b6:	461a      	mov	r2, r3
 80013b8:	21e5      	movs	r1, #229	; 0xe5
 80013ba:	f107 0010 	add.w	r0, r7, #16
 80013be:	f7ff fb91 	bl	8000ae4 <VL53L1_RdByte>
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
	*state = tmp;
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	701a      	strb	r2, [r3, #0]
	return status;
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013da:	b004      	add	sp, #16
 80013dc:	4770      	bx	lr

080013de <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(VL53L1_Dev_t dev, uint16_t *distance)
{
 80013de:	b084      	sub	sp, #16
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	f107 0c10 	add.w	ip, r7, #16
 80013ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L1X_ERROR status = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	status = (VL53L1_RdWord(&dev,
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	461a      	mov	r2, r3
 80013f6:	2196      	movs	r1, #150	; 0x96
 80013f8:	f107 0010 	add.w	r0, r7, #16
 80013fc:	f7ff fba6 	bl	8000b4c <VL53L1_RdWord>
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8001404:	88ba      	ldrh	r2, [r7, #4]
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	801a      	strh	r2, [r3, #0]
	return status;
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001418:	b004      	add	sp, #16
 800141a:	4770      	bx	lr

0800141c <VL53L1X_SetROI>:
	*high = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_SetROI(VL53L1_Dev_t dev, uint16_t X, uint16_t Y)
{
 800141c:	b084      	sub	sp, #16
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	f107 0c10 	add.w	ip, r7, #16
 8001428:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t OpticalCenter;
	VL53L1X_ERROR status = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	71fb      	strb	r3, [r7, #7]

	status =VL53L1_RdByte(&dev, VL53L1_ROI_CONFIG__MODE_ROI_CENTRE_SPAD, &OpticalCenter);
 8001430:	1dbb      	adds	r3, r7, #6
 8001432:	461a      	mov	r2, r3
 8001434:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001438:	f107 0010 	add.w	r0, r7, #16
 800143c:	f7ff fb52 	bl	8000ae4 <VL53L1_RdByte>
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
	if (X > 16)
 8001444:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001446:	2b10      	cmp	r3, #16
 8001448:	d901      	bls.n	800144e <VL53L1X_SetROI+0x32>
		X = 16;
 800144a:	2310      	movs	r3, #16
 800144c:	853b      	strh	r3, [r7, #40]	; 0x28
	if (Y > 16)
 800144e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001450:	2b10      	cmp	r3, #16
 8001452:	d901      	bls.n	8001458 <VL53L1X_SetROI+0x3c>
		Y = 16;
 8001454:	2310      	movs	r3, #16
 8001456:	85bb      	strh	r3, [r7, #44]	; 0x2c
	if (X > 10 || Y > 10){
 8001458:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800145a:	2b0a      	cmp	r3, #10
 800145c:	d802      	bhi.n	8001464 <VL53L1X_SetROI+0x48>
 800145e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001460:	2b0a      	cmp	r3, #10
 8001462:	d901      	bls.n	8001468 <VL53L1X_SetROI+0x4c>
		OpticalCenter = 199;
 8001464:	23c7      	movs	r3, #199	; 0xc7
 8001466:	71bb      	strb	r3, [r7, #6]
	}
	status = VL53L1_WrByte(&dev, ROI_CONFIG__USER_ROI_CENTRE_SPAD, OpticalCenter);
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	461a      	mov	r2, r3
 800146c:	217f      	movs	r1, #127	; 0x7f
 800146e:	f107 0010 	add.w	r0, r7, #16
 8001472:	f7ff fadb 	bl	8000a2c <VL53L1_WrByte>
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
	status = VL53L1_WrByte(&dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
		       (Y - 1) << 4 | (X - 1));
 800147a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800147c:	3b01      	subs	r3, #1
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	b25a      	sxtb	r2, r3
 8001482:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3b01      	subs	r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	b25b      	sxtb	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b25b      	sxtb	r3, r3
	status = VL53L1_WrByte(&dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
 8001490:	b2db      	uxtb	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	f107 0010 	add.w	r0, r7, #16
 800149a:	f7ff fac7 	bl	8000a2c <VL53L1_WrByte>
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	return status;
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014b0:	b004      	add	sp, #16
 80014b2:	4770      	bx	lr

080014b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_Init+0x28>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_Init+0x28>)
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 f92b 	bl	8001720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ca:	200f      	movs	r0, #15
 80014cc:	f000 f808 	bl	80014e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d0:	f7ff f910 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40022000 	.word	0x40022000

080014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_InitTick+0x54>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x58>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f935 	bl	800176e <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00e      	b.n	800152c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d80a      	bhi.n	800152a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800151c:	f000 f90b 	bl	8001736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <HAL_InitTick+0x5c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000004 	.word	0x20000004
 8001538:	2000000c 	.word	0x2000000c
 800153c:	20000008 	.word	0x20000008

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x1c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x20>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a03      	ldr	r2, [pc, #12]	; (8001560 <HAL_IncTick+0x20>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	2000000c 	.word	0x2000000c
 8001560:	20000248 	.word	0x20000248

08001564 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <HAL_GetTick+0x10>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	20000248 	.word	0x20000248

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff fff0 	bl	8001564 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffe0 	bl	8001564 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000000c 	.word	0x2000000c

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ec:	d301      	bcc.n	80016f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00f      	b.n	8001712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <SysTick_Config+0x40>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fa:	210f      	movs	r1, #15
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001700:	f7ff ff90 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <SysTick_Config+0x40>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <SysTick_Config+0x40>)
 800170c:	2207      	movs	r2, #7
 800170e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	e000e010 	.word	0xe000e010

08001720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff49 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001748:	f7ff ff5e 	bl	8001608 <__NVIC_GetPriorityGrouping>
 800174c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	6978      	ldr	r0, [r7, #20]
 8001754:	f7ff ff90 	bl	8001678 <NVIC_EncodePriority>
 8001758:	4602      	mov	r2, r0
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff5f 	bl	8001624 <__NVIC_SetPriority>
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffb0 	bl	80016dc <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b08b      	sub	sp, #44	; 0x2c
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179a:	e169      	b.n	8001a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800179c:	2201      	movs	r2, #1
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 8158 	bne.w	8001a6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4a9a      	ldr	r2, [pc, #616]	; (8001a28 <HAL_GPIO_Init+0x2a0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d05e      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017c4:	4a98      	ldr	r2, [pc, #608]	; (8001a28 <HAL_GPIO_Init+0x2a0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d875      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017ca:	4a98      	ldr	r2, [pc, #608]	; (8001a2c <HAL_GPIO_Init+0x2a4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d058      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017d0:	4a96      	ldr	r2, [pc, #600]	; (8001a2c <HAL_GPIO_Init+0x2a4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d86f      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017d6:	4a96      	ldr	r2, [pc, #600]	; (8001a30 <HAL_GPIO_Init+0x2a8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d052      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017dc:	4a94      	ldr	r2, [pc, #592]	; (8001a30 <HAL_GPIO_Init+0x2a8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d869      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017e2:	4a94      	ldr	r2, [pc, #592]	; (8001a34 <HAL_GPIO_Init+0x2ac>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d04c      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017e8:	4a92      	ldr	r2, [pc, #584]	; (8001a34 <HAL_GPIO_Init+0x2ac>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d863      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017ee:	4a92      	ldr	r2, [pc, #584]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d046      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017f4:	4a90      	ldr	r2, [pc, #576]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d85d      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017fa:	2b12      	cmp	r3, #18
 80017fc:	d82a      	bhi.n	8001854 <HAL_GPIO_Init+0xcc>
 80017fe:	2b12      	cmp	r3, #18
 8001800:	d859      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <HAL_GPIO_Init+0x80>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001883 	.word	0x08001883
 800180c:	0800185d 	.word	0x0800185d
 8001810:	0800186f 	.word	0x0800186f
 8001814:	080018b1 	.word	0x080018b1
 8001818:	080018b7 	.word	0x080018b7
 800181c:	080018b7 	.word	0x080018b7
 8001820:	080018b7 	.word	0x080018b7
 8001824:	080018b7 	.word	0x080018b7
 8001828:	080018b7 	.word	0x080018b7
 800182c:	080018b7 	.word	0x080018b7
 8001830:	080018b7 	.word	0x080018b7
 8001834:	080018b7 	.word	0x080018b7
 8001838:	080018b7 	.word	0x080018b7
 800183c:	080018b7 	.word	0x080018b7
 8001840:	080018b7 	.word	0x080018b7
 8001844:	080018b7 	.word	0x080018b7
 8001848:	080018b7 	.word	0x080018b7
 800184c:	08001865 	.word	0x08001865
 8001850:	08001879 	.word	0x08001879
 8001854:	4a79      	ldr	r2, [pc, #484]	; (8001a3c <HAL_GPIO_Init+0x2b4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800185a:	e02c      	b.n	80018b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e029      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	3304      	adds	r3, #4
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e024      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	3308      	adds	r3, #8
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e01f      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	330c      	adds	r3, #12
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e01a      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800188a:	2304      	movs	r3, #4
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e013      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	611a      	str	r2, [r3, #16]
          break;
 80018a2:	e009      	b.n	80018b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a4:	2308      	movs	r3, #8
 80018a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	615a      	str	r2, [r3, #20]
          break;
 80018ae:	e003      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          break;
 80018b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2bff      	cmp	r3, #255	; 0xff
 80018bc:	d801      	bhi.n	80018c2 <HAL_GPIO_Init+0x13a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_Init+0x13e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3304      	adds	r3, #4
 80018c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d802      	bhi.n	80018d4 <HAL_GPIO_Init+0x14c>
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x152>
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	3b08      	subs	r3, #8
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	210f      	movs	r1, #15
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	6a39      	ldr	r1, [r7, #32]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80b1 	beq.w	8001a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001908:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <HAL_GPIO_Init+0x2b8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_GPIO_Init+0x2b8>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <HAL_GPIO_Init+0x2b8>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001920:	4a48      	ldr	r2, [pc, #288]	; (8001a44 <HAL_GPIO_Init+0x2bc>)
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	3302      	adds	r3, #2
 8001928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <HAL_GPIO_Init+0x2c0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d013      	beq.n	8001974 <HAL_GPIO_Init+0x1ec>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a3f      	ldr	r2, [pc, #252]	; (8001a4c <HAL_GPIO_Init+0x2c4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00d      	beq.n	8001970 <HAL_GPIO_Init+0x1e8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3e      	ldr	r2, [pc, #248]	; (8001a50 <HAL_GPIO_Init+0x2c8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d007      	beq.n	800196c <HAL_GPIO_Init+0x1e4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3d      	ldr	r2, [pc, #244]	; (8001a54 <HAL_GPIO_Init+0x2cc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_GPIO_Init+0x1e0>
 8001964:	2303      	movs	r3, #3
 8001966:	e006      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001968:	2304      	movs	r3, #4
 800196a:	e004      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 800196c:	2302      	movs	r3, #2
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001974:	2300      	movs	r3, #0
 8001976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001986:	492f      	ldr	r1, [pc, #188]	; (8001a44 <HAL_GPIO_Init+0x2bc>)
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	492c      	ldr	r1, [pc, #176]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4928      	ldr	r1, [pc, #160]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	4922      	ldr	r1, [pc, #136]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	491e      	ldr	r1, [pc, #120]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4918      	ldr	r1, [pc, #96]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4914      	ldr	r1, [pc, #80]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d021      	beq.n	8001a5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	490e      	ldr	r1, [pc, #56]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
 8001a24:	e021      	b.n	8001a6a <HAL_GPIO_Init+0x2e2>
 8001a26:	bf00      	nop
 8001a28:	10320000 	.word	0x10320000
 8001a2c:	10310000 	.word	0x10310000
 8001a30:	10220000 	.word	0x10220000
 8001a34:	10210000 	.word	0x10210000
 8001a38:	10120000 	.word	0x10120000
 8001a3c:	10110000 	.word	0x10110000
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010000 	.word	0x40010000
 8001a48:	40010800 	.word	0x40010800
 8001a4c:	40010c00 	.word	0x40010c00
 8001a50:	40011000 	.word	0x40011000
 8001a54:	40011400 	.word	0x40011400
 8001a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_GPIO_Init+0x304>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4909      	ldr	r1, [pc, #36]	; (8001a8c <HAL_GPIO_Init+0x304>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f47f ae8e 	bne.w	800179c <HAL_GPIO_Init+0x14>
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	372c      	adds	r7, #44	; 0x2c
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa0:	787b      	ldrb	r3, [r7, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aac:	e003      	b.n	8001ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	041a      	lsls	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e12b      	b.n	8001d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7fe fe26 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2224      	movs	r2, #36	; 0x24
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b24:	f001 fbca 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8001b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a81      	ldr	r2, [pc, #516]	; (8001d34 <HAL_I2C_Init+0x274>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d807      	bhi.n	8001b44 <HAL_I2C_Init+0x84>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4a80      	ldr	r2, [pc, #512]	; (8001d38 <HAL_I2C_Init+0x278>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	bf94      	ite	ls
 8001b3c:	2301      	movls	r3, #1
 8001b3e:	2300      	movhi	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	e006      	b.n	8001b52 <HAL_I2C_Init+0x92>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4a7d      	ldr	r2, [pc, #500]	; (8001d3c <HAL_I2C_Init+0x27c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	bf94      	ite	ls
 8001b4c:	2301      	movls	r3, #1
 8001b4e:	2300      	movhi	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0e7      	b.n	8001d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4a78      	ldr	r2, [pc, #480]	; (8001d40 <HAL_I2C_Init+0x280>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	0c9b      	lsrs	r3, r3, #18
 8001b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a6a      	ldr	r2, [pc, #424]	; (8001d34 <HAL_I2C_Init+0x274>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d802      	bhi.n	8001b94 <HAL_I2C_Init+0xd4>
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3301      	adds	r3, #1
 8001b92:	e009      	b.n	8001ba8 <HAL_I2C_Init+0xe8>
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4a69      	ldr	r2, [pc, #420]	; (8001d44 <HAL_I2C_Init+0x284>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	495c      	ldr	r1, [pc, #368]	; (8001d34 <HAL_I2C_Init+0x274>)
 8001bc4:	428b      	cmp	r3, r1
 8001bc6:	d819      	bhi.n	8001bfc <HAL_I2C_Init+0x13c>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1e59      	subs	r1, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd6:	1c59      	adds	r1, r3, #1
 8001bd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bdc:	400b      	ands	r3, r1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00a      	beq.n	8001bf8 <HAL_I2C_Init+0x138>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1e59      	subs	r1, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf6:	e051      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	e04f      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d111      	bne.n	8001c28 <HAL_I2C_Init+0x168>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1e58      	subs	r0, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	440b      	add	r3, r1
 8001c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	e012      	b.n	8001c4e <HAL_I2C_Init+0x18e>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1e58      	subs	r0, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	0099      	lsls	r1, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Init+0x196>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e022      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10e      	bne.n	8001c7c <HAL_I2C_Init+0x1bc>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1e58      	subs	r0, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6859      	ldr	r1, [r3, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	440b      	add	r3, r1
 8001c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c7a:	e00f      	b.n	8001c9c <HAL_I2C_Init+0x1dc>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	0099      	lsls	r1, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	6809      	ldr	r1, [r1, #0]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6911      	ldr	r1, [r2, #16]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68d2      	ldr	r2, [r2, #12]
 8001cd6:	4311      	orrs	r1, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	000186a0 	.word	0x000186a0
 8001d38:	001e847f 	.word	0x001e847f
 8001d3c:	003d08ff 	.word	0x003d08ff
 8001d40:	431bde83 	.word	0x431bde83
 8001d44:	10624dd3 	.word	0x10624dd3

08001d48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	461a      	mov	r2, r3
 8001d54:	460b      	mov	r3, r1
 8001d56:	817b      	strh	r3, [r7, #10]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff fc02 	bl	8001564 <HAL_GetTick>
 8001d60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	f040 80e0 	bne.w	8001f30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2319      	movs	r3, #25
 8001d76:	2201      	movs	r2, #1
 8001d78:	4970      	ldr	r1, [pc, #448]	; (8001f3c <HAL_I2C_Master_Transmit+0x1f4>)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fc9e 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d86:	2302      	movs	r3, #2
 8001d88:	e0d3      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_I2C_Master_Transmit+0x50>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e0cc      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d007      	beq.n	8001dbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2221      	movs	r2, #33	; 0x21
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2210      	movs	r2, #16
 8001dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	893a      	ldrh	r2, [r7, #8]
 8001dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a50      	ldr	r2, [pc, #320]	; (8001f40 <HAL_I2C_Master_Transmit+0x1f8>)
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e00:	8979      	ldrh	r1, [r7, #10]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 fb08 	bl	800241c <I2C_MasterRequestWrite>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e08d      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e2c:	e066      	b.n	8001efc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	6a39      	ldr	r1, [r7, #32]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 fd5c 	bl	80028f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d107      	bne.n	8001e56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06b      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d11b      	bne.n	8001ed0 <HAL_I2C_Master_Transmit+0x188>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d017      	beq.n	8001ed0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	6a39      	ldr	r1, [r7, #32]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fd53 	bl	8002980 <I2C_WaitOnBTFFlagUntilTimeout>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00d      	beq.n	8001efc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d107      	bne.n	8001ef8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e01a      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d194      	bne.n	8001e2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	00100002 	.word	0x00100002
 8001f40:	ffff0000 	.word	0xffff0000

08001f44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	; 0x30
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	460b      	mov	r3, r1
 8001f52:	817b      	strh	r3, [r7, #10]
 8001f54:	4613      	mov	r3, r2
 8001f56:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff fb02 	bl	8001564 <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	f040 824b 	bne.w	8002406 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2319      	movs	r3, #25
 8001f76:	2201      	movs	r2, #1
 8001f78:	497f      	ldr	r1, [pc, #508]	; (8002178 <HAL_I2C_Master_Receive+0x234>)
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fb9e 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
 8001f88:	e23e      	b.n	8002408 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_I2C_Master_Receive+0x54>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e237      	b.n	8002408 <HAL_I2C_Master_Receive+0x4c4>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d007      	beq.n	8001fbe <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2222      	movs	r2, #34	; 0x22
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2210      	movs	r2, #16
 8001fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	893a      	ldrh	r2, [r7, #8]
 8001fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4a5f      	ldr	r2, [pc, #380]	; (800217c <HAL_I2C_Master_Receive+0x238>)
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002000:	8979      	ldrh	r1, [r7, #10]
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fa8a 	bl	8002520 <I2C_MasterRequestRead>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e1f8      	b.n	8002408 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201a:	2b00      	cmp	r3, #0
 800201c:	d113      	bne.n	8002046 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	e1cc      	b.n	80023e0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204a:	2b01      	cmp	r3, #1
 800204c:	d11e      	bne.n	800208c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800205c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800205e:	b672      	cpsid	i
}
 8002060:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002086:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002088:	b662      	cpsie	i
}
 800208a:	e035      	b.n	80020f8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002090:	2b02      	cmp	r3, #2
 8002092:	d11e      	bne.n	80020d2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020a4:	b672      	cpsid	i
}
 80020a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020ce:	b662      	cpsie	i
}
 80020d0:	e012      	b.n	80020f8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80020f8:	e172      	b.n	80023e0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	2b03      	cmp	r3, #3
 8002100:	f200 811f 	bhi.w	8002342 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	2b01      	cmp	r3, #1
 800210a:	d123      	bne.n	8002154 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fc7d 	bl	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e173      	b.n	8002408 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002152:	e145      	b.n	80023e0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	2b02      	cmp	r3, #2
 800215a:	d152      	bne.n	8002202 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	2200      	movs	r2, #0
 8002164:	4906      	ldr	r1, [pc, #24]	; (8002180 <HAL_I2C_Master_Receive+0x23c>)
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 faa8 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d008      	beq.n	8002184 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e148      	b.n	8002408 <HAL_I2C_Master_Receive+0x4c4>
 8002176:	bf00      	nop
 8002178:	00100002 	.word	0x00100002
 800217c:	ffff0000 	.word	0xffff0000
 8002180:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002184:	b672      	cpsid	i
}
 8002186:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021ca:	b662      	cpsie	i
}
 80021cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002200:	e0ee      	b.n	80023e0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	2200      	movs	r2, #0
 800220a:	4981      	ldr	r1, [pc, #516]	; (8002410 <HAL_I2C_Master_Receive+0x4cc>)
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fa55 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0f5      	b.n	8002408 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002262:	4b6c      	ldr	r3, [pc, #432]	; (8002414 <HAL_I2C_Master_Receive+0x4d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	08db      	lsrs	r3, r3, #3
 8002268:	4a6b      	ldr	r2, [pc, #428]	; (8002418 <HAL_I2C_Master_Receive+0x4d4>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0a1a      	lsrs	r2, r3, #8
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00da      	lsls	r2, r3, #3
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	3b01      	subs	r3, #1
 8002280:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d118      	bne.n	80022ba <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f043 0220 	orr.w	r2, r3, #32
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80022aa:	b662      	cpsie	i
}
 80022ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e0a6      	b.n	8002408 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d1d9      	bne.n	800227c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800230a:	b662      	cpsie	i
}
 800230c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002340:	e04e      	b.n	80023e0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002344:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fb62 	bl	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e058      	b.n	8002408 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b04      	cmp	r3, #4
 8002394:	d124      	bne.n	80023e0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	2b03      	cmp	r3, #3
 800239c:	d107      	bne.n	80023ae <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f ae88 	bne.w	80020fa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3728      	adds	r7, #40	; 0x28
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	00010004 	.word	0x00010004
 8002414:	20000004 	.word	0x20000004
 8002418:	14f8b589 	.word	0x14f8b589

0800241c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	460b      	mov	r3, r1
 800242a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d006      	beq.n	8002446 <I2C_MasterRequestWrite+0x2a>
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d003      	beq.n	8002446 <I2C_MasterRequestWrite+0x2a>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002444:	d108      	bne.n	8002458 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e00b      	b.n	8002470 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	2b12      	cmp	r3, #18
 800245e:	d107      	bne.n	8002470 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f91d 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002496:	d103      	bne.n	80024a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e035      	b.n	8002510 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ac:	d108      	bne.n	80024c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	e01b      	b.n	80024f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024c0:	897b      	ldrh	r3, [r7, #10]
 80024c2:	11db      	asrs	r3, r3, #7
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 0306 	and.w	r3, r3, #6
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f063 030f 	orn	r3, r3, #15
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	490e      	ldr	r1, [pc, #56]	; (8002518 <I2C_MasterRequestWrite+0xfc>)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f966 	bl	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e010      	b.n	8002510 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <I2C_MasterRequestWrite+0x100>)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f956 	bl	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	00010008 	.word	0x00010008
 800251c:	00010002 	.word	0x00010002

08002520 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	460b      	mov	r3, r1
 800252e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002544:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d006      	beq.n	800255a <I2C_MasterRequestRead+0x3a>
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d003      	beq.n	800255a <I2C_MasterRequestRead+0x3a>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002558:	d108      	bne.n	800256c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e00b      	b.n	8002584 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	2b11      	cmp	r3, #17
 8002572:	d107      	bne.n	8002584 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002582:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f893 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00d      	beq.n	80025b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025aa:	d103      	bne.n	80025b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e079      	b.n	80026ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025c0:	d108      	bne.n	80025d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025c2:	897b      	ldrh	r3, [r7, #10]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	611a      	str	r2, [r3, #16]
 80025d2:	e05f      	b.n	8002694 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025d4:	897b      	ldrh	r3, [r7, #10]
 80025d6:	11db      	asrs	r3, r3, #7
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f003 0306 	and.w	r3, r3, #6
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f063 030f 	orn	r3, r3, #15
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4930      	ldr	r1, [pc, #192]	; (80026b4 <I2C_MasterRequestRead+0x194>)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f8dc 	bl	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e054      	b.n	80026ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4929      	ldr	r1, [pc, #164]	; (80026b8 <I2C_MasterRequestRead+0x198>)
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f8cc 	bl	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e044      	b.n	80026ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002646:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f831 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266e:	d103      	bne.n	8002678 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e017      	b.n	80026ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800267c:	897b      	ldrh	r3, [r7, #10]
 800267e:	11db      	asrs	r3, r3, #7
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 0306 	and.w	r3, r3, #6
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f063 030e 	orn	r3, r3, #14
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <I2C_MasterRequestRead+0x198>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f888 	bl	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	00010008 	.word	0x00010008
 80026b8:	00010002 	.word	0x00010002

080026bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026cc:	e048      	b.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d4:	d044      	beq.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d6:	f7fe ff45 	bl	8001564 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d302      	bcc.n	80026ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d139      	bne.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d10d      	bne.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x56>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	43da      	mvns	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	e00c      	b.n	800272c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	43da      	mvns	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4013      	ands	r3, r2
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	429a      	cmp	r2, r3
 8002730:	d116      	bne.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e023      	b.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d10d      	bne.n	8002786 <I2C_WaitOnFlagUntilTimeout+0xca>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	43da      	mvns	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	4013      	ands	r3, r2
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	e00c      	b.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	43da      	mvns	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4013      	ands	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d093      	beq.n	80026ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027be:	e071      	b.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ce:	d123      	bne.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f043 0204 	orr.w	r2, r3, #4
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e067      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800281e:	d041      	beq.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002820:	f7fe fea0 	bl	8001564 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	d302      	bcc.n	8002836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d136      	bne.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d10c      	bne.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4013      	ands	r3, r2
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	e00b      	b.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	43da      	mvns	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4013      	ands	r3, r2
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e021      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	0c1b      	lsrs	r3, r3, #16
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d10c      	bne.n	80028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4013      	ands	r3, r2
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e00b      	b.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4013      	ands	r3, r2
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	2300      	moveq	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f47f af6d 	bne.w	80027c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fc:	e034      	b.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f8e3 	bl	8002aca <I2C_IsAcknowledgeFailed>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e034      	b.n	8002978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002914:	d028      	beq.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002916:	f7fe fe25 	bl	8001564 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d11d      	bne.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b80      	cmp	r3, #128	; 0x80
 8002938:	d016      	beq.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e007      	b.n	8002978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b80      	cmp	r3, #128	; 0x80
 8002974:	d1c3      	bne.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800298c:	e034      	b.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f89b 	bl	8002aca <I2C_IsAcknowledgeFailed>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e034      	b.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a4:	d028      	beq.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a6:	f7fe fddd 	bl	8001564 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11d      	bne.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d016      	beq.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e007      	b.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d1c3      	bne.n	800298e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a1c:	e049      	b.n	8002ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d119      	bne.n	8002a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0210 	mvn.w	r2, #16
 8002a34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e030      	b.n	8002ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a60:	f7fe fd80 	bl	8001564 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d302      	bcc.n	8002a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11d      	bne.n	8002ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a80:	2b40      	cmp	r3, #64	; 0x40
 8002a82:	d016      	beq.n	8002ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e007      	b.n	8002ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d1ae      	bne.n	8002a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae0:	d11b      	bne.n	8002b1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f043 0204 	orr.w	r2, r3, #4
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e272      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 8087 	beq.w	8002c56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b48:	4b92      	ldr	r3, [pc, #584]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d00c      	beq.n	8002b6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b54:	4b8f      	ldr	r3, [pc, #572]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d112      	bne.n	8002b86 <HAL_RCC_OscConfig+0x5e>
 8002b60:	4b8c      	ldr	r3, [pc, #560]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6c:	d10b      	bne.n	8002b86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6e:	4b89      	ldr	r3, [pc, #548]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d06c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x12c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d168      	bne.n	8002c54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e24c      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCC_OscConfig+0x76>
 8002b90:	4b80      	ldr	r3, [pc, #512]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a7f      	ldr	r2, [pc, #508]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	e02e      	b.n	8002bfc <HAL_RCC_OscConfig+0xd4>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x98>
 8002ba6:	4b7b      	ldr	r3, [pc, #492]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7a      	ldr	r2, [pc, #488]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b78      	ldr	r3, [pc, #480]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a77      	ldr	r2, [pc, #476]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e01d      	b.n	8002bfc <HAL_RCC_OscConfig+0xd4>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0xbc>
 8002bca:	4b72      	ldr	r3, [pc, #456]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a71      	ldr	r2, [pc, #452]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	4b6f      	ldr	r3, [pc, #444]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a6e      	ldr	r2, [pc, #440]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e00b      	b.n	8002bfc <HAL_RCC_OscConfig+0xd4>
 8002be4:	4b6b      	ldr	r3, [pc, #428]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a6a      	ldr	r2, [pc, #424]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	4b68      	ldr	r3, [pc, #416]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a67      	ldr	r2, [pc, #412]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d013      	beq.n	8002c2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7fe fcae 	bl	8001564 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fcaa 	bl	8001564 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e200      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0xe4>
 8002c2a:	e014      	b.n	8002c56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fc9a 	bl	8001564 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe fc96 	bl	8001564 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1ec      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	4b53      	ldr	r3, [pc, #332]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x10c>
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d063      	beq.n	8002d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c62:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c6e:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d11c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x18c>
 8002c7a:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d116      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c86:	4b43      	ldr	r3, [pc, #268]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_RCC_OscConfig+0x176>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d001      	beq.n	8002c9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e1c0      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4939      	ldr	r1, [pc, #228]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	e03a      	b.n	8002d2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cbc:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7fe fc4f 	bl	8001564 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cca:	f7fe fc4b 	bl	8001564 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e1a1      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce8:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4927      	ldr	r1, [pc, #156]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]
 8002cfc:	e015      	b.n	8002d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfe:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fc2e 	bl	8001564 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fc2a 	bl	8001564 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e180      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d03a      	beq.n	8002dac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d019      	beq.n	8002d72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3e:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d44:	f7fe fc0e 	bl	8001564 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7fe fc0a 	bl	8001564 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e160      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f000 face 	bl	800330c <RCC_Delay>
 8002d70:	e01c      	b.n	8002dac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7fe fbf4 	bl	8001564 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7e:	e00f      	b.n	8002da0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d80:	f7fe fbf0 	bl	8001564 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d908      	bls.n	8002da0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e146      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	42420000 	.word	0x42420000
 8002d9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da0:	4b92      	ldr	r3, [pc, #584]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e9      	bne.n	8002d80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80a6 	beq.w	8002f06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dbe:	4b8b      	ldr	r3, [pc, #556]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10d      	bne.n	8002de6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	4b88      	ldr	r3, [pc, #544]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4a87      	ldr	r2, [pc, #540]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	61d3      	str	r3, [r2, #28]
 8002dd6:	4b85      	ldr	r3, [pc, #532]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de2:	2301      	movs	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de6:	4b82      	ldr	r3, [pc, #520]	; (8002ff0 <HAL_RCC_OscConfig+0x4c8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d118      	bne.n	8002e24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df2:	4b7f      	ldr	r3, [pc, #508]	; (8002ff0 <HAL_RCC_OscConfig+0x4c8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a7e      	ldr	r2, [pc, #504]	; (8002ff0 <HAL_RCC_OscConfig+0x4c8>)
 8002df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fbb1 	bl	8001564 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e06:	f7fe fbad 	bl	8001564 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b64      	cmp	r3, #100	; 0x64
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e103      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	4b75      	ldr	r3, [pc, #468]	; (8002ff0 <HAL_RCC_OscConfig+0x4c8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x312>
 8002e2c:	4b6f      	ldr	r3, [pc, #444]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4a6e      	ldr	r2, [pc, #440]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6213      	str	r3, [r2, #32]
 8002e38:	e02d      	b.n	8002e96 <HAL_RCC_OscConfig+0x36e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x334>
 8002e42:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4a69      	ldr	r2, [pc, #420]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6213      	str	r3, [r2, #32]
 8002e4e:	4b67      	ldr	r3, [pc, #412]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4a66      	ldr	r2, [pc, #408]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	6213      	str	r3, [r2, #32]
 8002e5a:	e01c      	b.n	8002e96 <HAL_RCC_OscConfig+0x36e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d10c      	bne.n	8002e7e <HAL_RCC_OscConfig+0x356>
 8002e64:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4a60      	ldr	r2, [pc, #384]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	6213      	str	r3, [r2, #32]
 8002e70:	4b5e      	ldr	r3, [pc, #376]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4a5d      	ldr	r2, [pc, #372]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	e00b      	b.n	8002e96 <HAL_RCC_OscConfig+0x36e>
 8002e7e:	4b5b      	ldr	r3, [pc, #364]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a5a      	ldr	r2, [pc, #360]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	6213      	str	r3, [r2, #32]
 8002e8a:	4b58      	ldr	r3, [pc, #352]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4a57      	ldr	r2, [pc, #348]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d015      	beq.n	8002eca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fb61 	bl	8001564 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe fb5d 	bl	8001564 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e0b1      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	4b4b      	ldr	r3, [pc, #300]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ee      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x37e>
 8002ec8:	e014      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fb4b 	bl	8001564 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe fb47 	bl	8001564 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e09b      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee8:	4b40      	ldr	r3, [pc, #256]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ee      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d105      	bne.n	8002f06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efa:	4b3c      	ldr	r3, [pc, #240]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	4a3b      	ldr	r2, [pc, #236]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8087 	beq.w	800301e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f10:	4b36      	ldr	r3, [pc, #216]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d061      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d146      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f24:	4b33      	ldr	r3, [pc, #204]	; (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fb1b 	bl	8001564 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f32:	f7fe fb17 	bl	8001564 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e06d      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f44:	4b29      	ldr	r3, [pc, #164]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f58:	d108      	bne.n	8002f6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f5a:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	4921      	ldr	r1, [pc, #132]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f6c:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a19      	ldr	r1, [r3, #32]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	491b      	ldr	r1, [pc, #108]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7fe faeb 	bl	8001564 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fe fae7 	bl	8001564 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e03d      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x46a>
 8002fb0:	e035      	b.n	800301e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fad4 	bl	8001564 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fe fad0 	bl	8001564 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e026      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x498>
 8002fde:	e01e      	b.n	800301e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e019      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_OscConfig+0x500>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	429a      	cmp	r2, r3
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000

0800302c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0d0      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d910      	bls.n	8003070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b67      	ldr	r3, [pc, #412]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 0207 	bic.w	r2, r3, #7
 8003056:	4965      	ldr	r1, [pc, #404]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b63      	ldr	r3, [pc, #396]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0b8      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003088:	4b59      	ldr	r3, [pc, #356]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a58      	ldr	r2, [pc, #352]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003092:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a0:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4a52      	ldr	r2, [pc, #328]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ac:	4b50      	ldr	r3, [pc, #320]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	494d      	ldr	r1, [pc, #308]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d040      	beq.n	800314c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b47      	ldr	r3, [pc, #284]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d115      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e07f      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ea:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e073      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fa:	4b3d      	ldr	r3, [pc, #244]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e06b      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310a:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4936      	ldr	r1, [pc, #216]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800311c:	f7fe fa22 	bl	8001564 <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fe fa1e 	bl	8001564 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e053      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 020c 	and.w	r2, r3, #12
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	429a      	cmp	r2, r3
 800314a:	d1eb      	bne.n	8003124 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800314c:	4b27      	ldr	r3, [pc, #156]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d210      	bcs.n	800317c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b24      	ldr	r3, [pc, #144]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 0207 	bic.w	r2, r3, #7
 8003162:	4922      	ldr	r1, [pc, #136]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e032      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4916      	ldr	r1, [pc, #88]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	490e      	ldr	r1, [pc, #56]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ba:	f000 f821 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80031be:	4602      	mov	r2, r0
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	490a      	ldr	r1, [pc, #40]	; (80031f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	5ccb      	ldrb	r3, [r1, r3]
 80031ce:	fa22 f303 	lsr.w	r3, r2, r3
 80031d2:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <HAL_RCC_ClockConfig+0x1cc>)
 80031d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_RCC_ClockConfig+0x1d0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe f980 	bl	80014e0 <HAL_InitTick>

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40022000 	.word	0x40022000
 80031f0:	40021000 	.word	0x40021000
 80031f4:	0800465c 	.word	0x0800465c
 80031f8:	20000004 	.word	0x20000004
 80031fc:	20000008 	.word	0x20000008

08003200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	2300      	movs	r3, #0
 8003214:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_RCC_GetSysClockFreq+0x94>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b04      	cmp	r3, #4
 8003228:	d002      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x30>
 800322a:	2b08      	cmp	r3, #8
 800322c:	d003      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0x36>
 800322e:	e027      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_GetSysClockFreq+0x98>)
 8003232:	613b      	str	r3, [r7, #16]
      break;
 8003234:	e027      	b.n	8003286 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	0c9b      	lsrs	r3, r3, #18
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003240:	5cd3      	ldrb	r3, [r2, r3]
 8003242:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_RCC_GetSysClockFreq+0x94>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	0c5b      	lsrs	r3, r3, #17
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800325a:	5cd3      	ldrb	r3, [r2, r3]
 800325c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <HAL_RCC_GetSysClockFreq+0x98>)
 8003262:	fb03 f202 	mul.w	r2, r3, r2
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e004      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003274:	fb02 f303 	mul.w	r3, r2, r3
 8003278:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	613b      	str	r3, [r7, #16]
      break;
 800327e:	e002      	b.n	8003286 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetSysClockFreq+0x98>)
 8003282:	613b      	str	r3, [r7, #16]
      break;
 8003284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003286:	693b      	ldr	r3, [r7, #16]
}
 8003288:	4618      	mov	r0, r3
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	007a1200 	.word	0x007a1200
 800329c:	080046d0 	.word	0x080046d0
 80032a0:	080046e0 	.word	0x080046e0
 80032a4:	003d0900 	.word	0x003d0900

080032a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ac:	4b02      	ldr	r3, [pc, #8]	; (80032b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	20000004 	.word	0x20000004

080032bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032c0:	f7ff fff2 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4903      	ldr	r1, [pc, #12]	; (80032e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	0800466c 	.word	0x0800466c

080032e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032e8:	f7ff ffde 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	0adb      	lsrs	r3, r3, #11
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4903      	ldr	r1, [pc, #12]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40021000 	.word	0x40021000
 8003308:	0800466c 	.word	0x0800466c

0800330c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <RCC_Delay+0x34>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <RCC_Delay+0x38>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0a5b      	lsrs	r3, r3, #9
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003328:	bf00      	nop
  }
  while (Delay --);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1e5a      	subs	r2, r3, #1
 800332e:	60fa      	str	r2, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f9      	bne.n	8003328 <RCC_Delay+0x1c>
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	20000004 	.word	0x20000004
 8003344:	10624dd3 	.word	0x10624dd3

08003348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e042      	b.n	80033e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fa22 	bl	80007b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	; 0x24
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800338a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f91d 	bl	80035cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	; 0x28
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b20      	cmp	r3, #32
 8003406:	d16d      	bne.n	80034e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_UART_Transmit+0x2c>
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e066      	b.n	80034e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2221      	movs	r2, #33	; 0x21
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003426:	f7fe f89d 	bl	8001564 <HAL_GetTick>
 800342a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003440:	d108      	bne.n	8003454 <HAL_UART_Transmit+0x6c>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e003      	b.n	800345c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800345c:	e02a      	b.n	80034b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2200      	movs	r2, #0
 8003466:	2180      	movs	r1, #128	; 0x80
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f840 	bl	80034ee <UART_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e036      	b.n	80034e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800348c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	3302      	adds	r3, #2
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	e007      	b.n	80034a6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	3301      	adds	r3, #1
 80034a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1cf      	bne.n	800345e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2200      	movs	r2, #0
 80034c6:	2140      	movs	r1, #64	; 0x40
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f810 	bl	80034ee <UART_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e006      	b.n	80034e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b090      	sub	sp, #64	; 0x40
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4613      	mov	r3, r2
 80034fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fe:	e050      	b.n	80035a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003506:	d04c      	beq.n	80035a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0x30>
 800350e:	f7fe f829 	bl	8001564 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800351a:	429a      	cmp	r2, r3
 800351c:	d241      	bcs.n	80035a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800353e:	637a      	str	r2, [r7, #52]	; 0x34
 8003540:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3314      	adds	r3, #20
 8003558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	e853 3f00 	ldrex	r3, [r3]
 8003560:	613b      	str	r3, [r7, #16]
   return(result);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	63bb      	str	r3, [r7, #56]	; 0x38
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3314      	adds	r3, #20
 8003570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003572:	623a      	str	r2, [r7, #32]
 8003574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	69f9      	ldr	r1, [r7, #28]
 8003578:	6a3a      	ldr	r2, [r7, #32]
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e5      	bne.n	8003552 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e00f      	b.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d09f      	beq.n	8003500 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3740      	adds	r7, #64	; 0x40
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003606:	f023 030c 	bic.w	r3, r3, #12
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	430b      	orrs	r3, r1
 8003612:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2c      	ldr	r2, [pc, #176]	; (80036e0 <UART_SetConfig+0x114>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d103      	bne.n	800363c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003634:	f7ff fe56 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	e002      	b.n	8003642 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800363c:	f7ff fe3e 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 8003640:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	009a      	lsls	r2, r3, #2
 800364c:	441a      	add	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	4a22      	ldr	r2, [pc, #136]	; (80036e4 <UART_SetConfig+0x118>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	0119      	lsls	r1, r3, #4
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009a      	lsls	r2, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fbb2 f2f3 	udiv	r2, r2, r3
 8003678:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <UART_SetConfig+0x118>)
 800367a:	fba3 0302 	umull	r0, r3, r3, r2
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2064      	movs	r0, #100	; 0x64
 8003682:	fb00 f303 	mul.w	r3, r0, r3
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	3332      	adds	r3, #50	; 0x32
 800368c:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <UART_SetConfig+0x118>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003698:	4419      	add	r1, r3
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009a      	lsls	r2, r3, #2
 80036a4:	441a      	add	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <UART_SetConfig+0x118>)
 80036b2:	fba3 0302 	umull	r0, r3, r3, r2
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	2064      	movs	r0, #100	; 0x64
 80036ba:	fb00 f303 	mul.w	r3, r0, r3
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	3332      	adds	r3, #50	; 0x32
 80036c4:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <UART_SetConfig+0x118>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	f003 020f 	and.w	r2, r3, #15
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	440a      	add	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40013800 	.word	0x40013800
 80036e4:	51eb851f 	.word	0x51eb851f

080036e8 <std>:
 80036e8:	2300      	movs	r3, #0
 80036ea:	b510      	push	{r4, lr}
 80036ec:	4604      	mov	r4, r0
 80036ee:	e9c0 3300 	strd	r3, r3, [r0]
 80036f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036f6:	6083      	str	r3, [r0, #8]
 80036f8:	8181      	strh	r1, [r0, #12]
 80036fa:	6643      	str	r3, [r0, #100]	; 0x64
 80036fc:	81c2      	strh	r2, [r0, #14]
 80036fe:	6183      	str	r3, [r0, #24]
 8003700:	4619      	mov	r1, r3
 8003702:	2208      	movs	r2, #8
 8003704:	305c      	adds	r0, #92	; 0x5c
 8003706:	f000 f8c3 	bl	8003890 <memset>
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <std+0x58>)
 800370c:	6224      	str	r4, [r4, #32]
 800370e:	6263      	str	r3, [r4, #36]	; 0x24
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <std+0x5c>)
 8003712:	62a3      	str	r3, [r4, #40]	; 0x28
 8003714:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <std+0x60>)
 8003716:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <std+0x64>)
 800371a:	6323      	str	r3, [r4, #48]	; 0x30
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <std+0x68>)
 800371e:	429c      	cmp	r4, r3
 8003720:	d006      	beq.n	8003730 <std+0x48>
 8003722:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003726:	4294      	cmp	r4, r2
 8003728:	d002      	beq.n	8003730 <std+0x48>
 800372a:	33d0      	adds	r3, #208	; 0xd0
 800372c:	429c      	cmp	r4, r3
 800372e:	d105      	bne.n	800373c <std+0x54>
 8003730:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003738:	f000 b8dc 	b.w	80038f4 <__retarget_lock_init_recursive>
 800373c:	bd10      	pop	{r4, pc}
 800373e:	bf00      	nop
 8003740:	08004151 	.word	0x08004151
 8003744:	08004173 	.word	0x08004173
 8003748:	080041ab 	.word	0x080041ab
 800374c:	080041cf 	.word	0x080041cf
 8003750:	2000024c 	.word	0x2000024c

08003754 <stdio_exit_handler>:
 8003754:	4a02      	ldr	r2, [pc, #8]	; (8003760 <stdio_exit_handler+0xc>)
 8003756:	4903      	ldr	r1, [pc, #12]	; (8003764 <stdio_exit_handler+0x10>)
 8003758:	4803      	ldr	r0, [pc, #12]	; (8003768 <stdio_exit_handler+0x14>)
 800375a:	f000 b869 	b.w	8003830 <_fwalk_sglue>
 800375e:	bf00      	nop
 8003760:	20000010 	.word	0x20000010
 8003764:	080040e9 	.word	0x080040e9
 8003768:	2000001c 	.word	0x2000001c

0800376c <cleanup_stdio>:
 800376c:	6841      	ldr	r1, [r0, #4]
 800376e:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <cleanup_stdio+0x34>)
 8003770:	b510      	push	{r4, lr}
 8003772:	4299      	cmp	r1, r3
 8003774:	4604      	mov	r4, r0
 8003776:	d001      	beq.n	800377c <cleanup_stdio+0x10>
 8003778:	f000 fcb6 	bl	80040e8 <_fflush_r>
 800377c:	68a1      	ldr	r1, [r4, #8]
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <cleanup_stdio+0x38>)
 8003780:	4299      	cmp	r1, r3
 8003782:	d002      	beq.n	800378a <cleanup_stdio+0x1e>
 8003784:	4620      	mov	r0, r4
 8003786:	f000 fcaf 	bl	80040e8 <_fflush_r>
 800378a:	68e1      	ldr	r1, [r4, #12]
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <cleanup_stdio+0x3c>)
 800378e:	4299      	cmp	r1, r3
 8003790:	d004      	beq.n	800379c <cleanup_stdio+0x30>
 8003792:	4620      	mov	r0, r4
 8003794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003798:	f000 bca6 	b.w	80040e8 <_fflush_r>
 800379c:	bd10      	pop	{r4, pc}
 800379e:	bf00      	nop
 80037a0:	2000024c 	.word	0x2000024c
 80037a4:	200002b4 	.word	0x200002b4
 80037a8:	2000031c 	.word	0x2000031c

080037ac <global_stdio_init.part.0>:
 80037ac:	b510      	push	{r4, lr}
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <global_stdio_init.part.0+0x30>)
 80037b0:	4c0b      	ldr	r4, [pc, #44]	; (80037e0 <global_stdio_init.part.0+0x34>)
 80037b2:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <global_stdio_init.part.0+0x38>)
 80037b4:	4620      	mov	r0, r4
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	2104      	movs	r1, #4
 80037ba:	2200      	movs	r2, #0
 80037bc:	f7ff ff94 	bl	80036e8 <std>
 80037c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80037c4:	2201      	movs	r2, #1
 80037c6:	2109      	movs	r1, #9
 80037c8:	f7ff ff8e 	bl	80036e8 <std>
 80037cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80037d0:	2202      	movs	r2, #2
 80037d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037d6:	2112      	movs	r1, #18
 80037d8:	f7ff bf86 	b.w	80036e8 <std>
 80037dc:	20000384 	.word	0x20000384
 80037e0:	2000024c 	.word	0x2000024c
 80037e4:	08003755 	.word	0x08003755

080037e8 <__sfp_lock_acquire>:
 80037e8:	4801      	ldr	r0, [pc, #4]	; (80037f0 <__sfp_lock_acquire+0x8>)
 80037ea:	f000 b884 	b.w	80038f6 <__retarget_lock_acquire_recursive>
 80037ee:	bf00      	nop
 80037f0:	20000389 	.word	0x20000389

080037f4 <__sfp_lock_release>:
 80037f4:	4801      	ldr	r0, [pc, #4]	; (80037fc <__sfp_lock_release+0x8>)
 80037f6:	f000 b87f 	b.w	80038f8 <__retarget_lock_release_recursive>
 80037fa:	bf00      	nop
 80037fc:	20000389 	.word	0x20000389

08003800 <__sinit>:
 8003800:	b510      	push	{r4, lr}
 8003802:	4604      	mov	r4, r0
 8003804:	f7ff fff0 	bl	80037e8 <__sfp_lock_acquire>
 8003808:	6a23      	ldr	r3, [r4, #32]
 800380a:	b11b      	cbz	r3, 8003814 <__sinit+0x14>
 800380c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003810:	f7ff bff0 	b.w	80037f4 <__sfp_lock_release>
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <__sinit+0x28>)
 8003816:	6223      	str	r3, [r4, #32]
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <__sinit+0x2c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f5      	bne.n	800380c <__sinit+0xc>
 8003820:	f7ff ffc4 	bl	80037ac <global_stdio_init.part.0>
 8003824:	e7f2      	b.n	800380c <__sinit+0xc>
 8003826:	bf00      	nop
 8003828:	0800376d 	.word	0x0800376d
 800382c:	20000384 	.word	0x20000384

08003830 <_fwalk_sglue>:
 8003830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003834:	4607      	mov	r7, r0
 8003836:	4688      	mov	r8, r1
 8003838:	4614      	mov	r4, r2
 800383a:	2600      	movs	r6, #0
 800383c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003840:	f1b9 0901 	subs.w	r9, r9, #1
 8003844:	d505      	bpl.n	8003852 <_fwalk_sglue+0x22>
 8003846:	6824      	ldr	r4, [r4, #0]
 8003848:	2c00      	cmp	r4, #0
 800384a:	d1f7      	bne.n	800383c <_fwalk_sglue+0xc>
 800384c:	4630      	mov	r0, r6
 800384e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003852:	89ab      	ldrh	r3, [r5, #12]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d907      	bls.n	8003868 <_fwalk_sglue+0x38>
 8003858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800385c:	3301      	adds	r3, #1
 800385e:	d003      	beq.n	8003868 <_fwalk_sglue+0x38>
 8003860:	4629      	mov	r1, r5
 8003862:	4638      	mov	r0, r7
 8003864:	47c0      	blx	r8
 8003866:	4306      	orrs	r6, r0
 8003868:	3568      	adds	r5, #104	; 0x68
 800386a:	e7e9      	b.n	8003840 <_fwalk_sglue+0x10>

0800386c <iprintf>:
 800386c:	b40f      	push	{r0, r1, r2, r3}
 800386e:	b507      	push	{r0, r1, r2, lr}
 8003870:	4906      	ldr	r1, [pc, #24]	; (800388c <iprintf+0x20>)
 8003872:	ab04      	add	r3, sp, #16
 8003874:	6808      	ldr	r0, [r1, #0]
 8003876:	f853 2b04 	ldr.w	r2, [r3], #4
 800387a:	6881      	ldr	r1, [r0, #8]
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	f000 f863 	bl	8003948 <_vfiprintf_r>
 8003882:	b003      	add	sp, #12
 8003884:	f85d eb04 	ldr.w	lr, [sp], #4
 8003888:	b004      	add	sp, #16
 800388a:	4770      	bx	lr
 800388c:	20000068 	.word	0x20000068

08003890 <memset>:
 8003890:	4603      	mov	r3, r0
 8003892:	4402      	add	r2, r0
 8003894:	4293      	cmp	r3, r2
 8003896:	d100      	bne.n	800389a <memset+0xa>
 8003898:	4770      	bx	lr
 800389a:	f803 1b01 	strb.w	r1, [r3], #1
 800389e:	e7f9      	b.n	8003894 <memset+0x4>

080038a0 <__errno>:
 80038a0:	4b01      	ldr	r3, [pc, #4]	; (80038a8 <__errno+0x8>)
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000068 	.word	0x20000068

080038ac <__libc_init_array>:
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	2600      	movs	r6, #0
 80038b0:	4d0c      	ldr	r5, [pc, #48]	; (80038e4 <__libc_init_array+0x38>)
 80038b2:	4c0d      	ldr	r4, [pc, #52]	; (80038e8 <__libc_init_array+0x3c>)
 80038b4:	1b64      	subs	r4, r4, r5
 80038b6:	10a4      	asrs	r4, r4, #2
 80038b8:	42a6      	cmp	r6, r4
 80038ba:	d109      	bne.n	80038d0 <__libc_init_array+0x24>
 80038bc:	f000 fe50 	bl	8004560 <_init>
 80038c0:	2600      	movs	r6, #0
 80038c2:	4d0a      	ldr	r5, [pc, #40]	; (80038ec <__libc_init_array+0x40>)
 80038c4:	4c0a      	ldr	r4, [pc, #40]	; (80038f0 <__libc_init_array+0x44>)
 80038c6:	1b64      	subs	r4, r4, r5
 80038c8:	10a4      	asrs	r4, r4, #2
 80038ca:	42a6      	cmp	r6, r4
 80038cc:	d105      	bne.n	80038da <__libc_init_array+0x2e>
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
 80038d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d4:	4798      	blx	r3
 80038d6:	3601      	adds	r6, #1
 80038d8:	e7ee      	b.n	80038b8 <__libc_init_array+0xc>
 80038da:	f855 3b04 	ldr.w	r3, [r5], #4
 80038de:	4798      	blx	r3
 80038e0:	3601      	adds	r6, #1
 80038e2:	e7f2      	b.n	80038ca <__libc_init_array+0x1e>
 80038e4:	08004718 	.word	0x08004718
 80038e8:	08004718 	.word	0x08004718
 80038ec:	08004718 	.word	0x08004718
 80038f0:	0800471c 	.word	0x0800471c

080038f4 <__retarget_lock_init_recursive>:
 80038f4:	4770      	bx	lr

080038f6 <__retarget_lock_acquire_recursive>:
 80038f6:	4770      	bx	lr

080038f8 <__retarget_lock_release_recursive>:
 80038f8:	4770      	bx	lr

080038fa <__sfputc_r>:
 80038fa:	6893      	ldr	r3, [r2, #8]
 80038fc:	b410      	push	{r4}
 80038fe:	3b01      	subs	r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	6093      	str	r3, [r2, #8]
 8003904:	da07      	bge.n	8003916 <__sfputc_r+0x1c>
 8003906:	6994      	ldr	r4, [r2, #24]
 8003908:	42a3      	cmp	r3, r4
 800390a:	db01      	blt.n	8003910 <__sfputc_r+0x16>
 800390c:	290a      	cmp	r1, #10
 800390e:	d102      	bne.n	8003916 <__sfputc_r+0x1c>
 8003910:	bc10      	pop	{r4}
 8003912:	f000 bc60 	b.w	80041d6 <__swbuf_r>
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	1c58      	adds	r0, r3, #1
 800391a:	6010      	str	r0, [r2, #0]
 800391c:	7019      	strb	r1, [r3, #0]
 800391e:	4608      	mov	r0, r1
 8003920:	bc10      	pop	{r4}
 8003922:	4770      	bx	lr

08003924 <__sfputs_r>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	4606      	mov	r6, r0
 8003928:	460f      	mov	r7, r1
 800392a:	4614      	mov	r4, r2
 800392c:	18d5      	adds	r5, r2, r3
 800392e:	42ac      	cmp	r4, r5
 8003930:	d101      	bne.n	8003936 <__sfputs_r+0x12>
 8003932:	2000      	movs	r0, #0
 8003934:	e007      	b.n	8003946 <__sfputs_r+0x22>
 8003936:	463a      	mov	r2, r7
 8003938:	4630      	mov	r0, r6
 800393a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800393e:	f7ff ffdc 	bl	80038fa <__sfputc_r>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	d1f3      	bne.n	800392e <__sfputs_r+0xa>
 8003946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003948 <_vfiprintf_r>:
 8003948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394c:	460d      	mov	r5, r1
 800394e:	4614      	mov	r4, r2
 8003950:	4698      	mov	r8, r3
 8003952:	4606      	mov	r6, r0
 8003954:	b09d      	sub	sp, #116	; 0x74
 8003956:	b118      	cbz	r0, 8003960 <_vfiprintf_r+0x18>
 8003958:	6a03      	ldr	r3, [r0, #32]
 800395a:	b90b      	cbnz	r3, 8003960 <_vfiprintf_r+0x18>
 800395c:	f7ff ff50 	bl	8003800 <__sinit>
 8003960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003962:	07d9      	lsls	r1, r3, #31
 8003964:	d405      	bmi.n	8003972 <_vfiprintf_r+0x2a>
 8003966:	89ab      	ldrh	r3, [r5, #12]
 8003968:	059a      	lsls	r2, r3, #22
 800396a:	d402      	bmi.n	8003972 <_vfiprintf_r+0x2a>
 800396c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800396e:	f7ff ffc2 	bl	80038f6 <__retarget_lock_acquire_recursive>
 8003972:	89ab      	ldrh	r3, [r5, #12]
 8003974:	071b      	lsls	r3, r3, #28
 8003976:	d501      	bpl.n	800397c <_vfiprintf_r+0x34>
 8003978:	692b      	ldr	r3, [r5, #16]
 800397a:	b99b      	cbnz	r3, 80039a4 <_vfiprintf_r+0x5c>
 800397c:	4629      	mov	r1, r5
 800397e:	4630      	mov	r0, r6
 8003980:	f000 fc66 	bl	8004250 <__swsetup_r>
 8003984:	b170      	cbz	r0, 80039a4 <_vfiprintf_r+0x5c>
 8003986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003988:	07dc      	lsls	r4, r3, #31
 800398a:	d504      	bpl.n	8003996 <_vfiprintf_r+0x4e>
 800398c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003990:	b01d      	add	sp, #116	; 0x74
 8003992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003996:	89ab      	ldrh	r3, [r5, #12]
 8003998:	0598      	lsls	r0, r3, #22
 800399a:	d4f7      	bmi.n	800398c <_vfiprintf_r+0x44>
 800399c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800399e:	f7ff ffab 	bl	80038f8 <__retarget_lock_release_recursive>
 80039a2:	e7f3      	b.n	800398c <_vfiprintf_r+0x44>
 80039a4:	2300      	movs	r3, #0
 80039a6:	9309      	str	r3, [sp, #36]	; 0x24
 80039a8:	2320      	movs	r3, #32
 80039aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ae:	2330      	movs	r3, #48	; 0x30
 80039b0:	f04f 0901 	mov.w	r9, #1
 80039b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003b68 <_vfiprintf_r+0x220>
 80039bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039c0:	4623      	mov	r3, r4
 80039c2:	469a      	mov	sl, r3
 80039c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c8:	b10a      	cbz	r2, 80039ce <_vfiprintf_r+0x86>
 80039ca:	2a25      	cmp	r2, #37	; 0x25
 80039cc:	d1f9      	bne.n	80039c2 <_vfiprintf_r+0x7a>
 80039ce:	ebba 0b04 	subs.w	fp, sl, r4
 80039d2:	d00b      	beq.n	80039ec <_vfiprintf_r+0xa4>
 80039d4:	465b      	mov	r3, fp
 80039d6:	4622      	mov	r2, r4
 80039d8:	4629      	mov	r1, r5
 80039da:	4630      	mov	r0, r6
 80039dc:	f7ff ffa2 	bl	8003924 <__sfputs_r>
 80039e0:	3001      	adds	r0, #1
 80039e2:	f000 80a9 	beq.w	8003b38 <_vfiprintf_r+0x1f0>
 80039e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039e8:	445a      	add	r2, fp
 80039ea:	9209      	str	r2, [sp, #36]	; 0x24
 80039ec:	f89a 3000 	ldrb.w	r3, [sl]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a1 	beq.w	8003b38 <_vfiprintf_r+0x1f0>
 80039f6:	2300      	movs	r3, #0
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a00:	f10a 0a01 	add.w	sl, sl, #1
 8003a04:	9304      	str	r3, [sp, #16]
 8003a06:	9307      	str	r3, [sp, #28]
 8003a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8003a0e:	4654      	mov	r4, sl
 8003a10:	2205      	movs	r2, #5
 8003a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a16:	4854      	ldr	r0, [pc, #336]	; (8003b68 <_vfiprintf_r+0x220>)
 8003a18:	f000 fd4c 	bl	80044b4 <memchr>
 8003a1c:	9a04      	ldr	r2, [sp, #16]
 8003a1e:	b9d8      	cbnz	r0, 8003a58 <_vfiprintf_r+0x110>
 8003a20:	06d1      	lsls	r1, r2, #27
 8003a22:	bf44      	itt	mi
 8003a24:	2320      	movmi	r3, #32
 8003a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a2a:	0713      	lsls	r3, r2, #28
 8003a2c:	bf44      	itt	mi
 8003a2e:	232b      	movmi	r3, #43	; 0x2b
 8003a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a34:	f89a 3000 	ldrb.w	r3, [sl]
 8003a38:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3a:	d015      	beq.n	8003a68 <_vfiprintf_r+0x120>
 8003a3c:	4654      	mov	r4, sl
 8003a3e:	2000      	movs	r0, #0
 8003a40:	f04f 0c0a 	mov.w	ip, #10
 8003a44:	9a07      	ldr	r2, [sp, #28]
 8003a46:	4621      	mov	r1, r4
 8003a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4c:	3b30      	subs	r3, #48	; 0x30
 8003a4e:	2b09      	cmp	r3, #9
 8003a50:	d94d      	bls.n	8003aee <_vfiprintf_r+0x1a6>
 8003a52:	b1b0      	cbz	r0, 8003a82 <_vfiprintf_r+0x13a>
 8003a54:	9207      	str	r2, [sp, #28]
 8003a56:	e014      	b.n	8003a82 <_vfiprintf_r+0x13a>
 8003a58:	eba0 0308 	sub.w	r3, r0, r8
 8003a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8003a60:	4313      	orrs	r3, r2
 8003a62:	46a2      	mov	sl, r4
 8003a64:	9304      	str	r3, [sp, #16]
 8003a66:	e7d2      	b.n	8003a0e <_vfiprintf_r+0xc6>
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	1d19      	adds	r1, r3, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	9103      	str	r1, [sp, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bfbb      	ittet	lt
 8003a74:	425b      	neglt	r3, r3
 8003a76:	f042 0202 	orrlt.w	r2, r2, #2
 8003a7a:	9307      	strge	r3, [sp, #28]
 8003a7c:	9307      	strlt	r3, [sp, #28]
 8003a7e:	bfb8      	it	lt
 8003a80:	9204      	strlt	r2, [sp, #16]
 8003a82:	7823      	ldrb	r3, [r4, #0]
 8003a84:	2b2e      	cmp	r3, #46	; 0x2e
 8003a86:	d10c      	bne.n	8003aa2 <_vfiprintf_r+0x15a>
 8003a88:	7863      	ldrb	r3, [r4, #1]
 8003a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8c:	d134      	bne.n	8003af8 <_vfiprintf_r+0x1b0>
 8003a8e:	9b03      	ldr	r3, [sp, #12]
 8003a90:	3402      	adds	r4, #2
 8003a92:	1d1a      	adds	r2, r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	9203      	str	r2, [sp, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bfb8      	it	lt
 8003a9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003aa0:	9305      	str	r3, [sp, #20]
 8003aa2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b6c <_vfiprintf_r+0x224>
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	4650      	mov	r0, sl
 8003aaa:	7821      	ldrb	r1, [r4, #0]
 8003aac:	f000 fd02 	bl	80044b4 <memchr>
 8003ab0:	b138      	cbz	r0, 8003ac2 <_vfiprintf_r+0x17a>
 8003ab2:	2240      	movs	r2, #64	; 0x40
 8003ab4:	9b04      	ldr	r3, [sp, #16]
 8003ab6:	eba0 000a 	sub.w	r0, r0, sl
 8003aba:	4082      	lsls	r2, r0
 8003abc:	4313      	orrs	r3, r2
 8003abe:	3401      	adds	r4, #1
 8003ac0:	9304      	str	r3, [sp, #16]
 8003ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac6:	2206      	movs	r2, #6
 8003ac8:	4829      	ldr	r0, [pc, #164]	; (8003b70 <_vfiprintf_r+0x228>)
 8003aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ace:	f000 fcf1 	bl	80044b4 <memchr>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d03f      	beq.n	8003b56 <_vfiprintf_r+0x20e>
 8003ad6:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <_vfiprintf_r+0x22c>)
 8003ad8:	bb1b      	cbnz	r3, 8003b22 <_vfiprintf_r+0x1da>
 8003ada:	9b03      	ldr	r3, [sp, #12]
 8003adc:	3307      	adds	r3, #7
 8003ade:	f023 0307 	bic.w	r3, r3, #7
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	9303      	str	r3, [sp, #12]
 8003ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae8:	443b      	add	r3, r7
 8003aea:	9309      	str	r3, [sp, #36]	; 0x24
 8003aec:	e768      	b.n	80039c0 <_vfiprintf_r+0x78>
 8003aee:	460c      	mov	r4, r1
 8003af0:	2001      	movs	r0, #1
 8003af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af6:	e7a6      	b.n	8003a46 <_vfiprintf_r+0xfe>
 8003af8:	2300      	movs	r3, #0
 8003afa:	f04f 0c0a 	mov.w	ip, #10
 8003afe:	4619      	mov	r1, r3
 8003b00:	3401      	adds	r4, #1
 8003b02:	9305      	str	r3, [sp, #20]
 8003b04:	4620      	mov	r0, r4
 8003b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b0a:	3a30      	subs	r2, #48	; 0x30
 8003b0c:	2a09      	cmp	r2, #9
 8003b0e:	d903      	bls.n	8003b18 <_vfiprintf_r+0x1d0>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0c6      	beq.n	8003aa2 <_vfiprintf_r+0x15a>
 8003b14:	9105      	str	r1, [sp, #20]
 8003b16:	e7c4      	b.n	8003aa2 <_vfiprintf_r+0x15a>
 8003b18:	4604      	mov	r4, r0
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b20:	e7f0      	b.n	8003b04 <_vfiprintf_r+0x1bc>
 8003b22:	ab03      	add	r3, sp, #12
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	462a      	mov	r2, r5
 8003b28:	4630      	mov	r0, r6
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <_vfiprintf_r+0x230>)
 8003b2c:	a904      	add	r1, sp, #16
 8003b2e:	f3af 8000 	nop.w
 8003b32:	4607      	mov	r7, r0
 8003b34:	1c78      	adds	r0, r7, #1
 8003b36:	d1d6      	bne.n	8003ae6 <_vfiprintf_r+0x19e>
 8003b38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b3a:	07d9      	lsls	r1, r3, #31
 8003b3c:	d405      	bmi.n	8003b4a <_vfiprintf_r+0x202>
 8003b3e:	89ab      	ldrh	r3, [r5, #12]
 8003b40:	059a      	lsls	r2, r3, #22
 8003b42:	d402      	bmi.n	8003b4a <_vfiprintf_r+0x202>
 8003b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b46:	f7ff fed7 	bl	80038f8 <__retarget_lock_release_recursive>
 8003b4a:	89ab      	ldrh	r3, [r5, #12]
 8003b4c:	065b      	lsls	r3, r3, #25
 8003b4e:	f53f af1d 	bmi.w	800398c <_vfiprintf_r+0x44>
 8003b52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b54:	e71c      	b.n	8003990 <_vfiprintf_r+0x48>
 8003b56:	ab03      	add	r3, sp, #12
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	462a      	mov	r2, r5
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <_vfiprintf_r+0x230>)
 8003b60:	a904      	add	r1, sp, #16
 8003b62:	f000 f91d 	bl	8003da0 <_printf_i>
 8003b66:	e7e4      	b.n	8003b32 <_vfiprintf_r+0x1ea>
 8003b68:	080046e2 	.word	0x080046e2
 8003b6c:	080046e8 	.word	0x080046e8
 8003b70:	080046ec 	.word	0x080046ec
 8003b74:	00000000 	.word	0x00000000
 8003b78:	08003925 	.word	0x08003925

08003b7c <sbrk_aligned>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	4e0e      	ldr	r6, [pc, #56]	; (8003bb8 <sbrk_aligned+0x3c>)
 8003b80:	460c      	mov	r4, r1
 8003b82:	6831      	ldr	r1, [r6, #0]
 8003b84:	4605      	mov	r5, r0
 8003b86:	b911      	cbnz	r1, 8003b8e <sbrk_aligned+0x12>
 8003b88:	f000 fc72 	bl	8004470 <_sbrk_r>
 8003b8c:	6030      	str	r0, [r6, #0]
 8003b8e:	4621      	mov	r1, r4
 8003b90:	4628      	mov	r0, r5
 8003b92:	f000 fc6d 	bl	8004470 <_sbrk_r>
 8003b96:	1c43      	adds	r3, r0, #1
 8003b98:	d00a      	beq.n	8003bb0 <sbrk_aligned+0x34>
 8003b9a:	1cc4      	adds	r4, r0, #3
 8003b9c:	f024 0403 	bic.w	r4, r4, #3
 8003ba0:	42a0      	cmp	r0, r4
 8003ba2:	d007      	beq.n	8003bb4 <sbrk_aligned+0x38>
 8003ba4:	1a21      	subs	r1, r4, r0
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f000 fc62 	bl	8004470 <_sbrk_r>
 8003bac:	3001      	adds	r0, #1
 8003bae:	d101      	bne.n	8003bb4 <sbrk_aligned+0x38>
 8003bb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	20000390 	.word	0x20000390

08003bbc <_malloc_r>:
 8003bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc0:	1ccd      	adds	r5, r1, #3
 8003bc2:	f025 0503 	bic.w	r5, r5, #3
 8003bc6:	3508      	adds	r5, #8
 8003bc8:	2d0c      	cmp	r5, #12
 8003bca:	bf38      	it	cc
 8003bcc:	250c      	movcc	r5, #12
 8003bce:	2d00      	cmp	r5, #0
 8003bd0:	4607      	mov	r7, r0
 8003bd2:	db01      	blt.n	8003bd8 <_malloc_r+0x1c>
 8003bd4:	42a9      	cmp	r1, r5
 8003bd6:	d905      	bls.n	8003be4 <_malloc_r+0x28>
 8003bd8:	230c      	movs	r3, #12
 8003bda:	2600      	movs	r6, #0
 8003bdc:	603b      	str	r3, [r7, #0]
 8003bde:	4630      	mov	r0, r6
 8003be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003be4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003cb8 <_malloc_r+0xfc>
 8003be8:	f000 faa6 	bl	8004138 <__malloc_lock>
 8003bec:	f8d8 3000 	ldr.w	r3, [r8]
 8003bf0:	461c      	mov	r4, r3
 8003bf2:	bb5c      	cbnz	r4, 8003c4c <_malloc_r+0x90>
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4638      	mov	r0, r7
 8003bf8:	f7ff ffc0 	bl	8003b7c <sbrk_aligned>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	4604      	mov	r4, r0
 8003c00:	d155      	bne.n	8003cae <_malloc_r+0xf2>
 8003c02:	f8d8 4000 	ldr.w	r4, [r8]
 8003c06:	4626      	mov	r6, r4
 8003c08:	2e00      	cmp	r6, #0
 8003c0a:	d145      	bne.n	8003c98 <_malloc_r+0xdc>
 8003c0c:	2c00      	cmp	r4, #0
 8003c0e:	d048      	beq.n	8003ca2 <_malloc_r+0xe6>
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	4631      	mov	r1, r6
 8003c14:	4638      	mov	r0, r7
 8003c16:	eb04 0903 	add.w	r9, r4, r3
 8003c1a:	f000 fc29 	bl	8004470 <_sbrk_r>
 8003c1e:	4581      	cmp	r9, r0
 8003c20:	d13f      	bne.n	8003ca2 <_malloc_r+0xe6>
 8003c22:	6821      	ldr	r1, [r4, #0]
 8003c24:	4638      	mov	r0, r7
 8003c26:	1a6d      	subs	r5, r5, r1
 8003c28:	4629      	mov	r1, r5
 8003c2a:	f7ff ffa7 	bl	8003b7c <sbrk_aligned>
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d037      	beq.n	8003ca2 <_malloc_r+0xe6>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	442b      	add	r3, r5
 8003c36:	6023      	str	r3, [r4, #0]
 8003c38:	f8d8 3000 	ldr.w	r3, [r8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d038      	beq.n	8003cb2 <_malloc_r+0xf6>
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	42a2      	cmp	r2, r4
 8003c44:	d12b      	bne.n	8003c9e <_malloc_r+0xe2>
 8003c46:	2200      	movs	r2, #0
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	e00f      	b.n	8003c6c <_malloc_r+0xb0>
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	1b52      	subs	r2, r2, r5
 8003c50:	d41f      	bmi.n	8003c92 <_malloc_r+0xd6>
 8003c52:	2a0b      	cmp	r2, #11
 8003c54:	d917      	bls.n	8003c86 <_malloc_r+0xca>
 8003c56:	1961      	adds	r1, r4, r5
 8003c58:	42a3      	cmp	r3, r4
 8003c5a:	6025      	str	r5, [r4, #0]
 8003c5c:	bf18      	it	ne
 8003c5e:	6059      	strne	r1, [r3, #4]
 8003c60:	6863      	ldr	r3, [r4, #4]
 8003c62:	bf08      	it	eq
 8003c64:	f8c8 1000 	streq.w	r1, [r8]
 8003c68:	5162      	str	r2, [r4, r5]
 8003c6a:	604b      	str	r3, [r1, #4]
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	f104 060b 	add.w	r6, r4, #11
 8003c72:	f000 fa67 	bl	8004144 <__malloc_unlock>
 8003c76:	f026 0607 	bic.w	r6, r6, #7
 8003c7a:	1d23      	adds	r3, r4, #4
 8003c7c:	1af2      	subs	r2, r6, r3
 8003c7e:	d0ae      	beq.n	8003bde <_malloc_r+0x22>
 8003c80:	1b9b      	subs	r3, r3, r6
 8003c82:	50a3      	str	r3, [r4, r2]
 8003c84:	e7ab      	b.n	8003bde <_malloc_r+0x22>
 8003c86:	42a3      	cmp	r3, r4
 8003c88:	6862      	ldr	r2, [r4, #4]
 8003c8a:	d1dd      	bne.n	8003c48 <_malloc_r+0x8c>
 8003c8c:	f8c8 2000 	str.w	r2, [r8]
 8003c90:	e7ec      	b.n	8003c6c <_malloc_r+0xb0>
 8003c92:	4623      	mov	r3, r4
 8003c94:	6864      	ldr	r4, [r4, #4]
 8003c96:	e7ac      	b.n	8003bf2 <_malloc_r+0x36>
 8003c98:	4634      	mov	r4, r6
 8003c9a:	6876      	ldr	r6, [r6, #4]
 8003c9c:	e7b4      	b.n	8003c08 <_malloc_r+0x4c>
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	e7cc      	b.n	8003c3c <_malloc_r+0x80>
 8003ca2:	230c      	movs	r3, #12
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	f000 fa4c 	bl	8004144 <__malloc_unlock>
 8003cac:	e797      	b.n	8003bde <_malloc_r+0x22>
 8003cae:	6025      	str	r5, [r4, #0]
 8003cb0:	e7dc      	b.n	8003c6c <_malloc_r+0xb0>
 8003cb2:	605b      	str	r3, [r3, #4]
 8003cb4:	deff      	udf	#255	; 0xff
 8003cb6:	bf00      	nop
 8003cb8:	2000038c 	.word	0x2000038c

08003cbc <_printf_common>:
 8003cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc0:	4616      	mov	r6, r2
 8003cc2:	4699      	mov	r9, r3
 8003cc4:	688a      	ldr	r2, [r1, #8]
 8003cc6:	690b      	ldr	r3, [r1, #16]
 8003cc8:	4607      	mov	r7, r0
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	bfb8      	it	lt
 8003cce:	4613      	movlt	r3, r2
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cdc:	b10a      	cbz	r2, 8003ce2 <_printf_common+0x26>
 8003cde:	3301      	adds	r3, #1
 8003ce0:	6033      	str	r3, [r6, #0]
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	0699      	lsls	r1, r3, #26
 8003ce6:	bf42      	ittt	mi
 8003ce8:	6833      	ldrmi	r3, [r6, #0]
 8003cea:	3302      	addmi	r3, #2
 8003cec:	6033      	strmi	r3, [r6, #0]
 8003cee:	6825      	ldr	r5, [r4, #0]
 8003cf0:	f015 0506 	ands.w	r5, r5, #6
 8003cf4:	d106      	bne.n	8003d04 <_printf_common+0x48>
 8003cf6:	f104 0a19 	add.w	sl, r4, #25
 8003cfa:	68e3      	ldr	r3, [r4, #12]
 8003cfc:	6832      	ldr	r2, [r6, #0]
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	42ab      	cmp	r3, r5
 8003d02:	dc2b      	bgt.n	8003d5c <_printf_common+0xa0>
 8003d04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d08:	1e13      	subs	r3, r2, #0
 8003d0a:	6822      	ldr	r2, [r4, #0]
 8003d0c:	bf18      	it	ne
 8003d0e:	2301      	movne	r3, #1
 8003d10:	0692      	lsls	r2, r2, #26
 8003d12:	d430      	bmi.n	8003d76 <_printf_common+0xba>
 8003d14:	4649      	mov	r1, r9
 8003d16:	4638      	mov	r0, r7
 8003d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d1c:	47c0      	blx	r8
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d023      	beq.n	8003d6a <_printf_common+0xae>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	6922      	ldr	r2, [r4, #16]
 8003d26:	f003 0306 	and.w	r3, r3, #6
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	bf14      	ite	ne
 8003d2e:	2500      	movne	r5, #0
 8003d30:	6833      	ldreq	r3, [r6, #0]
 8003d32:	f04f 0600 	mov.w	r6, #0
 8003d36:	bf08      	it	eq
 8003d38:	68e5      	ldreq	r5, [r4, #12]
 8003d3a:	f104 041a 	add.w	r4, r4, #26
 8003d3e:	bf08      	it	eq
 8003d40:	1aed      	subeq	r5, r5, r3
 8003d42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d46:	bf08      	it	eq
 8003d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bfc4      	itt	gt
 8003d50:	1a9b      	subgt	r3, r3, r2
 8003d52:	18ed      	addgt	r5, r5, r3
 8003d54:	42b5      	cmp	r5, r6
 8003d56:	d11a      	bne.n	8003d8e <_printf_common+0xd2>
 8003d58:	2000      	movs	r0, #0
 8003d5a:	e008      	b.n	8003d6e <_printf_common+0xb2>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	4652      	mov	r2, sl
 8003d60:	4649      	mov	r1, r9
 8003d62:	4638      	mov	r0, r7
 8003d64:	47c0      	blx	r8
 8003d66:	3001      	adds	r0, #1
 8003d68:	d103      	bne.n	8003d72 <_printf_common+0xb6>
 8003d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d72:	3501      	adds	r5, #1
 8003d74:	e7c1      	b.n	8003cfa <_printf_common+0x3e>
 8003d76:	2030      	movs	r0, #48	; 0x30
 8003d78:	18e1      	adds	r1, r4, r3
 8003d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d84:	4422      	add	r2, r4
 8003d86:	3302      	adds	r3, #2
 8003d88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d8c:	e7c2      	b.n	8003d14 <_printf_common+0x58>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	4622      	mov	r2, r4
 8003d92:	4649      	mov	r1, r9
 8003d94:	4638      	mov	r0, r7
 8003d96:	47c0      	blx	r8
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d0e6      	beq.n	8003d6a <_printf_common+0xae>
 8003d9c:	3601      	adds	r6, #1
 8003d9e:	e7d9      	b.n	8003d54 <_printf_common+0x98>

08003da0 <_printf_i>:
 8003da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003da4:	7e0f      	ldrb	r7, [r1, #24]
 8003da6:	4691      	mov	r9, r2
 8003da8:	2f78      	cmp	r7, #120	; 0x78
 8003daa:	4680      	mov	r8, r0
 8003dac:	460c      	mov	r4, r1
 8003dae:	469a      	mov	sl, r3
 8003db0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003db2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003db6:	d807      	bhi.n	8003dc8 <_printf_i+0x28>
 8003db8:	2f62      	cmp	r7, #98	; 0x62
 8003dba:	d80a      	bhi.n	8003dd2 <_printf_i+0x32>
 8003dbc:	2f00      	cmp	r7, #0
 8003dbe:	f000 80d5 	beq.w	8003f6c <_printf_i+0x1cc>
 8003dc2:	2f58      	cmp	r7, #88	; 0x58
 8003dc4:	f000 80c1 	beq.w	8003f4a <_printf_i+0x1aa>
 8003dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dd0:	e03a      	b.n	8003e48 <_printf_i+0xa8>
 8003dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dd6:	2b15      	cmp	r3, #21
 8003dd8:	d8f6      	bhi.n	8003dc8 <_printf_i+0x28>
 8003dda:	a101      	add	r1, pc, #4	; (adr r1, 8003de0 <_printf_i+0x40>)
 8003ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003de0:	08003e39 	.word	0x08003e39
 8003de4:	08003e4d 	.word	0x08003e4d
 8003de8:	08003dc9 	.word	0x08003dc9
 8003dec:	08003dc9 	.word	0x08003dc9
 8003df0:	08003dc9 	.word	0x08003dc9
 8003df4:	08003dc9 	.word	0x08003dc9
 8003df8:	08003e4d 	.word	0x08003e4d
 8003dfc:	08003dc9 	.word	0x08003dc9
 8003e00:	08003dc9 	.word	0x08003dc9
 8003e04:	08003dc9 	.word	0x08003dc9
 8003e08:	08003dc9 	.word	0x08003dc9
 8003e0c:	08003f53 	.word	0x08003f53
 8003e10:	08003e79 	.word	0x08003e79
 8003e14:	08003f0d 	.word	0x08003f0d
 8003e18:	08003dc9 	.word	0x08003dc9
 8003e1c:	08003dc9 	.word	0x08003dc9
 8003e20:	08003f75 	.word	0x08003f75
 8003e24:	08003dc9 	.word	0x08003dc9
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003dc9 	.word	0x08003dc9
 8003e30:	08003dc9 	.word	0x08003dc9
 8003e34:	08003f15 	.word	0x08003f15
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	1d1a      	adds	r2, r3, #4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	602a      	str	r2, [r5, #0]
 8003e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0a0      	b.n	8003f8e <_printf_i+0x1ee>
 8003e4c:	6820      	ldr	r0, [r4, #0]
 8003e4e:	682b      	ldr	r3, [r5, #0]
 8003e50:	0607      	lsls	r7, r0, #24
 8003e52:	f103 0104 	add.w	r1, r3, #4
 8003e56:	6029      	str	r1, [r5, #0]
 8003e58:	d501      	bpl.n	8003e5e <_printf_i+0xbe>
 8003e5a:	681e      	ldr	r6, [r3, #0]
 8003e5c:	e003      	b.n	8003e66 <_printf_i+0xc6>
 8003e5e:	0646      	lsls	r6, r0, #25
 8003e60:	d5fb      	bpl.n	8003e5a <_printf_i+0xba>
 8003e62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e66:	2e00      	cmp	r6, #0
 8003e68:	da03      	bge.n	8003e72 <_printf_i+0xd2>
 8003e6a:	232d      	movs	r3, #45	; 0x2d
 8003e6c:	4276      	negs	r6, r6
 8003e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e72:	230a      	movs	r3, #10
 8003e74:	4859      	ldr	r0, [pc, #356]	; (8003fdc <_printf_i+0x23c>)
 8003e76:	e012      	b.n	8003e9e <_printf_i+0xfe>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	1d19      	adds	r1, r3, #4
 8003e7e:	6029      	str	r1, [r5, #0]
 8003e80:	0605      	lsls	r5, r0, #24
 8003e82:	d501      	bpl.n	8003e88 <_printf_i+0xe8>
 8003e84:	681e      	ldr	r6, [r3, #0]
 8003e86:	e002      	b.n	8003e8e <_printf_i+0xee>
 8003e88:	0641      	lsls	r1, r0, #25
 8003e8a:	d5fb      	bpl.n	8003e84 <_printf_i+0xe4>
 8003e8c:	881e      	ldrh	r6, [r3, #0]
 8003e8e:	2f6f      	cmp	r7, #111	; 0x6f
 8003e90:	bf0c      	ite	eq
 8003e92:	2308      	moveq	r3, #8
 8003e94:	230a      	movne	r3, #10
 8003e96:	4851      	ldr	r0, [pc, #324]	; (8003fdc <_printf_i+0x23c>)
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e9e:	6865      	ldr	r5, [r4, #4]
 8003ea0:	2d00      	cmp	r5, #0
 8003ea2:	bfa8      	it	ge
 8003ea4:	6821      	ldrge	r1, [r4, #0]
 8003ea6:	60a5      	str	r5, [r4, #8]
 8003ea8:	bfa4      	itt	ge
 8003eaa:	f021 0104 	bicge.w	r1, r1, #4
 8003eae:	6021      	strge	r1, [r4, #0]
 8003eb0:	b90e      	cbnz	r6, 8003eb6 <_printf_i+0x116>
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	d04b      	beq.n	8003f4e <_printf_i+0x1ae>
 8003eb6:	4615      	mov	r5, r2
 8003eb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ebc:	fb03 6711 	mls	r7, r3, r1, r6
 8003ec0:	5dc7      	ldrb	r7, [r0, r7]
 8003ec2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ec6:	4637      	mov	r7, r6
 8003ec8:	42bb      	cmp	r3, r7
 8003eca:	460e      	mov	r6, r1
 8003ecc:	d9f4      	bls.n	8003eb8 <_printf_i+0x118>
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d10b      	bne.n	8003eea <_printf_i+0x14a>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	07de      	lsls	r6, r3, #31
 8003ed6:	d508      	bpl.n	8003eea <_printf_i+0x14a>
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	6861      	ldr	r1, [r4, #4]
 8003edc:	4299      	cmp	r1, r3
 8003ede:	bfde      	ittt	le
 8003ee0:	2330      	movle	r3, #48	; 0x30
 8003ee2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ee6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003eea:	1b52      	subs	r2, r2, r5
 8003eec:	6122      	str	r2, [r4, #16]
 8003eee:	464b      	mov	r3, r9
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	f8cd a000 	str.w	sl, [sp]
 8003ef8:	aa03      	add	r2, sp, #12
 8003efa:	f7ff fedf 	bl	8003cbc <_printf_common>
 8003efe:	3001      	adds	r0, #1
 8003f00:	d14a      	bne.n	8003f98 <_printf_i+0x1f8>
 8003f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f06:	b004      	add	sp, #16
 8003f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	f043 0320 	orr.w	r3, r3, #32
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	2778      	movs	r7, #120	; 0x78
 8003f16:	4832      	ldr	r0, [pc, #200]	; (8003fe0 <_printf_i+0x240>)
 8003f18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	6829      	ldr	r1, [r5, #0]
 8003f20:	061f      	lsls	r7, r3, #24
 8003f22:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f26:	d402      	bmi.n	8003f2e <_printf_i+0x18e>
 8003f28:	065f      	lsls	r7, r3, #25
 8003f2a:	bf48      	it	mi
 8003f2c:	b2b6      	uxthmi	r6, r6
 8003f2e:	07df      	lsls	r7, r3, #31
 8003f30:	bf48      	it	mi
 8003f32:	f043 0320 	orrmi.w	r3, r3, #32
 8003f36:	6029      	str	r1, [r5, #0]
 8003f38:	bf48      	it	mi
 8003f3a:	6023      	strmi	r3, [r4, #0]
 8003f3c:	b91e      	cbnz	r6, 8003f46 <_printf_i+0x1a6>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	f023 0320 	bic.w	r3, r3, #32
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	2310      	movs	r3, #16
 8003f48:	e7a6      	b.n	8003e98 <_printf_i+0xf8>
 8003f4a:	4824      	ldr	r0, [pc, #144]	; (8003fdc <_printf_i+0x23c>)
 8003f4c:	e7e4      	b.n	8003f18 <_printf_i+0x178>
 8003f4e:	4615      	mov	r5, r2
 8003f50:	e7bd      	b.n	8003ece <_printf_i+0x12e>
 8003f52:	682b      	ldr	r3, [r5, #0]
 8003f54:	6826      	ldr	r6, [r4, #0]
 8003f56:	1d18      	adds	r0, r3, #4
 8003f58:	6961      	ldr	r1, [r4, #20]
 8003f5a:	6028      	str	r0, [r5, #0]
 8003f5c:	0635      	lsls	r5, r6, #24
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	d501      	bpl.n	8003f66 <_printf_i+0x1c6>
 8003f62:	6019      	str	r1, [r3, #0]
 8003f64:	e002      	b.n	8003f6c <_printf_i+0x1cc>
 8003f66:	0670      	lsls	r0, r6, #25
 8003f68:	d5fb      	bpl.n	8003f62 <_printf_i+0x1c2>
 8003f6a:	8019      	strh	r1, [r3, #0]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	4615      	mov	r5, r2
 8003f70:	6123      	str	r3, [r4, #16]
 8003f72:	e7bc      	b.n	8003eee <_printf_i+0x14e>
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	2100      	movs	r1, #0
 8003f78:	1d1a      	adds	r2, r3, #4
 8003f7a:	602a      	str	r2, [r5, #0]
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	6862      	ldr	r2, [r4, #4]
 8003f80:	4628      	mov	r0, r5
 8003f82:	f000 fa97 	bl	80044b4 <memchr>
 8003f86:	b108      	cbz	r0, 8003f8c <_printf_i+0x1ec>
 8003f88:	1b40      	subs	r0, r0, r5
 8003f8a:	6060      	str	r0, [r4, #4]
 8003f8c:	6863      	ldr	r3, [r4, #4]
 8003f8e:	6123      	str	r3, [r4, #16]
 8003f90:	2300      	movs	r3, #0
 8003f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f96:	e7aa      	b.n	8003eee <_printf_i+0x14e>
 8003f98:	462a      	mov	r2, r5
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	6923      	ldr	r3, [r4, #16]
 8003fa0:	47d0      	blx	sl
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d0ad      	beq.n	8003f02 <_printf_i+0x162>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	079b      	lsls	r3, r3, #30
 8003faa:	d413      	bmi.n	8003fd4 <_printf_i+0x234>
 8003fac:	68e0      	ldr	r0, [r4, #12]
 8003fae:	9b03      	ldr	r3, [sp, #12]
 8003fb0:	4298      	cmp	r0, r3
 8003fb2:	bfb8      	it	lt
 8003fb4:	4618      	movlt	r0, r3
 8003fb6:	e7a6      	b.n	8003f06 <_printf_i+0x166>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4632      	mov	r2, r6
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	4640      	mov	r0, r8
 8003fc0:	47d0      	blx	sl
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d09d      	beq.n	8003f02 <_printf_i+0x162>
 8003fc6:	3501      	adds	r5, #1
 8003fc8:	68e3      	ldr	r3, [r4, #12]
 8003fca:	9903      	ldr	r1, [sp, #12]
 8003fcc:	1a5b      	subs	r3, r3, r1
 8003fce:	42ab      	cmp	r3, r5
 8003fd0:	dcf2      	bgt.n	8003fb8 <_printf_i+0x218>
 8003fd2:	e7eb      	b.n	8003fac <_printf_i+0x20c>
 8003fd4:	2500      	movs	r5, #0
 8003fd6:	f104 0619 	add.w	r6, r4, #25
 8003fda:	e7f5      	b.n	8003fc8 <_printf_i+0x228>
 8003fdc:	080046f3 	.word	0x080046f3
 8003fe0:	08004704 	.word	0x08004704

08003fe4 <__sflush_r>:
 8003fe4:	898a      	ldrh	r2, [r1, #12]
 8003fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe8:	4605      	mov	r5, r0
 8003fea:	0710      	lsls	r0, r2, #28
 8003fec:	460c      	mov	r4, r1
 8003fee:	d457      	bmi.n	80040a0 <__sflush_r+0xbc>
 8003ff0:	684b      	ldr	r3, [r1, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	dc04      	bgt.n	8004000 <__sflush_r+0x1c>
 8003ff6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	dc01      	bgt.n	8004000 <__sflush_r+0x1c>
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004002:	2e00      	cmp	r6, #0
 8004004:	d0fa      	beq.n	8003ffc <__sflush_r+0x18>
 8004006:	2300      	movs	r3, #0
 8004008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800400c:	682f      	ldr	r7, [r5, #0]
 800400e:	6a21      	ldr	r1, [r4, #32]
 8004010:	602b      	str	r3, [r5, #0]
 8004012:	d032      	beq.n	800407a <__sflush_r+0x96>
 8004014:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	075a      	lsls	r2, r3, #29
 800401a:	d505      	bpl.n	8004028 <__sflush_r+0x44>
 800401c:	6863      	ldr	r3, [r4, #4]
 800401e:	1ac0      	subs	r0, r0, r3
 8004020:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004022:	b10b      	cbz	r3, 8004028 <__sflush_r+0x44>
 8004024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004026:	1ac0      	subs	r0, r0, r3
 8004028:	2300      	movs	r3, #0
 800402a:	4602      	mov	r2, r0
 800402c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800402e:	4628      	mov	r0, r5
 8004030:	6a21      	ldr	r1, [r4, #32]
 8004032:	47b0      	blx	r6
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	d106      	bne.n	8004048 <__sflush_r+0x64>
 800403a:	6829      	ldr	r1, [r5, #0]
 800403c:	291d      	cmp	r1, #29
 800403e:	d82b      	bhi.n	8004098 <__sflush_r+0xb4>
 8004040:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <__sflush_r+0x100>)
 8004042:	410a      	asrs	r2, r1
 8004044:	07d6      	lsls	r6, r2, #31
 8004046:	d427      	bmi.n	8004098 <__sflush_r+0xb4>
 8004048:	2200      	movs	r2, #0
 800404a:	6062      	str	r2, [r4, #4]
 800404c:	6922      	ldr	r2, [r4, #16]
 800404e:	04d9      	lsls	r1, r3, #19
 8004050:	6022      	str	r2, [r4, #0]
 8004052:	d504      	bpl.n	800405e <__sflush_r+0x7a>
 8004054:	1c42      	adds	r2, r0, #1
 8004056:	d101      	bne.n	800405c <__sflush_r+0x78>
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	b903      	cbnz	r3, 800405e <__sflush_r+0x7a>
 800405c:	6560      	str	r0, [r4, #84]	; 0x54
 800405e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004060:	602f      	str	r7, [r5, #0]
 8004062:	2900      	cmp	r1, #0
 8004064:	d0ca      	beq.n	8003ffc <__sflush_r+0x18>
 8004066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800406a:	4299      	cmp	r1, r3
 800406c:	d002      	beq.n	8004074 <__sflush_r+0x90>
 800406e:	4628      	mov	r0, r5
 8004070:	f000 fa2e 	bl	80044d0 <_free_r>
 8004074:	2000      	movs	r0, #0
 8004076:	6360      	str	r0, [r4, #52]	; 0x34
 8004078:	e7c1      	b.n	8003ffe <__sflush_r+0x1a>
 800407a:	2301      	movs	r3, #1
 800407c:	4628      	mov	r0, r5
 800407e:	47b0      	blx	r6
 8004080:	1c41      	adds	r1, r0, #1
 8004082:	d1c8      	bne.n	8004016 <__sflush_r+0x32>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0c5      	beq.n	8004016 <__sflush_r+0x32>
 800408a:	2b1d      	cmp	r3, #29
 800408c:	d001      	beq.n	8004092 <__sflush_r+0xae>
 800408e:	2b16      	cmp	r3, #22
 8004090:	d101      	bne.n	8004096 <__sflush_r+0xb2>
 8004092:	602f      	str	r7, [r5, #0]
 8004094:	e7b2      	b.n	8003ffc <__sflush_r+0x18>
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409c:	81a3      	strh	r3, [r4, #12]
 800409e:	e7ae      	b.n	8003ffe <__sflush_r+0x1a>
 80040a0:	690f      	ldr	r7, [r1, #16]
 80040a2:	2f00      	cmp	r7, #0
 80040a4:	d0aa      	beq.n	8003ffc <__sflush_r+0x18>
 80040a6:	0793      	lsls	r3, r2, #30
 80040a8:	bf18      	it	ne
 80040aa:	2300      	movne	r3, #0
 80040ac:	680e      	ldr	r6, [r1, #0]
 80040ae:	bf08      	it	eq
 80040b0:	694b      	ldreq	r3, [r1, #20]
 80040b2:	1bf6      	subs	r6, r6, r7
 80040b4:	600f      	str	r7, [r1, #0]
 80040b6:	608b      	str	r3, [r1, #8]
 80040b8:	2e00      	cmp	r6, #0
 80040ba:	dd9f      	ble.n	8003ffc <__sflush_r+0x18>
 80040bc:	4633      	mov	r3, r6
 80040be:	463a      	mov	r2, r7
 80040c0:	4628      	mov	r0, r5
 80040c2:	6a21      	ldr	r1, [r4, #32]
 80040c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80040c8:	47e0      	blx	ip
 80040ca:	2800      	cmp	r0, #0
 80040cc:	dc06      	bgt.n	80040dc <__sflush_r+0xf8>
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d8:	81a3      	strh	r3, [r4, #12]
 80040da:	e790      	b.n	8003ffe <__sflush_r+0x1a>
 80040dc:	4407      	add	r7, r0
 80040de:	1a36      	subs	r6, r6, r0
 80040e0:	e7ea      	b.n	80040b8 <__sflush_r+0xd4>
 80040e2:	bf00      	nop
 80040e4:	dfbffffe 	.word	0xdfbffffe

080040e8 <_fflush_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	690b      	ldr	r3, [r1, #16]
 80040ec:	4605      	mov	r5, r0
 80040ee:	460c      	mov	r4, r1
 80040f0:	b913      	cbnz	r3, 80040f8 <_fflush_r+0x10>
 80040f2:	2500      	movs	r5, #0
 80040f4:	4628      	mov	r0, r5
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	b118      	cbz	r0, 8004102 <_fflush_r+0x1a>
 80040fa:	6a03      	ldr	r3, [r0, #32]
 80040fc:	b90b      	cbnz	r3, 8004102 <_fflush_r+0x1a>
 80040fe:	f7ff fb7f 	bl	8003800 <__sinit>
 8004102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f3      	beq.n	80040f2 <_fflush_r+0xa>
 800410a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800410c:	07d0      	lsls	r0, r2, #31
 800410e:	d404      	bmi.n	800411a <_fflush_r+0x32>
 8004110:	0599      	lsls	r1, r3, #22
 8004112:	d402      	bmi.n	800411a <_fflush_r+0x32>
 8004114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004116:	f7ff fbee 	bl	80038f6 <__retarget_lock_acquire_recursive>
 800411a:	4628      	mov	r0, r5
 800411c:	4621      	mov	r1, r4
 800411e:	f7ff ff61 	bl	8003fe4 <__sflush_r>
 8004122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004124:	4605      	mov	r5, r0
 8004126:	07da      	lsls	r2, r3, #31
 8004128:	d4e4      	bmi.n	80040f4 <_fflush_r+0xc>
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	059b      	lsls	r3, r3, #22
 800412e:	d4e1      	bmi.n	80040f4 <_fflush_r+0xc>
 8004130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004132:	f7ff fbe1 	bl	80038f8 <__retarget_lock_release_recursive>
 8004136:	e7dd      	b.n	80040f4 <_fflush_r+0xc>

08004138 <__malloc_lock>:
 8004138:	4801      	ldr	r0, [pc, #4]	; (8004140 <__malloc_lock+0x8>)
 800413a:	f7ff bbdc 	b.w	80038f6 <__retarget_lock_acquire_recursive>
 800413e:	bf00      	nop
 8004140:	20000388 	.word	0x20000388

08004144 <__malloc_unlock>:
 8004144:	4801      	ldr	r0, [pc, #4]	; (800414c <__malloc_unlock+0x8>)
 8004146:	f7ff bbd7 	b.w	80038f8 <__retarget_lock_release_recursive>
 800414a:	bf00      	nop
 800414c:	20000388 	.word	0x20000388

08004150 <__sread>:
 8004150:	b510      	push	{r4, lr}
 8004152:	460c      	mov	r4, r1
 8004154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004158:	f000 f978 	bl	800444c <_read_r>
 800415c:	2800      	cmp	r0, #0
 800415e:	bfab      	itete	ge
 8004160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004162:	89a3      	ldrhlt	r3, [r4, #12]
 8004164:	181b      	addge	r3, r3, r0
 8004166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800416a:	bfac      	ite	ge
 800416c:	6563      	strge	r3, [r4, #84]	; 0x54
 800416e:	81a3      	strhlt	r3, [r4, #12]
 8004170:	bd10      	pop	{r4, pc}

08004172 <__swrite>:
 8004172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004176:	461f      	mov	r7, r3
 8004178:	898b      	ldrh	r3, [r1, #12]
 800417a:	4605      	mov	r5, r0
 800417c:	05db      	lsls	r3, r3, #23
 800417e:	460c      	mov	r4, r1
 8004180:	4616      	mov	r6, r2
 8004182:	d505      	bpl.n	8004190 <__swrite+0x1e>
 8004184:	2302      	movs	r3, #2
 8004186:	2200      	movs	r2, #0
 8004188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418c:	f000 f94c 	bl	8004428 <_lseek_r>
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	4632      	mov	r2, r6
 8004194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004198:	81a3      	strh	r3, [r4, #12]
 800419a:	4628      	mov	r0, r5
 800419c:	463b      	mov	r3, r7
 800419e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a6:	f000 b973 	b.w	8004490 <_write_r>

080041aa <__sseek>:
 80041aa:	b510      	push	{r4, lr}
 80041ac:	460c      	mov	r4, r1
 80041ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b2:	f000 f939 	bl	8004428 <_lseek_r>
 80041b6:	1c43      	adds	r3, r0, #1
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	bf15      	itete	ne
 80041bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80041be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041c6:	81a3      	strheq	r3, [r4, #12]
 80041c8:	bf18      	it	ne
 80041ca:	81a3      	strhne	r3, [r4, #12]
 80041cc:	bd10      	pop	{r4, pc}

080041ce <__sclose>:
 80041ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d2:	f000 b8f7 	b.w	80043c4 <_close_r>

080041d6 <__swbuf_r>:
 80041d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d8:	460e      	mov	r6, r1
 80041da:	4614      	mov	r4, r2
 80041dc:	4605      	mov	r5, r0
 80041de:	b118      	cbz	r0, 80041e8 <__swbuf_r+0x12>
 80041e0:	6a03      	ldr	r3, [r0, #32]
 80041e2:	b90b      	cbnz	r3, 80041e8 <__swbuf_r+0x12>
 80041e4:	f7ff fb0c 	bl	8003800 <__sinit>
 80041e8:	69a3      	ldr	r3, [r4, #24]
 80041ea:	60a3      	str	r3, [r4, #8]
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	071a      	lsls	r2, r3, #28
 80041f0:	d525      	bpl.n	800423e <__swbuf_r+0x68>
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	b31b      	cbz	r3, 800423e <__swbuf_r+0x68>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	6922      	ldr	r2, [r4, #16]
 80041fa:	b2f6      	uxtb	r6, r6
 80041fc:	1a98      	subs	r0, r3, r2
 80041fe:	6963      	ldr	r3, [r4, #20]
 8004200:	4637      	mov	r7, r6
 8004202:	4283      	cmp	r3, r0
 8004204:	dc04      	bgt.n	8004210 <__swbuf_r+0x3a>
 8004206:	4621      	mov	r1, r4
 8004208:	4628      	mov	r0, r5
 800420a:	f7ff ff6d 	bl	80040e8 <_fflush_r>
 800420e:	b9e0      	cbnz	r0, 800424a <__swbuf_r+0x74>
 8004210:	68a3      	ldr	r3, [r4, #8]
 8004212:	3b01      	subs	r3, #1
 8004214:	60a3      	str	r3, [r4, #8]
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	6022      	str	r2, [r4, #0]
 800421c:	701e      	strb	r6, [r3, #0]
 800421e:	6962      	ldr	r2, [r4, #20]
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	429a      	cmp	r2, r3
 8004224:	d004      	beq.n	8004230 <__swbuf_r+0x5a>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	07db      	lsls	r3, r3, #31
 800422a:	d506      	bpl.n	800423a <__swbuf_r+0x64>
 800422c:	2e0a      	cmp	r6, #10
 800422e:	d104      	bne.n	800423a <__swbuf_r+0x64>
 8004230:	4621      	mov	r1, r4
 8004232:	4628      	mov	r0, r5
 8004234:	f7ff ff58 	bl	80040e8 <_fflush_r>
 8004238:	b938      	cbnz	r0, 800424a <__swbuf_r+0x74>
 800423a:	4638      	mov	r0, r7
 800423c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	f000 f805 	bl	8004250 <__swsetup_r>
 8004246:	2800      	cmp	r0, #0
 8004248:	d0d5      	beq.n	80041f6 <__swbuf_r+0x20>
 800424a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800424e:	e7f4      	b.n	800423a <__swbuf_r+0x64>

08004250 <__swsetup_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4b2a      	ldr	r3, [pc, #168]	; (80042fc <__swsetup_r+0xac>)
 8004254:	4605      	mov	r5, r0
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	460c      	mov	r4, r1
 800425a:	b118      	cbz	r0, 8004264 <__swsetup_r+0x14>
 800425c:	6a03      	ldr	r3, [r0, #32]
 800425e:	b90b      	cbnz	r3, 8004264 <__swsetup_r+0x14>
 8004260:	f7ff face 	bl	8003800 <__sinit>
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800426a:	0718      	lsls	r0, r3, #28
 800426c:	d422      	bmi.n	80042b4 <__swsetup_r+0x64>
 800426e:	06d9      	lsls	r1, r3, #27
 8004270:	d407      	bmi.n	8004282 <__swsetup_r+0x32>
 8004272:	2309      	movs	r3, #9
 8004274:	602b      	str	r3, [r5, #0]
 8004276:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800427a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800427e:	81a3      	strh	r3, [r4, #12]
 8004280:	e034      	b.n	80042ec <__swsetup_r+0x9c>
 8004282:	0758      	lsls	r0, r3, #29
 8004284:	d512      	bpl.n	80042ac <__swsetup_r+0x5c>
 8004286:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004288:	b141      	cbz	r1, 800429c <__swsetup_r+0x4c>
 800428a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800428e:	4299      	cmp	r1, r3
 8004290:	d002      	beq.n	8004298 <__swsetup_r+0x48>
 8004292:	4628      	mov	r0, r5
 8004294:	f000 f91c 	bl	80044d0 <_free_r>
 8004298:	2300      	movs	r3, #0
 800429a:	6363      	str	r3, [r4, #52]	; 0x34
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042a2:	81a3      	strh	r3, [r4, #12]
 80042a4:	2300      	movs	r3, #0
 80042a6:	6063      	str	r3, [r4, #4]
 80042a8:	6923      	ldr	r3, [r4, #16]
 80042aa:	6023      	str	r3, [r4, #0]
 80042ac:	89a3      	ldrh	r3, [r4, #12]
 80042ae:	f043 0308 	orr.w	r3, r3, #8
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	6923      	ldr	r3, [r4, #16]
 80042b6:	b94b      	cbnz	r3, 80042cc <__swsetup_r+0x7c>
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c2:	d003      	beq.n	80042cc <__swsetup_r+0x7c>
 80042c4:	4621      	mov	r1, r4
 80042c6:	4628      	mov	r0, r5
 80042c8:	f000 f83f 	bl	800434a <__smakebuf_r>
 80042cc:	89a0      	ldrh	r0, [r4, #12]
 80042ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042d2:	f010 0301 	ands.w	r3, r0, #1
 80042d6:	d00a      	beq.n	80042ee <__swsetup_r+0x9e>
 80042d8:	2300      	movs	r3, #0
 80042da:	60a3      	str	r3, [r4, #8]
 80042dc:	6963      	ldr	r3, [r4, #20]
 80042de:	425b      	negs	r3, r3
 80042e0:	61a3      	str	r3, [r4, #24]
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	b943      	cbnz	r3, 80042f8 <__swsetup_r+0xa8>
 80042e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042ea:	d1c4      	bne.n	8004276 <__swsetup_r+0x26>
 80042ec:	bd38      	pop	{r3, r4, r5, pc}
 80042ee:	0781      	lsls	r1, r0, #30
 80042f0:	bf58      	it	pl
 80042f2:	6963      	ldrpl	r3, [r4, #20]
 80042f4:	60a3      	str	r3, [r4, #8]
 80042f6:	e7f4      	b.n	80042e2 <__swsetup_r+0x92>
 80042f8:	2000      	movs	r0, #0
 80042fa:	e7f7      	b.n	80042ec <__swsetup_r+0x9c>
 80042fc:	20000068 	.word	0x20000068

08004300 <__swhatbuf_r>:
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	460c      	mov	r4, r1
 8004304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004308:	4615      	mov	r5, r2
 800430a:	2900      	cmp	r1, #0
 800430c:	461e      	mov	r6, r3
 800430e:	b096      	sub	sp, #88	; 0x58
 8004310:	da0c      	bge.n	800432c <__swhatbuf_r+0x2c>
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	2100      	movs	r1, #0
 8004316:	f013 0f80 	tst.w	r3, #128	; 0x80
 800431a:	bf0c      	ite	eq
 800431c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004320:	2340      	movne	r3, #64	; 0x40
 8004322:	2000      	movs	r0, #0
 8004324:	6031      	str	r1, [r6, #0]
 8004326:	602b      	str	r3, [r5, #0]
 8004328:	b016      	add	sp, #88	; 0x58
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	466a      	mov	r2, sp
 800432e:	f000 f859 	bl	80043e4 <_fstat_r>
 8004332:	2800      	cmp	r0, #0
 8004334:	dbed      	blt.n	8004312 <__swhatbuf_r+0x12>
 8004336:	9901      	ldr	r1, [sp, #4]
 8004338:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800433c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004340:	4259      	negs	r1, r3
 8004342:	4159      	adcs	r1, r3
 8004344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004348:	e7eb      	b.n	8004322 <__swhatbuf_r+0x22>

0800434a <__smakebuf_r>:
 800434a:	898b      	ldrh	r3, [r1, #12]
 800434c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800434e:	079d      	lsls	r5, r3, #30
 8004350:	4606      	mov	r6, r0
 8004352:	460c      	mov	r4, r1
 8004354:	d507      	bpl.n	8004366 <__smakebuf_r+0x1c>
 8004356:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800435a:	6023      	str	r3, [r4, #0]
 800435c:	6123      	str	r3, [r4, #16]
 800435e:	2301      	movs	r3, #1
 8004360:	6163      	str	r3, [r4, #20]
 8004362:	b002      	add	sp, #8
 8004364:	bd70      	pop	{r4, r5, r6, pc}
 8004366:	466a      	mov	r2, sp
 8004368:	ab01      	add	r3, sp, #4
 800436a:	f7ff ffc9 	bl	8004300 <__swhatbuf_r>
 800436e:	9900      	ldr	r1, [sp, #0]
 8004370:	4605      	mov	r5, r0
 8004372:	4630      	mov	r0, r6
 8004374:	f7ff fc22 	bl	8003bbc <_malloc_r>
 8004378:	b948      	cbnz	r0, 800438e <__smakebuf_r+0x44>
 800437a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800437e:	059a      	lsls	r2, r3, #22
 8004380:	d4ef      	bmi.n	8004362 <__smakebuf_r+0x18>
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	f043 0302 	orr.w	r3, r3, #2
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	e7e3      	b.n	8004356 <__smakebuf_r+0xc>
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	6020      	str	r0, [r4, #0]
 8004392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004396:	81a3      	strh	r3, [r4, #12]
 8004398:	9b00      	ldr	r3, [sp, #0]
 800439a:	6120      	str	r0, [r4, #16]
 800439c:	6163      	str	r3, [r4, #20]
 800439e:	9b01      	ldr	r3, [sp, #4]
 80043a0:	b15b      	cbz	r3, 80043ba <__smakebuf_r+0x70>
 80043a2:	4630      	mov	r0, r6
 80043a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043a8:	f000 f82e 	bl	8004408 <_isatty_r>
 80043ac:	b128      	cbz	r0, 80043ba <__smakebuf_r+0x70>
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	f023 0303 	bic.w	r3, r3, #3
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	81a3      	strh	r3, [r4, #12]
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	431d      	orrs	r5, r3
 80043be:	81a5      	strh	r5, [r4, #12]
 80043c0:	e7cf      	b.n	8004362 <__smakebuf_r+0x18>
	...

080043c4 <_close_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	2300      	movs	r3, #0
 80043c8:	4d05      	ldr	r5, [pc, #20]	; (80043e0 <_close_r+0x1c>)
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	602b      	str	r3, [r5, #0]
 80043d0:	f7fc fa82 	bl	80008d8 <_close>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_close_r+0x1a>
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	b103      	cbz	r3, 80043de <_close_r+0x1a>
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	20000394 	.word	0x20000394

080043e4 <_fstat_r>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	2300      	movs	r3, #0
 80043e8:	4d06      	ldr	r5, [pc, #24]	; (8004404 <_fstat_r+0x20>)
 80043ea:	4604      	mov	r4, r0
 80043ec:	4608      	mov	r0, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	602b      	str	r3, [r5, #0]
 80043f2:	f7fc fa7c 	bl	80008ee <_fstat>
 80043f6:	1c43      	adds	r3, r0, #1
 80043f8:	d102      	bne.n	8004400 <_fstat_r+0x1c>
 80043fa:	682b      	ldr	r3, [r5, #0]
 80043fc:	b103      	cbz	r3, 8004400 <_fstat_r+0x1c>
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	bd38      	pop	{r3, r4, r5, pc}
 8004402:	bf00      	nop
 8004404:	20000394 	.word	0x20000394

08004408 <_isatty_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	2300      	movs	r3, #0
 800440c:	4d05      	ldr	r5, [pc, #20]	; (8004424 <_isatty_r+0x1c>)
 800440e:	4604      	mov	r4, r0
 8004410:	4608      	mov	r0, r1
 8004412:	602b      	str	r3, [r5, #0]
 8004414:	f7fc fa7a 	bl	800090c <_isatty>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d102      	bne.n	8004422 <_isatty_r+0x1a>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	b103      	cbz	r3, 8004422 <_isatty_r+0x1a>
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	bd38      	pop	{r3, r4, r5, pc}
 8004424:	20000394 	.word	0x20000394

08004428 <_lseek_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4604      	mov	r4, r0
 800442c:	4608      	mov	r0, r1
 800442e:	4611      	mov	r1, r2
 8004430:	2200      	movs	r2, #0
 8004432:	4d05      	ldr	r5, [pc, #20]	; (8004448 <_lseek_r+0x20>)
 8004434:	602a      	str	r2, [r5, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	f7fc fa72 	bl	8000920 <_lseek>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_lseek_r+0x1e>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	b103      	cbz	r3, 8004446 <_lseek_r+0x1e>
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	20000394 	.word	0x20000394

0800444c <_read_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	4604      	mov	r4, r0
 8004450:	4608      	mov	r0, r1
 8004452:	4611      	mov	r1, r2
 8004454:	2200      	movs	r2, #0
 8004456:	4d05      	ldr	r5, [pc, #20]	; (800446c <_read_r+0x20>)
 8004458:	602a      	str	r2, [r5, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	f7fc fa1f 	bl	800089e <_read>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d102      	bne.n	800446a <_read_r+0x1e>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	b103      	cbz	r3, 800446a <_read_r+0x1e>
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	20000394 	.word	0x20000394

08004470 <_sbrk_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	2300      	movs	r3, #0
 8004474:	4d05      	ldr	r5, [pc, #20]	; (800448c <_sbrk_r+0x1c>)
 8004476:	4604      	mov	r4, r0
 8004478:	4608      	mov	r0, r1
 800447a:	602b      	str	r3, [r5, #0]
 800447c:	f7fc fa5c 	bl	8000938 <_sbrk>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d102      	bne.n	800448a <_sbrk_r+0x1a>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	b103      	cbz	r3, 800448a <_sbrk_r+0x1a>
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	bd38      	pop	{r3, r4, r5, pc}
 800448c:	20000394 	.word	0x20000394

08004490 <_write_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	4611      	mov	r1, r2
 8004498:	2200      	movs	r2, #0
 800449a:	4d05      	ldr	r5, [pc, #20]	; (80044b0 <_write_r+0x20>)
 800449c:	602a      	str	r2, [r5, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	f7fb fe74 	bl	800018c <_write>
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	d102      	bne.n	80044ae <_write_r+0x1e>
 80044a8:	682b      	ldr	r3, [r5, #0]
 80044aa:	b103      	cbz	r3, 80044ae <_write_r+0x1e>
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	bd38      	pop	{r3, r4, r5, pc}
 80044b0:	20000394 	.word	0x20000394

080044b4 <memchr>:
 80044b4:	4603      	mov	r3, r0
 80044b6:	b510      	push	{r4, lr}
 80044b8:	b2c9      	uxtb	r1, r1
 80044ba:	4402      	add	r2, r0
 80044bc:	4293      	cmp	r3, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	d101      	bne.n	80044c6 <memchr+0x12>
 80044c2:	2000      	movs	r0, #0
 80044c4:	e003      	b.n	80044ce <memchr+0x1a>
 80044c6:	7804      	ldrb	r4, [r0, #0]
 80044c8:	3301      	adds	r3, #1
 80044ca:	428c      	cmp	r4, r1
 80044cc:	d1f6      	bne.n	80044bc <memchr+0x8>
 80044ce:	bd10      	pop	{r4, pc}

080044d0 <_free_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4605      	mov	r5, r0
 80044d4:	2900      	cmp	r1, #0
 80044d6:	d040      	beq.n	800455a <_free_r+0x8a>
 80044d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044dc:	1f0c      	subs	r4, r1, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bfb8      	it	lt
 80044e2:	18e4      	addlt	r4, r4, r3
 80044e4:	f7ff fe28 	bl	8004138 <__malloc_lock>
 80044e8:	4a1c      	ldr	r2, [pc, #112]	; (800455c <_free_r+0x8c>)
 80044ea:	6813      	ldr	r3, [r2, #0]
 80044ec:	b933      	cbnz	r3, 80044fc <_free_r+0x2c>
 80044ee:	6063      	str	r3, [r4, #4]
 80044f0:	6014      	str	r4, [r2, #0]
 80044f2:	4628      	mov	r0, r5
 80044f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044f8:	f7ff be24 	b.w	8004144 <__malloc_unlock>
 80044fc:	42a3      	cmp	r3, r4
 80044fe:	d908      	bls.n	8004512 <_free_r+0x42>
 8004500:	6820      	ldr	r0, [r4, #0]
 8004502:	1821      	adds	r1, r4, r0
 8004504:	428b      	cmp	r3, r1
 8004506:	bf01      	itttt	eq
 8004508:	6819      	ldreq	r1, [r3, #0]
 800450a:	685b      	ldreq	r3, [r3, #4]
 800450c:	1809      	addeq	r1, r1, r0
 800450e:	6021      	streq	r1, [r4, #0]
 8004510:	e7ed      	b.n	80044ee <_free_r+0x1e>
 8004512:	461a      	mov	r2, r3
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	b10b      	cbz	r3, 800451c <_free_r+0x4c>
 8004518:	42a3      	cmp	r3, r4
 800451a:	d9fa      	bls.n	8004512 <_free_r+0x42>
 800451c:	6811      	ldr	r1, [r2, #0]
 800451e:	1850      	adds	r0, r2, r1
 8004520:	42a0      	cmp	r0, r4
 8004522:	d10b      	bne.n	800453c <_free_r+0x6c>
 8004524:	6820      	ldr	r0, [r4, #0]
 8004526:	4401      	add	r1, r0
 8004528:	1850      	adds	r0, r2, r1
 800452a:	4283      	cmp	r3, r0
 800452c:	6011      	str	r1, [r2, #0]
 800452e:	d1e0      	bne.n	80044f2 <_free_r+0x22>
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4408      	add	r0, r1
 8004536:	6010      	str	r0, [r2, #0]
 8004538:	6053      	str	r3, [r2, #4]
 800453a:	e7da      	b.n	80044f2 <_free_r+0x22>
 800453c:	d902      	bls.n	8004544 <_free_r+0x74>
 800453e:	230c      	movs	r3, #12
 8004540:	602b      	str	r3, [r5, #0]
 8004542:	e7d6      	b.n	80044f2 <_free_r+0x22>
 8004544:	6820      	ldr	r0, [r4, #0]
 8004546:	1821      	adds	r1, r4, r0
 8004548:	428b      	cmp	r3, r1
 800454a:	bf01      	itttt	eq
 800454c:	6819      	ldreq	r1, [r3, #0]
 800454e:	685b      	ldreq	r3, [r3, #4]
 8004550:	1809      	addeq	r1, r1, r0
 8004552:	6021      	streq	r1, [r4, #0]
 8004554:	6063      	str	r3, [r4, #4]
 8004556:	6054      	str	r4, [r2, #4]
 8004558:	e7cb      	b.n	80044f2 <_free_r+0x22>
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	2000038c 	.word	0x2000038c

08004560 <_init>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	bf00      	nop
 8004564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004566:	bc08      	pop	{r3}
 8004568:	469e      	mov	lr, r3
 800456a:	4770      	bx	lr

0800456c <_fini>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	bf00      	nop
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr
