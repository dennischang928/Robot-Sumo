
CANTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001568  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001674  08001674  00011674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001698  08001698  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001698  08001698  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001698  08001698  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001698  08001698  00011698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800169c  0800169c  0001169c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080016a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080016ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080016ac  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043d5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001158  00000000  00000000  0002440a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000520  00000000  00000000  00025568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000488  00000000  00000000  00025a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ebb  00000000  00000000  00025f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005893  00000000  00000000  0003bdcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e3c0  00000000  00000000  0004165e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bfa1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001334  00000000  00000000  000bfa70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800165c 	.word	0x0800165c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800165c 	.word	0x0800165c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f97e 	bl	8000450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82a 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f89c 	bl	8000294 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f862 	bl	8000224 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 8000160:	480e      	ldr	r0, [pc, #56]	; (800019c <main+0x50>)
 8000162:	f000 faf6 	bl	8000752 <HAL_CAN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	TxHeader.IDE = CAN_ID_STD;
 8000166:	4b0e      	ldr	r3, [pc, #56]	; (80001a0 <main+0x54>)
 8000168:	2200      	movs	r2, #0
 800016a:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 0x446;
 800016c:	4b0c      	ldr	r3, [pc, #48]	; (80001a0 <main+0x54>)
 800016e:	f240 4246 	movw	r2, #1094	; 0x446
 8000172:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <main+0x54>)
 8000176:	2200      	movs	r2, #0
 8000178:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 1;
 800017a:	4b09      	ldr	r3, [pc, #36]	; (80001a0 <main+0x54>)
 800017c:	2201      	movs	r2, #1
 800017e:	611a      	str	r2, [r3, #16]

	TxData[0] = 0x50;
 8000180:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <main+0x58>)
 8000182:	2250      	movs	r2, #80	; 0x50
 8000184:	701a      	strb	r2, [r3, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000186:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <main+0x5c>)
 8000188:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <main+0x58>)
 800018a:	4905      	ldr	r1, [pc, #20]	; (80001a0 <main+0x54>)
 800018c:	4803      	ldr	r0, [pc, #12]	; (800019c <main+0x50>)
 800018e:	f000 fb24 	bl	80007da <HAL_CAN_AddTxMessage>
    HAL_Delay(10);
 8000192:	200a      	movs	r0, #10
 8000194:	f000 f9be 	bl	8000514 <HAL_Delay>
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000198:	e7f5      	b.n	8000186 <main+0x3a>
 800019a:	bf00      	nop
 800019c:	20000028 	.word	0x20000028
 80001a0:	20000050 	.word	0x20000050
 80001a4:	20000068 	.word	0x20000068
 80001a8:	20000070 	.word	0x20000070

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	; 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 fa46 	bl	800164c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d6:	2310      	movs	r3, #16
 80001d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001da:	2300      	movs	r3, #0
 80001dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 fe30 	bl	8000e48 <HAL_RCC_OscConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ee:	f000 f867 	bl	80002c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f2:	230f      	movs	r3, #15
 80001f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 f89e 	bl	800134c <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000216:	f000 f853 	bl	80002c0 <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	; 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <MX_CAN_Init+0x68>)
 800022a:	4a19      	ldr	r2, [pc, #100]	; (8000290 <MX_CAN_Init+0x6c>)
 800022c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 15;
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <MX_CAN_Init+0x68>)
 8000230:	220f      	movs	r2, #15
 8000232:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <MX_CAN_Init+0x68>)
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <MX_CAN_Init+0x68>)
 800023c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000240:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <MX_CAN_Init+0x68>)
 8000244:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000248:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <MX_CAN_Init+0x68>)
 800024c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000250:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <MX_CAN_Init+0x68>)
 8000254:	2200      	movs	r2, #0
 8000256:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_CAN_Init+0x68>)
 800025a:	2200      	movs	r2, #0
 800025c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800025e:	4b0b      	ldr	r3, [pc, #44]	; (800028c <MX_CAN_Init+0x68>)
 8000260:	2200      	movs	r2, #0
 8000262:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <MX_CAN_Init+0x68>)
 8000266:	2200      	movs	r2, #0
 8000268:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <MX_CAN_Init+0x68>)
 800026c:	2200      	movs	r2, #0
 800026e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_CAN_Init+0x68>)
 8000272:	2200      	movs	r2, #0
 8000274:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000276:	4805      	ldr	r0, [pc, #20]	; (800028c <MX_CAN_Init+0x68>)
 8000278:	f000 f970 	bl	800055c <HAL_CAN_Init>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000282:	f000 f81d 	bl	80002c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000028 	.word	0x20000028
 8000290:	40006400 	.word	0x40006400

08000294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <MX_GPIO_Init+0x28>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a07      	ldr	r2, [pc, #28]	; (80002bc <MX_GPIO_Init+0x28>)
 80002a0:	f043 0304 	orr.w	r3, r3, #4
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <MX_GPIO_Init+0x28>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0304 	and.w	r3, r3, #4
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]

}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40021000 	.word	0x40021000

080002c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c4:	b672      	cpsid	i
}
 80002c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80002c8:	e7fe      	b.n	80002c8 <Error_Handler+0x8>
	...

080002cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <HAL_MspInit+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a0d      	ldr	r2, [pc, #52]	; (800030c <HAL_MspInit+0x40>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6193      	str	r3, [r2, #24]
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <HAL_MspInit+0x40>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <HAL_MspInit+0x40>)
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	4a07      	ldr	r2, [pc, #28]	; (800030c <HAL_MspInit+0x40>)
 80002f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f4:	61d3      	str	r3, [r2, #28]
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HAL_MspInit+0x40>)
 80002f8:	69db      	ldr	r3, [r3, #28]
 80002fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002fe:	603b      	str	r3, [r7, #0]
 8000300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40021000 	.word	0x40021000

08000310 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a1c      	ldr	r2, [pc, #112]	; (800039c <HAL_CAN_MspInit+0x8c>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d131      	bne.n	8000394 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <HAL_CAN_MspInit+0x90>)
 8000332:	69db      	ldr	r3, [r3, #28]
 8000334:	4a1a      	ldr	r2, [pc, #104]	; (80003a0 <HAL_CAN_MspInit+0x90>)
 8000336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800033a:	61d3      	str	r3, [r2, #28]
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <HAL_CAN_MspInit+0x90>)
 800033e:	69db      	ldr	r3, [r3, #28]
 8000340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <HAL_CAN_MspInit+0x90>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <HAL_CAN_MspInit+0x90>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <HAL_CAN_MspInit+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	60bb      	str	r3, [r7, #8]
 800035e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000364:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	4619      	mov	r1, r3
 8000374:	480b      	ldr	r0, [pc, #44]	; (80003a4 <HAL_CAN_MspInit+0x94>)
 8000376:	f000 fbe3 	bl	8000b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800037a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000380:	2302      	movs	r3, #2
 8000382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000384:	2303      	movs	r3, #3
 8000386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000388:	f107 0310 	add.w	r3, r7, #16
 800038c:	4619      	mov	r1, r3
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <HAL_CAN_MspInit+0x94>)
 8000390:	f000 fbd6 	bl	8000b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000394:	bf00      	nop
 8000396:	3720      	adds	r7, #32
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40006400 	.word	0x40006400
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010800 	.word	0x40010800

080003a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <NMI_Handler+0x4>

080003ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <HardFault_Handler+0x4>

080003b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <MemManage_Handler+0x4>

080003ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003be:	e7fe      	b.n	80003be <BusFault_Handler+0x4>

080003c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <UsageFault_Handler+0x4>

080003c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr

080003d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr

080003de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr

080003ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ee:	f000 f875 	bl	80004dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
	...

08000404 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000404:	f7ff fff7 	bl	80003f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000408:	480b      	ldr	r0, [pc, #44]	; (8000438 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800040a:	490c      	ldr	r1, [pc, #48]	; (800043c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800040c:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <LoopFillZerobss+0x16>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000410:	e002      	b.n	8000418 <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000416:	3304      	adds	r3, #4

08000418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800041c:	d3f9      	bcc.n	8000412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041e:	4a09      	ldr	r2, [pc, #36]	; (8000444 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000420:	4c09      	ldr	r4, [pc, #36]	; (8000448 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000424:	e001      	b.n	800042a <LoopFillZerobss>

08000426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000428:	3204      	adds	r2, #4

0800042a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800042c:	d3fb      	bcc.n	8000426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800042e:	f001 f8e9 	bl	8001604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000432:	f7ff fe8b 	bl	800014c <main>
  bx lr
 8000436:	4770      	bx	lr
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000440:	080016a0 	.word	0x080016a0
  ldr r2, =_sbss
 8000444:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000448:	20000078 	.word	0x20000078

0800044c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC1_2_IRQHandler>
	...

08000450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <HAL_Init+0x28>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <HAL_Init+0x28>)
 800045a:	f043 0310 	orr.w	r3, r3, #16
 800045e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000460:	2003      	movs	r0, #3
 8000462:	f000 fb39 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000466:	200f      	movs	r0, #15
 8000468:	f000 f808 	bl	800047c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800046c:	f7ff ff2e 	bl	80002cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40022000 	.word	0x40022000

0800047c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_InitTick+0x54>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_InitTick+0x58>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	4619      	mov	r1, r3
 800048e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000492:	fbb3 f3f1 	udiv	r3, r3, r1
 8000496:	fbb2 f3f3 	udiv	r3, r2, r3
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fb43 	bl	8000b26 <HAL_SYSTICK_Config>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004a6:	2301      	movs	r3, #1
 80004a8:	e00e      	b.n	80004c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2b0f      	cmp	r3, #15
 80004ae:	d80a      	bhi.n	80004c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004b0:	2200      	movs	r2, #0
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004b8:	f000 fb19 	bl	8000aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004bc:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <HAL_InitTick+0x5c>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004c2:	2300      	movs	r3, #0
 80004c4:	e000      	b.n	80004c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004c6:	2301      	movs	r3, #1
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20000008 	.word	0x20000008
 80004d8:	20000004 	.word	0x20000004

080004dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_IncTick+0x1c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b05      	ldr	r3, [pc, #20]	; (80004fc <HAL_IncTick+0x20>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4413      	add	r3, r2
 80004ec:	4a03      	ldr	r2, [pc, #12]	; (80004fc <HAL_IncTick+0x20>)
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	20000008 	.word	0x20000008
 80004fc:	20000074 	.word	0x20000074

08000500 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return uwTick;
 8000504:	4b02      	ldr	r3, [pc, #8]	; (8000510 <HAL_GetTick+0x10>)
 8000506:	681b      	ldr	r3, [r3, #0]
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	20000074 	.word	0x20000074

08000514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800051c:	f7ff fff0 	bl	8000500 <HAL_GetTick>
 8000520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800052c:	d005      	beq.n	800053a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_Delay+0x44>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	461a      	mov	r2, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4413      	add	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800053a:	bf00      	nop
 800053c:	f7ff ffe0 	bl	8000500 <HAL_GetTick>
 8000540:	4602      	mov	r2, r0
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	429a      	cmp	r2, r3
 800054a:	d8f7      	bhi.n	800053c <HAL_Delay+0x28>
  {
  }
}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000008 	.word	0x20000008

0800055c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e0ed      	b.n	800074a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d102      	bne.n	8000580 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff fec8 	bl	8000310 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f042 0201 	orr.w	r2, r2, #1
 800058e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000590:	f7ff ffb6 	bl	8000500 <HAL_GetTick>
 8000594:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000596:	e012      	b.n	80005be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000598:	f7ff ffb2 	bl	8000500 <HAL_GetTick>
 800059c:	4602      	mov	r2, r0
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	2b0a      	cmp	r3, #10
 80005a4:	d90b      	bls.n	80005be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2205      	movs	r2, #5
 80005b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e0c5      	b.n	800074a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0e5      	beq.n	8000598 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f022 0202 	bic.w	r2, r2, #2
 80005da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005dc:	f7ff ff90 	bl	8000500 <HAL_GetTick>
 80005e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80005e2:	e012      	b.n	800060a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80005e4:	f7ff ff8c 	bl	8000500 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	2b0a      	cmp	r3, #10
 80005f0:	d90b      	bls.n	800060a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2205      	movs	r2, #5
 8000602:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e09f      	b.n	800074a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	f003 0302 	and.w	r3, r3, #2
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1e5      	bne.n	80005e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	7e1b      	ldrb	r3, [r3, #24]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d108      	bne.n	8000632 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	e007      	b.n	8000642 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000640:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7e5b      	ldrb	r3, [r3, #25]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d108      	bne.n	800065c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	e007      	b.n	800066c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800066a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7e9b      	ldrb	r3, [r3, #26]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d108      	bne.n	8000686 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f042 0220 	orr.w	r2, r2, #32
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	e007      	b.n	8000696 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f022 0220 	bic.w	r2, r2, #32
 8000694:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7edb      	ldrb	r3, [r3, #27]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d108      	bne.n	80006b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f022 0210 	bic.w	r2, r2, #16
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	e007      	b.n	80006c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f042 0210 	orr.w	r2, r2, #16
 80006be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7f1b      	ldrb	r3, [r3, #28]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d108      	bne.n	80006da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f042 0208 	orr.w	r2, r2, #8
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	e007      	b.n	80006ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f022 0208 	bic.w	r2, r2, #8
 80006e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7f5b      	ldrb	r3, [r3, #29]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d108      	bne.n	8000704 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f042 0204 	orr.w	r2, r2, #4
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	e007      	b.n	8000714 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f022 0204 	bic.w	r2, r2, #4
 8000712:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689a      	ldr	r2, [r3, #8]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	431a      	orrs	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	ea42 0103 	orr.w	r1, r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	430a      	orrs	r2, r1
 8000738:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b01      	cmp	r3, #1
 8000764:	d12e      	bne.n	80007c4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2202      	movs	r2, #2
 800076a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f022 0201 	bic.w	r2, r2, #1
 800077c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800077e:	f7ff febf 	bl	8000500 <HAL_GetTick>
 8000782:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000784:	e012      	b.n	80007ac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000786:	f7ff febb 	bl	8000500 <HAL_GetTick>
 800078a:	4602      	mov	r2, r0
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	2b0a      	cmp	r3, #10
 8000792:	d90b      	bls.n	80007ac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000798:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2205      	movs	r2, #5
 80007a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e012      	b.n	80007d2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1e5      	bne.n	8000786 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80007c0:	2300      	movs	r3, #0
 80007c2:	e006      	b.n	80007d2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
  }
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80007da:	b480      	push	{r7}
 80007dc:	b089      	sub	sp, #36	; 0x24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80007f8:	7ffb      	ldrb	r3, [r7, #31]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d003      	beq.n	8000806 <HAL_CAN_AddTxMessage+0x2c>
 80007fe:	7ffb      	ldrb	r3, [r7, #31]
 8000800:	2b02      	cmp	r3, #2
 8000802:	f040 80ad 	bne.w	8000960 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800080c:	2b00      	cmp	r3, #0
 800080e:	d10a      	bne.n	8000826 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000820:	2b00      	cmp	r3, #0
 8000822:	f000 8095 	beq.w	8000950 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	0e1b      	lsrs	r3, r3, #24
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000830:	2201      	movs	r2, #1
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	409a      	lsls	r2, r3
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10d      	bne.n	800085e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800084c:	68f9      	ldr	r1, [r7, #12]
 800084e:	6809      	ldr	r1, [r1, #0]
 8000850:	431a      	orrs	r2, r3
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3318      	adds	r3, #24
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	440b      	add	r3, r1
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e00f      	b.n	800087e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000868:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800086e:	68f9      	ldr	r1, [r7, #12]
 8000870:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000872:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	3318      	adds	r3, #24
 8000878:	011b      	lsls	r3, r3, #4
 800087a:	440b      	add	r3, r1
 800087c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	6819      	ldr	r1, [r3, #0]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	691a      	ldr	r2, [r3, #16]
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3318      	adds	r3, #24
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	440b      	add	r3, r1
 800088e:	3304      	adds	r3, #4
 8000890:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	7d1b      	ldrb	r3, [r3, #20]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d111      	bne.n	80008be <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3318      	adds	r3, #24
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	4413      	add	r3, r2
 80008a6:	3304      	adds	r3, #4
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	6811      	ldr	r1, [r2, #0]
 80008ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3318      	adds	r3, #24
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	440b      	add	r3, r1
 80008ba:	3304      	adds	r3, #4
 80008bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3307      	adds	r3, #7
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	061a      	lsls	r2, r3, #24
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3306      	adds	r3, #6
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	041b      	lsls	r3, r3, #16
 80008ce:	431a      	orrs	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3305      	adds	r3, #5
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	4313      	orrs	r3, r2
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	3204      	adds	r2, #4
 80008de:	7812      	ldrb	r2, [r2, #0]
 80008e0:	4610      	mov	r0, r2
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	6811      	ldr	r1, [r2, #0]
 80008e6:	ea43 0200 	orr.w	r2, r3, r0
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	011b      	lsls	r3, r3, #4
 80008ee:	440b      	add	r3, r1
 80008f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80008f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3303      	adds	r3, #3
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	061a      	lsls	r2, r3, #24
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3302      	adds	r3, #2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	041b      	lsls	r3, r3, #16
 8000906:	431a      	orrs	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3301      	adds	r3, #1
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	4313      	orrs	r3, r2
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	4610      	mov	r0, r2
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	6811      	ldr	r1, [r2, #0]
 800091c:	ea43 0200 	orr.w	r2, r3, r0
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	011b      	lsls	r3, r3, #4
 8000924:	440b      	add	r3, r1
 8000926:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800092a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3318      	adds	r3, #24
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	4413      	add	r3, r2
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	6811      	ldr	r1, [r2, #0]
 800093e:	f043 0201 	orr.w	r2, r3, #1
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3318      	adds	r3, #24
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	440b      	add	r3, r1
 800094a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	e00e      	b.n	800096e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000954:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	e006      	b.n	800096e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000964:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
  }
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	; 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa4:	d301      	bcc.n	8000aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00f      	b.n	8000aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <SysTick_Config+0x40>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab8:	f7ff ff90 	bl	80009dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <SysTick_Config+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SysTick_Config+0x40>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff49 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b00:	f7ff ff5e 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff ff90 	bl	8000a30 <NVIC_EncodePriority>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff5f 	bl	80009dc <__NVIC_SetPriority>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ffb0 	bl	8000a94 <SysTick_Config>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b08b      	sub	sp, #44	; 0x2c
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b52:	e169      	b.n	8000e28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b54:	2201      	movs	r2, #1
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	4013      	ands	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f040 8158 	bne.w	8000e22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	4a9a      	ldr	r2, [pc, #616]	; (8000de0 <HAL_GPIO_Init+0x2a0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d05e      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000b7c:	4a98      	ldr	r2, [pc, #608]	; (8000de0 <HAL_GPIO_Init+0x2a0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d875      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000b82:	4a98      	ldr	r2, [pc, #608]	; (8000de4 <HAL_GPIO_Init+0x2a4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d058      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000b88:	4a96      	ldr	r2, [pc, #600]	; (8000de4 <HAL_GPIO_Init+0x2a4>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d86f      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000b8e:	4a96      	ldr	r2, [pc, #600]	; (8000de8 <HAL_GPIO_Init+0x2a8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d052      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000b94:	4a94      	ldr	r2, [pc, #592]	; (8000de8 <HAL_GPIO_Init+0x2a8>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d869      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000b9a:	4a94      	ldr	r2, [pc, #592]	; (8000dec <HAL_GPIO_Init+0x2ac>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d04c      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000ba0:	4a92      	ldr	r2, [pc, #584]	; (8000dec <HAL_GPIO_Init+0x2ac>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d863      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000ba6:	4a92      	ldr	r2, [pc, #584]	; (8000df0 <HAL_GPIO_Init+0x2b0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d046      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000bac:	4a90      	ldr	r2, [pc, #576]	; (8000df0 <HAL_GPIO_Init+0x2b0>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d85d      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000bb2:	2b12      	cmp	r3, #18
 8000bb4:	d82a      	bhi.n	8000c0c <HAL_GPIO_Init+0xcc>
 8000bb6:	2b12      	cmp	r3, #18
 8000bb8:	d859      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <HAL_GPIO_Init+0x80>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000c3b 	.word	0x08000c3b
 8000bc4:	08000c15 	.word	0x08000c15
 8000bc8:	08000c27 	.word	0x08000c27
 8000bcc:	08000c69 	.word	0x08000c69
 8000bd0:	08000c6f 	.word	0x08000c6f
 8000bd4:	08000c6f 	.word	0x08000c6f
 8000bd8:	08000c6f 	.word	0x08000c6f
 8000bdc:	08000c6f 	.word	0x08000c6f
 8000be0:	08000c6f 	.word	0x08000c6f
 8000be4:	08000c6f 	.word	0x08000c6f
 8000be8:	08000c6f 	.word	0x08000c6f
 8000bec:	08000c6f 	.word	0x08000c6f
 8000bf0:	08000c6f 	.word	0x08000c6f
 8000bf4:	08000c6f 	.word	0x08000c6f
 8000bf8:	08000c6f 	.word	0x08000c6f
 8000bfc:	08000c6f 	.word	0x08000c6f
 8000c00:	08000c6f 	.word	0x08000c6f
 8000c04:	08000c1d 	.word	0x08000c1d
 8000c08:	08000c31 	.word	0x08000c31
 8000c0c:	4a79      	ldr	r2, [pc, #484]	; (8000df4 <HAL_GPIO_Init+0x2b4>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d013      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c12:	e02c      	b.n	8000c6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e029      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	3304      	adds	r3, #4
 8000c22:	623b      	str	r3, [r7, #32]
          break;
 8000c24:	e024      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	623b      	str	r3, [r7, #32]
          break;
 8000c2e:	e01f      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	330c      	adds	r3, #12
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e01a      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c42:	2304      	movs	r3, #4
 8000c44:	623b      	str	r3, [r7, #32]
          break;
 8000c46:	e013      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d105      	bne.n	8000c5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c50:	2308      	movs	r3, #8
 8000c52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69fa      	ldr	r2, [r7, #28]
 8000c58:	611a      	str	r2, [r3, #16]
          break;
 8000c5a:	e009      	b.n	8000c70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	615a      	str	r2, [r3, #20]
          break;
 8000c66:	e003      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e000      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          break;
 8000c6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	2bff      	cmp	r3, #255	; 0xff
 8000c74:	d801      	bhi.n	8000c7a <HAL_GPIO_Init+0x13a>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	e001      	b.n	8000c7e <HAL_GPIO_Init+0x13e>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	2bff      	cmp	r3, #255	; 0xff
 8000c84:	d802      	bhi.n	8000c8c <HAL_GPIO_Init+0x14c>
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	e002      	b.n	8000c92 <HAL_GPIO_Init+0x152>
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	3b08      	subs	r3, #8
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	210f      	movs	r1, #15
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	6a39      	ldr	r1, [r7, #32]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	431a      	orrs	r2, r3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80b1 	beq.w	8000e22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc0:	4b4d      	ldr	r3, [pc, #308]	; (8000df8 <HAL_GPIO_Init+0x2b8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a4c      	ldr	r2, [pc, #304]	; (8000df8 <HAL_GPIO_Init+0x2b8>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b4a      	ldr	r3, [pc, #296]	; (8000df8 <HAL_GPIO_Init+0x2b8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cd8:	4a48      	ldr	r2, [pc, #288]	; (8000dfc <HAL_GPIO_Init+0x2bc>)
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3302      	adds	r3, #2
 8000ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a40      	ldr	r2, [pc, #256]	; (8000e00 <HAL_GPIO_Init+0x2c0>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d013      	beq.n	8000d2c <HAL_GPIO_Init+0x1ec>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a3f      	ldr	r2, [pc, #252]	; (8000e04 <HAL_GPIO_Init+0x2c4>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d00d      	beq.n	8000d28 <HAL_GPIO_Init+0x1e8>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a3e      	ldr	r2, [pc, #248]	; (8000e08 <HAL_GPIO_Init+0x2c8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d007      	beq.n	8000d24 <HAL_GPIO_Init+0x1e4>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a3d      	ldr	r2, [pc, #244]	; (8000e0c <HAL_GPIO_Init+0x2cc>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d101      	bne.n	8000d20 <HAL_GPIO_Init+0x1e0>
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e006      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d20:	2304      	movs	r3, #4
 8000d22:	e004      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d30:	f002 0203 	and.w	r2, r2, #3
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	4093      	lsls	r3, r2
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d3e:	492f      	ldr	r1, [pc, #188]	; (8000dfc <HAL_GPIO_Init+0x2bc>)
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d58:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	492c      	ldr	r1, [pc, #176]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	608b      	str	r3, [r1, #8]
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	4928      	ldr	r1, [pc, #160]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	4922      	ldr	r1, [pc, #136]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	60cb      	str	r3, [r1, #12]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d8e:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	491e      	ldr	r1, [pc, #120]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	4918      	ldr	r1, [pc, #96]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	604b      	str	r3, [r1, #4]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4914      	ldr	r1, [pc, #80]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d021      	beq.n	8000e14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	490e      	ldr	r1, [pc, #56]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	600b      	str	r3, [r1, #0]
 8000ddc:	e021      	b.n	8000e22 <HAL_GPIO_Init+0x2e2>
 8000dde:	bf00      	nop
 8000de0:	10320000 	.word	0x10320000
 8000de4:	10310000 	.word	0x10310000
 8000de8:	10220000 	.word	0x10220000
 8000dec:	10210000 	.word	0x10210000
 8000df0:	10120000 	.word	0x10120000
 8000df4:	10110000 	.word	0x10110000
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40010c00 	.word	0x40010c00
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	40011400 	.word	0x40011400
 8000e10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_GPIO_Init+0x304>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	4909      	ldr	r1, [pc, #36]	; (8000e44 <HAL_GPIO_Init+0x304>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	3301      	adds	r3, #1
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f47f ae8e 	bne.w	8000b54 <HAL_GPIO_Init+0x14>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	372c      	adds	r7, #44	; 0x2c
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e272      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8087 	beq.w	8000f76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e68:	4b92      	ldr	r3, [pc, #584]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d00c      	beq.n	8000e8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e74:	4b8f      	ldr	r3, [pc, #572]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d112      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x5e>
 8000e80:	4b8c      	ldr	r3, [pc, #560]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8c:	d10b      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8e:	4b89      	ldr	r3, [pc, #548]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d06c      	beq.n	8000f74 <HAL_RCC_OscConfig+0x12c>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d168      	bne.n	8000f74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e24c      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eae:	d106      	bne.n	8000ebe <HAL_RCC_OscConfig+0x76>
 8000eb0:	4b80      	ldr	r3, [pc, #512]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a7f      	ldr	r2, [pc, #508]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	e02e      	b.n	8000f1c <HAL_RCC_OscConfig+0xd4>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x98>
 8000ec6:	4b7b      	ldr	r3, [pc, #492]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a7a      	ldr	r2, [pc, #488]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	4b78      	ldr	r3, [pc, #480]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a77      	ldr	r2, [pc, #476]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e01d      	b.n	8000f1c <HAL_RCC_OscConfig+0xd4>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee8:	d10c      	bne.n	8000f04 <HAL_RCC_OscConfig+0xbc>
 8000eea:	4b72      	ldr	r3, [pc, #456]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a71      	ldr	r2, [pc, #452]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4b6f      	ldr	r3, [pc, #444]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a6e      	ldr	r2, [pc, #440]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e00b      	b.n	8000f1c <HAL_RCC_OscConfig+0xd4>
 8000f04:	4b6b      	ldr	r3, [pc, #428]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a6a      	ldr	r2, [pc, #424]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b68      	ldr	r3, [pc, #416]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a67      	ldr	r2, [pc, #412]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d013      	beq.n	8000f4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff faec 	bl	8000500 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fae8 	bl	8000500 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b64      	cmp	r3, #100	; 0x64
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e200      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	4b5d      	ldr	r3, [pc, #372]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0xe4>
 8000f4a:	e014      	b.n	8000f76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fad8 	bl	8000500 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fad4 	bl	8000500 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e1ec      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f66:	4b53      	ldr	r3, [pc, #332]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0x10c>
 8000f72:	e000      	b.n	8000f76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d063      	beq.n	800104a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f82:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f8e:	4b49      	ldr	r3, [pc, #292]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d11c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x18c>
 8000f9a:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d116      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa6:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <HAL_RCC_OscConfig+0x176>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d001      	beq.n	8000fbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e1c0      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fbe:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4939      	ldr	r1, [pc, #228]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd2:	e03a      	b.n	800104a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d020      	beq.n	800101e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fdc:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <HAL_RCC_OscConfig+0x270>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fa8d 	bl	8000500 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fea:	f7ff fa89 	bl	8000500 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e1a1      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001008:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4927      	ldr	r1, [pc, #156]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8001018:	4313      	orrs	r3, r2
 800101a:	600b      	str	r3, [r1, #0]
 800101c:	e015      	b.n	800104a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <HAL_RCC_OscConfig+0x270>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fa6c 	bl	8000500 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fa68 	bl	8000500 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e180      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	2b00      	cmp	r3, #0
 8001054:	d03a      	beq.n	80010cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d019      	beq.n	8001092 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_RCC_OscConfig+0x274>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001064:	f7ff fa4c 	bl	8000500 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff fa48 	bl	8000500 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e160      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_RCC_OscConfig+0x26c>)
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f000 fa9c 	bl	80015c8 <RCC_Delay>
 8001090:	e01c      	b.n	80010cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_RCC_OscConfig+0x274>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001098:	f7ff fa32 	bl	8000500 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800109e:	e00f      	b.n	80010c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a0:	f7ff fa2e 	bl	8000500 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d908      	bls.n	80010c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e146      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000
 80010b8:	42420000 	.word	0x42420000
 80010bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c0:	4b92      	ldr	r3, [pc, #584]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e9      	bne.n	80010a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a6 	beq.w	8001226 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010de:	4b8b      	ldr	r3, [pc, #556]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10d      	bne.n	8001106 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4b88      	ldr	r3, [pc, #544]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a87      	ldr	r2, [pc, #540]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b85      	ldr	r3, [pc, #532]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001102:	2301      	movs	r3, #1
 8001104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001106:	4b82      	ldr	r3, [pc, #520]	; (8001310 <HAL_RCC_OscConfig+0x4c8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110e:	2b00      	cmp	r3, #0
 8001110:	d118      	bne.n	8001144 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001112:	4b7f      	ldr	r3, [pc, #508]	; (8001310 <HAL_RCC_OscConfig+0x4c8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a7e      	ldr	r2, [pc, #504]	; (8001310 <HAL_RCC_OscConfig+0x4c8>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800111e:	f7ff f9ef 	bl	8000500 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001126:	f7ff f9eb 	bl	8000500 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e103      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001138:	4b75      	ldr	r3, [pc, #468]	; (8001310 <HAL_RCC_OscConfig+0x4c8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d106      	bne.n	800115a <HAL_RCC_OscConfig+0x312>
 800114c:	4b6f      	ldr	r3, [pc, #444]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4a6e      	ldr	r2, [pc, #440]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6213      	str	r3, [r2, #32]
 8001158:	e02d      	b.n	80011b6 <HAL_RCC_OscConfig+0x36e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10c      	bne.n	800117c <HAL_RCC_OscConfig+0x334>
 8001162:	4b6a      	ldr	r3, [pc, #424]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a69      	ldr	r2, [pc, #420]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	6213      	str	r3, [r2, #32]
 800116e:	4b67      	ldr	r3, [pc, #412]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4a66      	ldr	r2, [pc, #408]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001174:	f023 0304 	bic.w	r3, r3, #4
 8001178:	6213      	str	r3, [r2, #32]
 800117a:	e01c      	b.n	80011b6 <HAL_RCC_OscConfig+0x36e>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b05      	cmp	r3, #5
 8001182:	d10c      	bne.n	800119e <HAL_RCC_OscConfig+0x356>
 8001184:	4b61      	ldr	r3, [pc, #388]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4a60      	ldr	r2, [pc, #384]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6213      	str	r3, [r2, #32]
 8001190:	4b5e      	ldr	r3, [pc, #376]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a5d      	ldr	r2, [pc, #372]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6213      	str	r3, [r2, #32]
 800119c:	e00b      	b.n	80011b6 <HAL_RCC_OscConfig+0x36e>
 800119e:	4b5b      	ldr	r3, [pc, #364]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a5a      	ldr	r2, [pc, #360]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	6213      	str	r3, [r2, #32]
 80011aa:	4b58      	ldr	r3, [pc, #352]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	4a57      	ldr	r2, [pc, #348]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	f023 0304 	bic.w	r3, r3, #4
 80011b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d015      	beq.n	80011ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011be:	f7ff f99f 	bl	8000500 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c4:	e00a      	b.n	80011dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c6:	f7ff f99b 	bl	8000500 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e0b1      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011dc:	4b4b      	ldr	r3, [pc, #300]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0ee      	beq.n	80011c6 <HAL_RCC_OscConfig+0x37e>
 80011e8:	e014      	b.n	8001214 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ea:	f7ff f989 	bl	8000500 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f7ff f985 	bl	8000500 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001200:	4293      	cmp	r3, r2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e09b      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001208:	4b40      	ldr	r3, [pc, #256]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1ee      	bne.n	80011f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d105      	bne.n	8001226 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a3b      	ldr	r2, [pc, #236]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8087 	beq.w	800133e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001230:	4b36      	ldr	r3, [pc, #216]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b08      	cmp	r3, #8
 800123a:	d061      	beq.n	8001300 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d146      	bne.n	80012d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001244:	4b33      	ldr	r3, [pc, #204]	; (8001314 <HAL_RCC_OscConfig+0x4cc>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff f959 	bl	8000500 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001252:	f7ff f955 	bl	8000500 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e06d      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001264:	4b29      	ldr	r3, [pc, #164]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f0      	bne.n	8001252 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001278:	d108      	bne.n	800128c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4921      	ldr	r1, [pc, #132]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a19      	ldr	r1, [r3, #32]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	430b      	orrs	r3, r1
 800129e:	491b      	ldr	r1, [pc, #108]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_RCC_OscConfig+0x4cc>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff f929 	bl	8000500 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b2:	f7ff f925 	bl	8000500 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e03d      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0x46a>
 80012d0:	e035      	b.n	800133e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_RCC_OscConfig+0x4cc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff f912 	bl	8000500 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e0:	f7ff f90e 	bl	8000500 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e026      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x498>
 80012fe:	e01e      	b.n	800133e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d107      	bne.n	8001318 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e019      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
 800130c:	40021000 	.word	0x40021000
 8001310:	40007000 	.word	0x40007000
 8001314:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_RCC_OscConfig+0x500>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	429a      	cmp	r2, r3
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001336:	429a      	cmp	r2, r3
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e0d0      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001360:	4b6a      	ldr	r3, [pc, #424]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d910      	bls.n	8001390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136e:	4b67      	ldr	r3, [pc, #412]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 0207 	bic.w	r2, r3, #7
 8001376:	4965      	ldr	r1, [pc, #404]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800137e:	4b63      	ldr	r3, [pc, #396]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0b8      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d020      	beq.n	80013de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013a8:	4b59      	ldr	r3, [pc, #356]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4a58      	ldr	r2, [pc, #352]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c0:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a52      	ldr	r2, [pc, #328]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013cc:	4b50      	ldr	r3, [pc, #320]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	494d      	ldr	r1, [pc, #308]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d040      	beq.n	800146c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d107      	bne.n	8001402 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d115      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e07f      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d107      	bne.n	800141a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d109      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e073      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e06b      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800142a:	4b39      	ldr	r3, [pc, #228]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f023 0203 	bic.w	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4936      	ldr	r1, [pc, #216]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800143c:	f7ff f860 	bl	8000500 <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	e00a      	b.n	800145a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001444:	f7ff f85c 	bl	8000500 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e053      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 020c 	and.w	r2, r3, #12
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	429a      	cmp	r2, r3
 800146a:	d1eb      	bne.n	8001444 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d210      	bcs.n	800149c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 0207 	bic.w	r2, r3, #7
 8001482:	4922      	ldr	r1, [pc, #136]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e032      	b.n	8001502 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4916      	ldr	r1, [pc, #88]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d009      	beq.n	80014da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	490e      	ldr	r1, [pc, #56]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014da:	f000 f821 	bl	8001520 <HAL_RCC_GetSysClockFreq>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	490a      	ldr	r1, [pc, #40]	; (8001514 <HAL_RCC_ClockConfig+0x1c8>)
 80014ec:	5ccb      	ldrb	r3, [r1, r3]
 80014ee:	fa22 f303 	lsr.w	r3, r2, r3
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_RCC_ClockConfig+0x1cc>)
 80014f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_ClockConfig+0x1d0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ffbe 	bl	800047c <HAL_InitTick>

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40022000 	.word	0x40022000
 8001510:	40021000 	.word	0x40021000
 8001514:	08001674 	.word	0x08001674
 8001518:	20000000 	.word	0x20000000
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b04      	cmp	r3, #4
 8001548:	d002      	beq.n	8001550 <HAL_RCC_GetSysClockFreq+0x30>
 800154a:	2b08      	cmp	r3, #8
 800154c:	d003      	beq.n	8001556 <HAL_RCC_GetSysClockFreq+0x36>
 800154e:	e027      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001552:	613b      	str	r3, [r7, #16]
      break;
 8001554:	e027      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	0c9b      	lsrs	r3, r3, #18
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d010      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	0c5b      	lsrs	r3, r3, #17
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001582:	fb03 f202 	mul.w	r2, r3, r2
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	fbb2 f3f3 	udiv	r3, r2, r3
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e004      	b.n	800159a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	613b      	str	r3, [r7, #16]
      break;
 800159e:	e002      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015a2:	613b      	str	r3, [r7, #16]
      break;
 80015a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015a6:	693b      	ldr	r3, [r7, #16]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	007a1200 	.word	0x007a1200
 80015bc:	08001684 	.word	0x08001684
 80015c0:	08001694 	.word	0x08001694
 80015c4:	003d0900 	.word	0x003d0900

080015c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <RCC_Delay+0x34>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <RCC_Delay+0x38>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0a5b      	lsrs	r3, r3, #9
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015e4:	bf00      	nop
  }
  while (Delay --);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	60fa      	str	r2, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f9      	bne.n	80015e4 <RCC_Delay+0x1c>
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	20000000 	.word	0x20000000
 8001600:	10624dd3 	.word	0x10624dd3

08001604 <__libc_init_array>:
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	2600      	movs	r6, #0
 8001608:	4d0c      	ldr	r5, [pc, #48]	; (800163c <__libc_init_array+0x38>)
 800160a:	4c0d      	ldr	r4, [pc, #52]	; (8001640 <__libc_init_array+0x3c>)
 800160c:	1b64      	subs	r4, r4, r5
 800160e:	10a4      	asrs	r4, r4, #2
 8001610:	42a6      	cmp	r6, r4
 8001612:	d109      	bne.n	8001628 <__libc_init_array+0x24>
 8001614:	f000 f822 	bl	800165c <_init>
 8001618:	2600      	movs	r6, #0
 800161a:	4d0a      	ldr	r5, [pc, #40]	; (8001644 <__libc_init_array+0x40>)
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <__libc_init_array+0x44>)
 800161e:	1b64      	subs	r4, r4, r5
 8001620:	10a4      	asrs	r4, r4, #2
 8001622:	42a6      	cmp	r6, r4
 8001624:	d105      	bne.n	8001632 <__libc_init_array+0x2e>
 8001626:	bd70      	pop	{r4, r5, r6, pc}
 8001628:	f855 3b04 	ldr.w	r3, [r5], #4
 800162c:	4798      	blx	r3
 800162e:	3601      	adds	r6, #1
 8001630:	e7ee      	b.n	8001610 <__libc_init_array+0xc>
 8001632:	f855 3b04 	ldr.w	r3, [r5], #4
 8001636:	4798      	blx	r3
 8001638:	3601      	adds	r6, #1
 800163a:	e7f2      	b.n	8001622 <__libc_init_array+0x1e>
 800163c:	08001698 	.word	0x08001698
 8001640:	08001698 	.word	0x08001698
 8001644:	08001698 	.word	0x08001698
 8001648:	0800169c 	.word	0x0800169c

0800164c <memset>:
 800164c:	4603      	mov	r3, r0
 800164e:	4402      	add	r2, r0
 8001650:	4293      	cmp	r3, r2
 8001652:	d100      	bne.n	8001656 <memset+0xa>
 8001654:	4770      	bx	lr
 8001656:	f803 1b01 	strb.w	r1, [r3], #1
 800165a:	e7f9      	b.n	8001650 <memset+0x4>

0800165c <_init>:
 800165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165e:	bf00      	nop
 8001660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001662:	bc08      	pop	{r3}
 8001664:	469e      	mov	lr, r3
 8001666:	4770      	bx	lr

08001668 <_fini>:
 8001668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166a:	bf00      	nop
 800166c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166e:	bc08      	pop	{r3}
 8001670:	469e      	mov	lr, r3
 8001672:	4770      	bx	lr
