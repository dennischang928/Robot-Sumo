
I2CRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004318  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004504  08004504  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004504  08004504  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004504  08004504  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004508  08004508  00014508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800450c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  0800457c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  0800457c  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac4a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a14  00000000  00000000  0002ace3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002d108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b71  00000000  00000000  0002da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c76c  00000000  00000000  000455f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e7b  00000000  00000000  00051d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7be0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003118  00000000  00000000  000d7c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800440c 	.word	0x0800440c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800440c 	.word	0x0800440c

0800014c <_write>:
static void	MX_I2C1_Init(void);
static void	MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

int	_write(int file, char *data, int len)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	// arbitrary timeout 1000
	HAL_StatusTypeDef status =
		HAL_UART_Transmit(&huart1, (uint8_t *)data, len, 1000);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000160:	68b9      	ldr	r1, [r7, #8]
 8000162:	4807      	ldr	r0, [pc, #28]	; (8000180 <_write+0x34>)
 8000164:	f003 f80c 	bl	8003180 <HAL_UART_Transmit>
 8000168:	4603      	mov	r3, r0
 800016a:	75fb      	strb	r3, [r7, #23]

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 800016c:	7dfb      	ldrb	r3, [r7, #23]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d101      	bne.n	8000176 <_write+0x2a>
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	e000      	b.n	8000178 <_write+0x2c>
 8000176:	2300      	movs	r3, #0
}
 8000178:	4618      	mov	r0, r3
 800017a:	3718      	adds	r7, #24
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	200000e0 	.word	0x200000e0

08000184 <HAL_I2C_SlaveRxCpltCallback>:

void	HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	printf("DataReceived: ");
 800018c:	480d      	ldr	r0, [pc, #52]	; (80001c4 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 800018e:	f003 f9a9 	bl	80034e4 <iprintf>
	for (int i = 0; i < 10; i++)
 8000192:	2300      	movs	r3, #0
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	e00a      	b.n	80001ae <HAL_I2C_SlaveRxCpltCallback+0x2a>
	{
		printf("%d, ", RX_Buffer[i]);
 8000198:	4a0b      	ldr	r2, [pc, #44]	; (80001c8 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	4413      	add	r3, r2
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4619      	mov	r1, r3
 80001a2:	480a      	ldr	r0, [pc, #40]	; (80001cc <HAL_I2C_SlaveRxCpltCallback+0x48>)
 80001a4:	f003 f99e 	bl	80034e4 <iprintf>
	for (int i = 0; i < 10; i++)
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	3301      	adds	r3, #1
 80001ac:	60fb      	str	r3, [r7, #12]
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2b09      	cmp	r3, #9
 80001b2:	ddf1      	ble.n	8000198 <HAL_I2C_SlaveRxCpltCallback+0x14>
	}
	printf("\n\r");
 80001b4:	4806      	ldr	r0, [pc, #24]	; (80001d0 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80001b6:	f003 f995 	bl	80034e4 <iprintf>
}
 80001ba:	bf00      	nop
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	08004424 	.word	0x08004424
 80001c8:	20000128 	.word	0x20000128
 80001cc:	08004434 	.word	0x08004434
 80001d0:	0800443c 	.word	0x0800443c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int	main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals,
		Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d8:	f000 fa78 	bl	80006cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001dc:	f000 f810 	bl	8000200 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001e0:	f000 f8a2 	bl	8000328 <MX_GPIO_Init>
	MX_I2C1_Init();
 80001e4:	f000 f848 	bl	8000278 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80001e8:	f000 f874 	bl	80002d4 <MX_USART1_UART_Init>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)RX_Buffer, 10);
 80001ec:	220a      	movs	r2, #10
 80001ee:	4902      	ldr	r1, [pc, #8]	; (80001f8 <main+0x24>)
 80001f0:	4802      	ldr	r0, [pc, #8]	; (80001fc <main+0x28>)
 80001f2:	f000 ff3d 	bl	8001070 <HAL_I2C_Slave_Receive_IT>
 80001f6:	e7f9      	b.n	80001ec <main+0x18>
 80001f8:	20000128 	.word	0x20000128
 80001fc:	2000008c 	.word	0x2000008c

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void	SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b090      	sub	sp, #64	; 0x40
 8000204:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f003 f960 	bl	80034d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022a:	2310      	movs	r3, #16
 800022c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022e:	2300      	movs	r3, #0
 8000230:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	4618      	mov	r0, r3
 8000238:	f002 fb42 	bl	80028c0 <HAL_RCC_OscConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x46>
	{
		Error_Handler();
 8000242:	f000 f893 	bl	800036c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000246:	230f      	movs	r3, #15
 8000248:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fdb0 	bl	8002dc4 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x6e>
	{
		Error_Handler();
 800026a:	f000 f87f 	bl	800036c <Error_Handler>
	}
}
 800026e:	bf00      	nop
 8000270:	3740      	adds	r7, #64	; 0x40
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void	MX_I2C1_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <MX_I2C1_Init+0x50>)
 800027e:	4a13      	ldr	r2, [pc, #76]	; (80002cc <MX_I2C1_Init+0x54>)
 8000280:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <MX_I2C1_Init+0x50>)
 8000284:	4a12      	ldr	r2, [pc, #72]	; (80002d0 <MX_I2C1_Init+0x58>)
 8000286:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <MX_I2C1_Init+0x50>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 2;
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <MX_I2C1_Init+0x50>)
 8000290:	2202      	movs	r2, #2
 8000292:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <MX_I2C1_Init+0x50>)
 8000296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800029a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <MX_I2C1_Init+0x50>)
 800029e:	2200      	movs	r2, #0
 80002a0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <MX_I2C1_Init+0x50>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002a8:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <MX_I2C1_Init+0x50>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <MX_I2C1_Init+0x50>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <MX_I2C1_Init+0x50>)
 80002b6:	f000 fd83 	bl	8000dc0 <HAL_I2C_Init>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80002c0:	f000 f854 	bl	800036c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000008c 	.word	0x2000008c
 80002cc:	40005400 	.word	0x40005400
 80002d0:	00061a80 	.word	0x00061a80

080002d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void	MX_USART1_UART_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80002d8:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002da:	4a12      	ldr	r2, [pc, #72]	; (8000324 <MX_USART1_UART_Init+0x50>)
 80002dc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002e4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002fa:	220c      	movs	r2, #12
 80002fc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 800030c:	f002 fee8 	bl	80030e0 <HAL_UART_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000316:	f000 f829 	bl	800036c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200000e0 	.word	0x200000e0
 8000324:	40013800 	.word	0x40013800

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void	MX_GPIO_Init(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_GPIO_Init+0x40>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <MX_GPIO_Init+0x40>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6193      	str	r3, [r2, #24]
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_GPIO_Init+0x40>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 0304 	and.w	r3, r3, #4
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_GPIO_Init+0x40>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a07      	ldr	r2, [pc, #28]	; (8000368 <MX_GPIO_Init+0x40>)
 800034c:	f043 0308 	orr.w	r3, r3, #8
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <MX_GPIO_Init+0x40>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0308 	and.w	r3, r3, #8
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	683b      	ldr	r3, [r7, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000

0800036c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void	Error_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
}
 8000372:	bf00      	nop
	__disable_irq();
	// while (1)
	// {
	// }
	/* USER CODE END Error_Handler_Debug */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <HAL_MspInit+0x40>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <HAL_MspInit+0x40>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <HAL_MspInit+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <HAL_MspInit+0x40>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <HAL_MspInit+0x40>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a4:	61d3      	str	r3, [r2, #28]
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <HAL_MspInit+0x40>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c8:	f107 0314 	add.w	r3, r7, #20
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a21      	ldr	r2, [pc, #132]	; (8000460 <HAL_I2C_MspInit+0xa0>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d13a      	bne.n	8000456 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	4b20      	ldr	r3, [pc, #128]	; (8000464 <HAL_I2C_MspInit+0xa4>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a1f      	ldr	r2, [pc, #124]	; (8000464 <HAL_I2C_MspInit+0xa4>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <HAL_I2C_MspInit+0xa4>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	613b      	str	r3, [r7, #16]
 80003f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80003fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003fe:	2312      	movs	r3, #18
 8000400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000402:	2303      	movs	r3, #3
 8000404:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	4619      	mov	r1, r3
 800040c:	4816      	ldr	r0, [pc, #88]	; (8000468 <HAL_I2C_MspInit+0xa8>)
 800040e:	f000 fb53 	bl	8000ab8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000412:	4b16      	ldr	r3, [pc, #88]	; (800046c <HAL_I2C_MspInit+0xac>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
 8000418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800041a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800041e:	627b      	str	r3, [r7, #36]	; 0x24
 8000420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000422:	f043 0302 	orr.w	r3, r3, #2
 8000426:	627b      	str	r3, [r7, #36]	; 0x24
 8000428:	4a10      	ldr	r2, [pc, #64]	; (800046c <HAL_I2C_MspInit+0xac>)
 800042a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800042c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <HAL_I2C_MspInit+0xa4>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a0c      	ldr	r2, [pc, #48]	; (8000464 <HAL_I2C_MspInit+0xa4>)
 8000434:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <HAL_I2C_MspInit+0xa4>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2100      	movs	r1, #0
 800044a:	201f      	movs	r0, #31
 800044c:	f000 fa77 	bl	800093e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000450:	201f      	movs	r0, #31
 8000452:	f000 fa90 	bl	8000976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000456:	bf00      	nop
 8000458:	3728      	adds	r7, #40	; 0x28
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40005400 	.word	0x40005400
 8000464:	40021000 	.word	0x40021000
 8000468:	40010c00 	.word	0x40010c00
 800046c:	40010000 	.word	0x40010000

08000470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <HAL_UART_MspInit+0x8c>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d131      	bne.n	80004f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <HAL_UART_MspInit+0x90>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a1a      	ldr	r2, [pc, #104]	; (8000500 <HAL_UART_MspInit+0x90>)
 8000496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <HAL_UART_MspInit+0x90>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <HAL_UART_MspInit+0x90>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a14      	ldr	r2, [pc, #80]	; (8000500 <HAL_UART_MspInit+0x90>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <HAL_UART_MspInit+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c6:	2302      	movs	r3, #2
 80004c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ca:	2303      	movs	r3, #3
 80004cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	480b      	ldr	r0, [pc, #44]	; (8000504 <HAL_UART_MspInit+0x94>)
 80004d6:	f000 faef 	bl	8000ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <HAL_UART_MspInit+0x94>)
 80004f0:	f000 fae2 	bl	8000ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40013800 	.word	0x40013800
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800050c:	e7fe      	b.n	800050c <NMI_Handler+0x4>

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <MemManage_Handler+0x4>

0800051a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler+0x4>

08000520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <UsageFault_Handler+0x4>

08000526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054e:	f000 f903 	bl	8000758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <I2C1_EV_IRQHandler+0x10>)
 800055e:	f000 fdf5 	bl	800114c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	2000008c 	.word	0x2000008c

0800056c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	e00a      	b.n	8000594 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800057e:	f3af 8000 	nop.w
 8000582:	4601      	mov	r1, r0
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	60ba      	str	r2, [r7, #8]
 800058a:	b2ca      	uxtb	r2, r1
 800058c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	3301      	adds	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	dbf0      	blt.n	800057e <_read+0x12>
  }

  return len;
 800059c:	687b      	ldr	r3, [r7, #4]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005cc:	605a      	str	r2, [r3, #4]
  return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <_isatty>:

int _isatty(int file)
{
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005e2:	2301      	movs	r3, #1
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
	...

08000608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <_sbrk+0x5c>)
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <_sbrk+0x60>)
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <_sbrk+0x64>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <_sbrk+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	429a      	cmp	r2, r3
 8000636:	d207      	bcs.n	8000648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000638:	f002 ff22 	bl	8003480 <__errno>
 800063c:	4603      	mov	r3, r0
 800063e:	220c      	movs	r2, #12
 8000640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000646:	e009      	b.n	800065c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <_sbrk+0x64>)
 8000658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20005000 	.word	0x20005000
 8000668:	00000400 	.word	0x00000400
 800066c:	20000134 	.word	0x20000134
 8000670:	20000150 	.word	0x20000150

08000674 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000680:	f7ff fff8 	bl	8000674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000686:	490c      	ldr	r1, [pc, #48]	; (80006b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800069c:	4c09      	ldr	r4, [pc, #36]	; (80006c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006aa:	f002 feef 	bl	800348c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ae:	f7ff fd91 	bl	80001d4 <main>
  bx lr
 80006b2:	4770      	bx	lr
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006bc:	0800450c 	.word	0x0800450c
  ldr r2, =_sbss
 80006c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006c4:	2000014c 	.word	0x2000014c

080006c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC1_2_IRQHandler>
	...

080006cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <HAL_Init+0x28>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_Init+0x28>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 f923 	bl	8000928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e2:	200f      	movs	r0, #15
 80006e4:	f000 f808 	bl	80006f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e8:	f7ff fe48 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40022000 	.word	0x40022000

080006f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x54>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_InitTick+0x58>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000712:	fbb2 f3f3 	udiv	r3, r2, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f93b 	bl	8000992 <HAL_SYSTICK_Config>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e00e      	b.n	8000744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b0f      	cmp	r3, #15
 800072a:	d80a      	bhi.n	8000742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072c:	2200      	movs	r2, #0
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000734:	f000 f903 	bl	800093e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <HAL_InitTick+0x5c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	e000      	b.n	8000744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	20000004 	.word	0x20000004

08000758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_IncTick+0x1c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x20>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4413      	add	r3, r2
 8000768:	4a03      	ldr	r2, [pc, #12]	; (8000778 <HAL_IncTick+0x20>)
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	20000008 	.word	0x20000008
 8000778:	20000138 	.word	0x20000138

0800077c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <HAL_GetTick+0x10>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	20000138 	.word	0x20000138

08000790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c2:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	60d3      	str	r3, [r2, #12]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <__NVIC_GetPriorityGrouping+0x18>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	f003 0307 	and.w	r3, r3, #7
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	2b00      	cmp	r3, #0
 8000804:	db0b      	blt.n	800081e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f003 021f 	and.w	r2, r3, #31
 800080c:	4906      	ldr	r1, [pc, #24]	; (8000828 <__NVIC_EnableIRQ+0x34>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	095b      	lsrs	r3, r3, #5
 8000814:	2001      	movs	r0, #1
 8000816:	fa00 f202 	lsl.w	r2, r0, r2
 800081a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	e000e100 	.word	0xe000e100

0800082c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	db0a      	blt.n	8000856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	b2da      	uxtb	r2, r3
 8000844:	490c      	ldr	r1, [pc, #48]	; (8000878 <__NVIC_SetPriority+0x4c>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	0112      	lsls	r2, r2, #4
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	440b      	add	r3, r1
 8000850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000854:	e00a      	b.n	800086c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4908      	ldr	r1, [pc, #32]	; (800087c <__NVIC_SetPriority+0x50>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	3b04      	subs	r3, #4
 8000864:	0112      	lsls	r2, r2, #4
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	440b      	add	r3, r1
 800086a:	761a      	strb	r2, [r3, #24]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000e100 	.word	0xe000e100
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000880:	b480      	push	{r7}
 8000882:	b089      	sub	sp, #36	; 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	f1c3 0307 	rsb	r3, r3, #7
 800089a:	2b04      	cmp	r3, #4
 800089c:	bf28      	it	cs
 800089e:	2304      	movcs	r3, #4
 80008a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3304      	adds	r3, #4
 80008a6:	2b06      	cmp	r3, #6
 80008a8:	d902      	bls.n	80008b0 <NVIC_EncodePriority+0x30>
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3b03      	subs	r3, #3
 80008ae:	e000      	b.n	80008b2 <NVIC_EncodePriority+0x32>
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43da      	mvns	r2, r3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	401a      	ands	r2, r3
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	43d9      	mvns	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	4313      	orrs	r3, r2
         );
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3724      	adds	r7, #36	; 0x24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f4:	d301      	bcc.n	80008fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00f      	b.n	800091a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <SysTick_Config+0x40>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000902:	210f      	movs	r1, #15
 8000904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000908:	f7ff ff90 	bl	800082c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <SysTick_Config+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <SysTick_Config+0x40>)
 8000914:	2207      	movs	r2, #7
 8000916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	e000e010 	.word	0xe000e010

08000928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ff2d 	bl	8000790 <__NVIC_SetPriorityGrouping>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000950:	f7ff ff42 	bl	80007d8 <__NVIC_GetPriorityGrouping>
 8000954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	6978      	ldr	r0, [r7, #20]
 800095c:	f7ff ff90 	bl	8000880 <NVIC_EncodePriority>
 8000960:	4602      	mov	r2, r0
 8000962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff5f 	bl	800082c <__NVIC_SetPriority>
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff35 	bl	80007f4 <__NVIC_EnableIRQ>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffa2 	bl	80008e4 <SysTick_Config>
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d005      	beq.n	80009d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2204      	movs	r2, #4
 80009c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e051      	b.n	8000a74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f022 020e 	bic.w	r2, r2, #14
 80009de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 0201 	bic.w	r2, r2, #1
 80009ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a22      	ldr	r2, [pc, #136]	; (8000a80 <HAL_DMA_Abort_IT+0xd4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d029      	beq.n	8000a4e <HAL_DMA_Abort_IT+0xa2>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <HAL_DMA_Abort_IT+0xd8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d022      	beq.n	8000a4a <HAL_DMA_Abort_IT+0x9e>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <HAL_DMA_Abort_IT+0xdc>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d01a      	beq.n	8000a44 <HAL_DMA_Abort_IT+0x98>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <HAL_DMA_Abort_IT+0xe0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d012      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x92>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <HAL_DMA_Abort_IT+0xe4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d00a      	beq.n	8000a38 <HAL_DMA_Abort_IT+0x8c>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <HAL_DMA_Abort_IT+0xe8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d102      	bne.n	8000a32 <HAL_DMA_Abort_IT+0x86>
 8000a2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a30:	e00e      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a36:	e00b      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3c:	e008      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a42:	e005      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a48:	e002      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	e000      	b.n	8000a50 <HAL_DMA_Abort_IT+0xa4>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <HAL_DMA_Abort_IT+0xec>)
 8000a52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2201      	movs	r2, #1
 8000a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	4798      	blx	r3
    } 
  }
  return status;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020008 	.word	0x40020008
 8000a84:	4002001c 	.word	0x4002001c
 8000a88:	40020030 	.word	0x40020030
 8000a8c:	40020044 	.word	0x40020044
 8000a90:	40020058 	.word	0x40020058
 8000a94:	4002006c 	.word	0x4002006c
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aaa:	b2db      	uxtb	r3, r3
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
	...

08000ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b08b      	sub	sp, #44	; 0x2c
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aca:	e169      	b.n	8000da0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000acc:	2201      	movs	r2, #1
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	4013      	ands	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f040 8158 	bne.w	8000d9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4a9a      	ldr	r2, [pc, #616]	; (8000d58 <HAL_GPIO_Init+0x2a0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d05e      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
 8000af4:	4a98      	ldr	r2, [pc, #608]	; (8000d58 <HAL_GPIO_Init+0x2a0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d875      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000afa:	4a98      	ldr	r2, [pc, #608]	; (8000d5c <HAL_GPIO_Init+0x2a4>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d058      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
 8000b00:	4a96      	ldr	r2, [pc, #600]	; (8000d5c <HAL_GPIO_Init+0x2a4>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d86f      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000b06:	4a96      	ldr	r2, [pc, #600]	; (8000d60 <HAL_GPIO_Init+0x2a8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d052      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
 8000b0c:	4a94      	ldr	r2, [pc, #592]	; (8000d60 <HAL_GPIO_Init+0x2a8>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d869      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000b12:	4a94      	ldr	r2, [pc, #592]	; (8000d64 <HAL_GPIO_Init+0x2ac>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d04c      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
 8000b18:	4a92      	ldr	r2, [pc, #584]	; (8000d64 <HAL_GPIO_Init+0x2ac>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d863      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000b1e:	4a92      	ldr	r2, [pc, #584]	; (8000d68 <HAL_GPIO_Init+0x2b0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d046      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
 8000b24:	4a90      	ldr	r2, [pc, #576]	; (8000d68 <HAL_GPIO_Init+0x2b0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d85d      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000b2a:	2b12      	cmp	r3, #18
 8000b2c:	d82a      	bhi.n	8000b84 <HAL_GPIO_Init+0xcc>
 8000b2e:	2b12      	cmp	r3, #18
 8000b30:	d859      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000b32:	a201      	add	r2, pc, #4	; (adr r2, 8000b38 <HAL_GPIO_Init+0x80>)
 8000b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b38:	08000bb3 	.word	0x08000bb3
 8000b3c:	08000b8d 	.word	0x08000b8d
 8000b40:	08000b9f 	.word	0x08000b9f
 8000b44:	08000be1 	.word	0x08000be1
 8000b48:	08000be7 	.word	0x08000be7
 8000b4c:	08000be7 	.word	0x08000be7
 8000b50:	08000be7 	.word	0x08000be7
 8000b54:	08000be7 	.word	0x08000be7
 8000b58:	08000be7 	.word	0x08000be7
 8000b5c:	08000be7 	.word	0x08000be7
 8000b60:	08000be7 	.word	0x08000be7
 8000b64:	08000be7 	.word	0x08000be7
 8000b68:	08000be7 	.word	0x08000be7
 8000b6c:	08000be7 	.word	0x08000be7
 8000b70:	08000be7 	.word	0x08000be7
 8000b74:	08000be7 	.word	0x08000be7
 8000b78:	08000be7 	.word	0x08000be7
 8000b7c:	08000b95 	.word	0x08000b95
 8000b80:	08000ba9 	.word	0x08000ba9
 8000b84:	4a79      	ldr	r2, [pc, #484]	; (8000d6c <HAL_GPIO_Init+0x2b4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d013      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b8a:	e02c      	b.n	8000be6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	623b      	str	r3, [r7, #32]
          break;
 8000b92:	e029      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	623b      	str	r3, [r7, #32]
          break;
 8000b9c:	e024      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e01f      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	330c      	adds	r3, #12
 8000bae:	623b      	str	r3, [r7, #32]
          break;
 8000bb0:	e01a      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	623b      	str	r3, [r7, #32]
          break;
 8000bbe:	e013      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d105      	bne.n	8000bd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69fa      	ldr	r2, [r7, #28]
 8000bd0:	611a      	str	r2, [r3, #16]
          break;
 8000bd2:	e009      	b.n	8000be8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	615a      	str	r2, [r3, #20]
          break;
 8000bde:	e003      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
          break;
 8000be4:	e000      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          break;
 8000be6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	2bff      	cmp	r3, #255	; 0xff
 8000bec:	d801      	bhi.n	8000bf2 <HAL_GPIO_Init+0x13a>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	e001      	b.n	8000bf6 <HAL_GPIO_Init+0x13e>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	2bff      	cmp	r3, #255	; 0xff
 8000bfc:	d802      	bhi.n	8000c04 <HAL_GPIO_Init+0x14c>
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	e002      	b.n	8000c0a <HAL_GPIO_Init+0x152>
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	3b08      	subs	r3, #8
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	210f      	movs	r1, #15
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	6a39      	ldr	r1, [r7, #32]
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	fa01 f303 	lsl.w	r3, r1, r3
 8000c24:	431a      	orrs	r2, r3
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 80b1 	beq.w	8000d9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c38:	4b4d      	ldr	r3, [pc, #308]	; (8000d70 <HAL_GPIO_Init+0x2b8>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a4c      	ldr	r2, [pc, #304]	; (8000d70 <HAL_GPIO_Init+0x2b8>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b4a      	ldr	r3, [pc, #296]	; (8000d70 <HAL_GPIO_Init+0x2b8>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c50:	4a48      	ldr	r2, [pc, #288]	; (8000d74 <HAL_GPIO_Init+0x2bc>)
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3302      	adds	r3, #2
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	220f      	movs	r2, #15
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	4013      	ands	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a40      	ldr	r2, [pc, #256]	; (8000d78 <HAL_GPIO_Init+0x2c0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d013      	beq.n	8000ca4 <HAL_GPIO_Init+0x1ec>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a3f      	ldr	r2, [pc, #252]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00d      	beq.n	8000ca0 <HAL_GPIO_Init+0x1e8>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a3e      	ldr	r2, [pc, #248]	; (8000d80 <HAL_GPIO_Init+0x2c8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x1e4>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a3d      	ldr	r2, [pc, #244]	; (8000d84 <HAL_GPIO_Init+0x2cc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <HAL_GPIO_Init+0x1e0>
 8000c94:	2303      	movs	r3, #3
 8000c96:	e006      	b.n	8000ca6 <HAL_GPIO_Init+0x1ee>
 8000c98:	2304      	movs	r3, #4
 8000c9a:	e004      	b.n	8000ca6 <HAL_GPIO_Init+0x1ee>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e002      	b.n	8000ca6 <HAL_GPIO_Init+0x1ee>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <HAL_GPIO_Init+0x1ee>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca8:	f002 0203 	and.w	r2, r2, #3
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	4093      	lsls	r3, r2
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cb6:	492f      	ldr	r1, [pc, #188]	; (8000d74 <HAL_GPIO_Init+0x2bc>)
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d006      	beq.n	8000cde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	492c      	ldr	r1, [pc, #176]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	608b      	str	r3, [r1, #8]
 8000cdc:	e006      	b.n	8000cec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	4928      	ldr	r1, [pc, #160]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	4922      	ldr	r1, [pc, #136]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	60cb      	str	r3, [r1, #12]
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	491e      	ldr	r1, [pc, #120]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	4918      	ldr	r1, [pc, #96]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	604b      	str	r3, [r1, #4]
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4914      	ldr	r1, [pc, #80]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d021      	beq.n	8000d8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	490e      	ldr	r1, [pc, #56]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	600b      	str	r3, [r1, #0]
 8000d54:	e021      	b.n	8000d9a <HAL_GPIO_Init+0x2e2>
 8000d56:	bf00      	nop
 8000d58:	10320000 	.word	0x10320000
 8000d5c:	10310000 	.word	0x10310000
 8000d60:	10220000 	.word	0x10220000
 8000d64:	10210000 	.word	0x10210000
 8000d68:	10120000 	.word	0x10120000
 8000d6c:	10110000 	.word	0x10110000
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010000 	.word	0x40010000
 8000d78:	40010800 	.word	0x40010800
 8000d7c:	40010c00 	.word	0x40010c00
 8000d80:	40011000 	.word	0x40011000
 8000d84:	40011400 	.word	0x40011400
 8000d88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_GPIO_Init+0x304>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	4909      	ldr	r1, [pc, #36]	; (8000dbc <HAL_GPIO_Init+0x304>)
 8000d96:	4013      	ands	r3, r2
 8000d98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	fa22 f303 	lsr.w	r3, r2, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f47f ae8e 	bne.w	8000acc <HAL_GPIO_Init+0x14>
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	372c      	adds	r7, #44	; 0x2c
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e12b      	b.n	800102a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff faea 	bl	80003c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2224      	movs	r2, #36	; 0x24
 8000df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0201 	bic.w	r2, r2, #1
 8000e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e24:	f002 f916 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8000e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	4a81      	ldr	r2, [pc, #516]	; (8001034 <HAL_I2C_Init+0x274>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d807      	bhi.n	8000e44 <HAL_I2C_Init+0x84>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4a80      	ldr	r2, [pc, #512]	; (8001038 <HAL_I2C_Init+0x278>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	bf94      	ite	ls
 8000e3c:	2301      	movls	r3, #1
 8000e3e:	2300      	movhi	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	e006      	b.n	8000e52 <HAL_I2C_Init+0x92>
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4a7d      	ldr	r2, [pc, #500]	; (800103c <HAL_I2C_Init+0x27c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	bf94      	ite	ls
 8000e4c:	2301      	movls	r3, #1
 8000e4e:	2300      	movhi	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e0e7      	b.n	800102a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4a78      	ldr	r2, [pc, #480]	; (8001040 <HAL_I2C_Init+0x280>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	0c9b      	lsrs	r3, r3, #18
 8000e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4a6a      	ldr	r2, [pc, #424]	; (8001034 <HAL_I2C_Init+0x274>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d802      	bhi.n	8000e94 <HAL_I2C_Init+0xd4>
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	3301      	adds	r3, #1
 8000e92:	e009      	b.n	8000ea8 <HAL_I2C_Init+0xe8>
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	4a69      	ldr	r2, [pc, #420]	; (8001044 <HAL_I2C_Init+0x284>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	099b      	lsrs	r3, r3, #6
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	430b      	orrs	r3, r1
 8000eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000eba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	495c      	ldr	r1, [pc, #368]	; (8001034 <HAL_I2C_Init+0x274>)
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d819      	bhi.n	8000efc <HAL_I2C_Init+0x13c>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	1e59      	subs	r1, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed6:	1c59      	adds	r1, r3, #1
 8000ed8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000edc:	400b      	ands	r3, r1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00a      	beq.n	8000ef8 <HAL_I2C_Init+0x138>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	1e59      	subs	r1, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef6:	e051      	b.n	8000f9c <HAL_I2C_Init+0x1dc>
 8000ef8:	2304      	movs	r3, #4
 8000efa:	e04f      	b.n	8000f9c <HAL_I2C_Init+0x1dc>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d111      	bne.n	8000f28 <HAL_I2C_Init+0x168>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	1e58      	subs	r0, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6859      	ldr	r1, [r3, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	440b      	add	r3, r1
 8000f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f16:	3301      	adds	r3, #1
 8000f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	bf0c      	ite	eq
 8000f20:	2301      	moveq	r3, #1
 8000f22:	2300      	movne	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	e012      	b.n	8000f4e <HAL_I2C_Init+0x18e>
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	1e58      	subs	r0, r3, #1
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6859      	ldr	r1, [r3, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	0099      	lsls	r1, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf0c      	ite	eq
 8000f48:	2301      	moveq	r3, #1
 8000f4a:	2300      	movne	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_I2C_Init+0x196>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e022      	b.n	8000f9c <HAL_I2C_Init+0x1dc>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10e      	bne.n	8000f7c <HAL_I2C_Init+0x1bc>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1e58      	subs	r0, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6859      	ldr	r1, [r3, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	440b      	add	r3, r1
 8000f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f70:	3301      	adds	r3, #1
 8000f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7a:	e00f      	b.n	8000f9c <HAL_I2C_Init+0x1dc>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	1e58      	subs	r0, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6859      	ldr	r1, [r3, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	0099      	lsls	r1, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f92:	3301      	adds	r3, #1
 8000f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	6809      	ldr	r1, [r1, #0]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69da      	ldr	r2, [r3, #28]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6911      	ldr	r1, [r2, #16]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68d2      	ldr	r2, [r2, #12]
 8000fd6:	4311      	orrs	r1, r2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2220      	movs	r2, #32
 8001016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	000186a0 	.word	0x000186a0
 8001038:	001e847f 	.word	0x001e847f
 800103c:	003d08ff 	.word	0x003d08ff
 8001040:	431bde83 	.word	0x431bde83
 8001044:	10624dd3 	.word	0x10624dd3

08001048 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	2b80      	cmp	r3, #128	; 0x80
 800105c:	d103      	bne.n	8001066 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b20      	cmp	r3, #32
 8001088:	d158      	bne.n	800113c <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <HAL_I2C_Slave_Receive_IT+0x26>
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e051      	b.n	800113e <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <HAL_I2C_Slave_Receive_IT+0x38>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e04a      	b.n	800113e <HAL_I2C_Slave_Receive_IT+0xce>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d007      	beq.n	80010ce <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 0201 	orr.w	r2, r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010dc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2222      	movs	r2, #34	; 0x22
 80010e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2220      	movs	r2, #32
 80010ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	88fa      	ldrh	r2, [r7, #6]
 80010fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001104:	b29a      	uxth	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <HAL_I2C_Slave_Receive_IT+0xd8>)
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800111e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001136:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	e000      	b.n	800113e <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800113c:	2302      	movs	r3, #2
  }
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	ffff0000 	.word	0xffff0000

0800114c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800116c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001174:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	2b10      	cmp	r3, #16
 800117a:	d003      	beq.n	8001184 <HAL_I2C_EV_IRQHandler+0x38>
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b40      	cmp	r3, #64	; 0x40
 8001180:	f040 80c1 	bne.w	8001306 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10d      	bne.n	80011ba <HAL_I2C_EV_IRQHandler+0x6e>
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80011a4:	d003      	beq.n	80011ae <HAL_I2C_EV_IRQHandler+0x62>
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80011ac:	d101      	bne.n	80011b2 <HAL_I2C_EV_IRQHandler+0x66>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_I2C_EV_IRQHandler+0x68>
 80011b2:	2300      	movs	r3, #0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f000 8132 	beq.w	800141e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00c      	beq.n	80011de <HAL_I2C_EV_IRQHandler+0x92>
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	0a5b      	lsrs	r3, r3, #9
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f001 fb5b 	bl	800288c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 fccd 	bl	8001b76 <I2C_Master_SB>
 80011dc:	e092      	b.n	8001304 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d009      	beq.n	80011fe <HAL_I2C_EV_IRQHandler+0xb2>
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	0a5b      	lsrs	r3, r3, #9
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fd42 	bl	8001c80 <I2C_Master_ADD10>
 80011fc:	e082      	b.n	8001304 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	085b      	lsrs	r3, r3, #1
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d009      	beq.n	800121e <HAL_I2C_EV_IRQHandler+0xd2>
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	0a5b      	lsrs	r3, r3, #9
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 fd5b 	bl	8001cd2 <I2C_Master_ADDR>
 800121c:	e072      	b.n	8001304 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d03b      	beq.n	80012a2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001238:	f000 80f3 	beq.w	8001422 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	09db      	lsrs	r3, r3, #7
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00f      	beq.n	8001268 <HAL_I2C_EV_IRQHandler+0x11c>
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	0a9b      	lsrs	r3, r3, #10
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d009      	beq.n	8001268 <HAL_I2C_EV_IRQHandler+0x11c>
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f939 	bl	80014d8 <I2C_MasterTransmit_TXE>
 8001266:	e04d      	b.n	8001304 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80d6 	beq.w	8001422 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	0a5b      	lsrs	r3, r3, #9
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80cf 	beq.w	8001422 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	2b21      	cmp	r3, #33	; 0x21
 8001288:	d103      	bne.n	8001292 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f9c0 	bl	8001610 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001290:	e0c7      	b.n	8001422 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b40      	cmp	r3, #64	; 0x40
 8001296:	f040 80c4 	bne.w	8001422 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fa2e 	bl	80016fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012a0:	e0bf      	b.n	8001422 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012b0:	f000 80b7 	beq.w	8001422 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	099b      	lsrs	r3, r3, #6
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00f      	beq.n	80012e0 <HAL_I2C_EV_IRQHandler+0x194>
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	0a9b      	lsrs	r3, r3, #10
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d009      	beq.n	80012e0 <HAL_I2C_EV_IRQHandler+0x194>
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d103      	bne.n	80012e0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 faa7 	bl	800182c <I2C_MasterReceive_RXNE>
 80012de:	e011      	b.n	8001304 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 809a 	beq.w	8001422 <HAL_I2C_EV_IRQHandler+0x2d6>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	0a5b      	lsrs	r3, r3, #9
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8093 	beq.w	8001422 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 fb50 	bl	80019a2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001302:	e08e      	b.n	8001422 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001304:	e08d      	b.n	8001422 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	e007      	b.n	8001328 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d012      	beq.n	800135a <HAL_I2C_EV_IRQHandler+0x20e>
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	0a5b      	lsrs	r3, r3, #9
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00c      	beq.n	800135a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001350:	69b9      	ldr	r1, [r7, #24]
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 ff14 	bl	8002180 <I2C_Slave_ADDR>
 8001358:	e066      	b.n	8001428 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d009      	beq.n	800137a <HAL_I2C_EV_IRQHandler+0x22e>
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	0a5b      	lsrs	r3, r3, #9
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 ff4e 	bl	8002214 <I2C_Slave_STOPF>
 8001378:	e056      	b.n	8001428 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	2b21      	cmp	r3, #33	; 0x21
 800137e:	d002      	beq.n	8001386 <HAL_I2C_EV_IRQHandler+0x23a>
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	2b29      	cmp	r3, #41	; 0x29
 8001384:	d125      	bne.n	80013d2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	09db      	lsrs	r3, r3, #7
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00f      	beq.n	80013b2 <HAL_I2C_EV_IRQHandler+0x266>
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	0a9b      	lsrs	r3, r3, #10
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d009      	beq.n	80013b2 <HAL_I2C_EV_IRQHandler+0x266>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fe2c 	bl	8002008 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013b0:	e039      	b.n	8001426 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d033      	beq.n	8001426 <HAL_I2C_EV_IRQHandler+0x2da>
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	0a5b      	lsrs	r3, r3, #9
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d02d      	beq.n	8001426 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fe59 	bl	8002082 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013d0:	e029      	b.n	8001426 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00f      	beq.n	80013fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	0a9b      	lsrs	r3, r3, #10
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d103      	bne.n	80013fe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fe63 	bl	80020c2 <I2C_SlaveReceive_RXNE>
 80013fc:	e014      	b.n	8001428 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00e      	beq.n	8001428 <HAL_I2C_EV_IRQHandler+0x2dc>
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	0a5b      	lsrs	r3, r3, #9
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d008      	beq.n	8001428 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fe91 	bl	800213e <I2C_SlaveReceive_BTF>
 800141c:	e004      	b.n	8001428 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800141e:	bf00      	nop
 8001420:	e002      	b.n	8001428 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001422:	bf00      	nop
 8001424:	e000      	b.n	8001428 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001426:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
 8001470:	4613      	mov	r3, r2
 8001472:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d150      	bne.n	80015a0 <I2C_MasterTransmit_TXE+0xc8>
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2b21      	cmp	r3, #33	; 0x21
 8001502:	d14d      	bne.n	80015a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b08      	cmp	r3, #8
 8001508:	d01d      	beq.n	8001546 <I2C_MasterTransmit_TXE+0x6e>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b20      	cmp	r3, #32
 800150e:	d01a      	beq.n	8001546 <I2C_MasterTransmit_TXE+0x6e>
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001516:	d016      	beq.n	8001546 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001526:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2211      	movs	r2, #17
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2220      	movs	r2, #32
 800153a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff75 	bl	800142e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001544:	e060      	b.n	8001608 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001554:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001564:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2220      	movs	r2, #32
 8001570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b40      	cmp	r3, #64	; 0x40
 800157e:	d107      	bne.n	8001590 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff81 	bl	8001490 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800158e:	e03b      	b.n	8001608 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff48 	bl	800142e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800159e:	e033      	b.n	8001608 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	2b21      	cmp	r3, #33	; 0x21
 80015a4:	d005      	beq.n	80015b2 <I2C_MasterTransmit_TXE+0xda>
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	2b40      	cmp	r3, #64	; 0x40
 80015aa:	d12d      	bne.n	8001608 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b22      	cmp	r3, #34	; 0x22
 80015b0:	d12a      	bne.n	8001608 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d108      	bne.n	80015ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80015cc:	e01c      	b.n	8001608 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b40      	cmp	r3, #64	; 0x40
 80015d8:	d103      	bne.n	80015e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f88e 	bl	80016fc <I2C_MemoryTransmit_TXE_BTF>
}
 80015e0:	e012      	b.n	8001608 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	3b01      	subs	r3, #1
 8001600:	b29a      	uxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001606:	e7ff      	b.n	8001608 <I2C_MasterTransmit_TXE+0x130>
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b21      	cmp	r3, #33	; 0x21
 8001628:	d164      	bne.n	80016f4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162e:	b29b      	uxth	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d012      	beq.n	800165a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	781a      	ldrb	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164e:	b29b      	uxth	r3, r3
 8001650:	3b01      	subs	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001658:	e04c      	b.n	80016f4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b08      	cmp	r3, #8
 800165e:	d01d      	beq.n	800169c <I2C_MasterTransmit_BTF+0x8c>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b20      	cmp	r3, #32
 8001664:	d01a      	beq.n	800169c <I2C_MasterTransmit_BTF+0x8c>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800166c:	d016      	beq.n	800169c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800167c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2211      	movs	r2, #17
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2220      	movs	r2, #32
 8001690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff feca 	bl	800142e <HAL_I2C_MasterTxCpltCallback>
}
 800169a:	e02b      	b.n	80016f4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80016aa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2220      	movs	r2, #32
 80016c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b40      	cmp	r3, #64	; 0x40
 80016d4:	d107      	bne.n	80016e6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fed6 	bl	8001490 <HAL_I2C_MemTxCpltCallback>
}
 80016e4:	e006      	b.n	80016f4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fe9d 	bl	800142e <HAL_I2C_MasterTxCpltCallback>
}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800170a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001710:	2b00      	cmp	r3, #0
 8001712:	d11d      	bne.n	8001750 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	2b01      	cmp	r3, #1
 800171a:	d10b      	bne.n	8001734 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001720:	b2da      	uxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800172c:	1c9a      	adds	r2, r3, #2
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001732:	e077      	b.n	8001824 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001738:	b29b      	uxth	r3, r3
 800173a:	121b      	asrs	r3, r3, #8
 800173c:	b2da      	uxtb	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800174e:	e069      	b.n	8001824 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001754:	2b01      	cmp	r3, #1
 8001756:	d10b      	bne.n	8001770 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175c:	b2da      	uxtb	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800176e:	e059      	b.n	8001824 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001774:	2b02      	cmp	r3, #2
 8001776:	d152      	bne.n	800181e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b22      	cmp	r3, #34	; 0x22
 800177c:	d10d      	bne.n	800179a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800178c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001798:	e044      	b.n	8001824 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	2b21      	cmp	r3, #33	; 0x21
 80017a8:	d112      	bne.n	80017d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80017ce:	e029      	b.n	8001824 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d124      	bne.n	8001824 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	2b21      	cmp	r3, #33	; 0x21
 80017de:	d121      	bne.n	8001824 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2220      	movs	r2, #32
 800180a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fe3a 	bl	8001490 <HAL_I2C_MemTxCpltCallback>
}
 800181c:	e002      	b.n	8001824 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fc12 	bl	8001048 <I2C_Flush_DR>
}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b22      	cmp	r3, #34	; 0x22
 800183e:	f040 80ac 	bne.w	800199a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001846:	b29b      	uxth	r3, r3
 8001848:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d921      	bls.n	8001894 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	3b01      	subs	r3, #1
 8001870:	b29a      	uxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187a:	b29b      	uxth	r3, r3
 800187c:	2b03      	cmp	r3, #3
 800187e:	f040 808c 	bne.w	800199a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001890:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001892:	e082      	b.n	800199a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	2b02      	cmp	r3, #2
 800189a:	d075      	beq.n	8001988 <I2C_MasterReceive_RXNE+0x15c>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d002      	beq.n	80018a8 <I2C_MasterReceive_RXNE+0x7c>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d16f      	bne.n	8001988 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 ffbd 	bl	8002828 <I2C_WaitOnSTOPRequestThroughIT>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d142      	bne.n	800193a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018c2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2220      	movs	r2, #32
 80018fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b40      	cmp	r3, #64	; 0x40
 800190c:	d10a      	bne.n	8001924 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fdc0 	bl	80014a2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001922:	e03a      	b.n	800199a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2212      	movs	r2, #18
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fd84 	bl	8001440 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001938:	e02f      	b.n	800199a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001948:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2220      	movs	r2, #32
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fd97 	bl	80014b4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001986:	e008      	b.n	800199a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001996:	605a      	str	r2, [r3, #4]
}
 8001998:	e7ff      	b.n	800199a <I2C_MasterReceive_RXNE+0x16e>
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d11b      	bne.n	80019f2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80019f0:	e0bd      	b.n	8001b6e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d129      	bne.n	8001a50 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a0a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d00a      	beq.n	8001a28 <I2C_MasterReceive_BTF+0x86>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d007      	beq.n	8001a28 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a26:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001a4e:	e08e      	b.n	8001b6e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d176      	bne.n	8001b48 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d002      	beq.n	8001a66 <I2C_MasterReceive_BTF+0xc4>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d108      	bne.n	8001a78 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e019      	b.n	8001aac <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d002      	beq.n	8001a84 <I2C_MasterReceive_BTF+0xe2>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d108      	bne.n	8001a96 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e00a      	b.n	8001aac <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b10      	cmp	r3, #16
 8001a9a:	d007      	beq.n	8001aac <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aaa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001b06:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b40      	cmp	r3, #64	; 0x40
 8001b1a:	d10a      	bne.n	8001b32 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fcb9 	bl	80014a2 <HAL_I2C_MemRxCpltCallback>
}
 8001b30:	e01d      	b.n	8001b6e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2212      	movs	r2, #18
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff fc7d 	bl	8001440 <HAL_I2C_MasterRxCpltCallback>
}
 8001b46:	e012      	b.n	8001b6e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b40      	cmp	r3, #64	; 0x40
 8001b88:	d117      	bne.n	8001bba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ba2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001ba4:	e067      	b.n	8001c76 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	611a      	str	r2, [r3, #16]
}
 8001bb8:	e05d      	b.n	8001c76 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bc2:	d133      	bne.n	8001c2c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b21      	cmp	r3, #33	; 0x21
 8001bce:	d109      	bne.n	8001be4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	e008      	b.n	8001bf6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <I2C_Master_SB+0x92>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d108      	bne.n	8001c1a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d032      	beq.n	8001c76 <I2C_Master_SB+0x100>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d02d      	beq.n	8001c76 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c28:	605a      	str	r2, [r3, #4]
}
 8001c2a:	e024      	b.n	8001c76 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10e      	bne.n	8001c52 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	11db      	asrs	r3, r3, #7
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f003 0306 	and.w	r3, r3, #6
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f063 030f 	orn	r3, r3, #15
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	611a      	str	r2, [r3, #16]
}
 8001c50:	e011      	b.n	8001c76 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d10d      	bne.n	8001c76 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	11db      	asrs	r3, r3, #7
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f003 0306 	and.w	r3, r3, #6
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f063 030e 	orn	r3, r3, #14
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	611a      	str	r2, [r3, #16]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <I2C_Master_ADD10+0x26>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d108      	bne.n	8001cb8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00c      	beq.n	8001cc8 <I2C_Master_ADD10+0x48>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cc6:	605a      	str	r2, [r3, #4]
  }
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b091      	sub	sp, #68	; 0x44
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ce0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b22      	cmp	r3, #34	; 0x22
 8001cfa:	f040 8174 	bne.w	8001fe6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10f      	bne.n	8001d26 <I2C_Master_ADDR+0x54>
 8001d06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d10b      	bne.n	8001d26 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	e16b      	b.n	8001ffe <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d11d      	bne.n	8001d6a <I2C_Master_ADDR+0x98>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d36:	d118      	bne.n	8001d6a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d5c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	651a      	str	r2, [r3, #80]	; 0x50
 8001d68:	e149      	b.n	8001ffe <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d113      	bne.n	8001d9c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e120      	b.n	8001fde <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	f040 808a 	bne.w	8001ebc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001daa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dae:	d137      	bne.n	8001e20 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dbe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dce:	d113      	bne.n	8001df8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dde:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	e0f2      	b.n	8001fde <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	623b      	str	r3, [r7, #32]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	623b      	str	r3, [r7, #32]
 8001e0c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e0de      	b.n	8001fde <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d02e      	beq.n	8001e84 <I2C_Master_ADDR+0x1b2>
 8001e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d02b      	beq.n	8001e84 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	2b12      	cmp	r3, #18
 8001e30:	d102      	bne.n	8001e38 <I2C_Master_ADDR+0x166>
 8001e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d125      	bne.n	8001e84 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d00e      	beq.n	8001e5c <I2C_Master_ADDR+0x18a>
 8001e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d00b      	beq.n	8001e5c <I2C_Master_ADDR+0x18a>
 8001e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d008      	beq.n	8001e5c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e007      	b.n	8001e6c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e6a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	e0ac      	b.n	8001fde <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e92:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e090      	b.n	8001fde <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d158      	bne.n	8001f78 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d021      	beq.n	8001f10 <I2C_Master_ADDR+0x23e>
 8001ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d01e      	beq.n	8001f10 <I2C_Master_ADDR+0x23e>
 8001ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	d01b      	beq.n	8001f10 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e012      	b.n	8001f36 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f1e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f44:	d14b      	bne.n	8001fde <I2C_Master_ADDR+0x30c>
 8001f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f4c:	d00b      	beq.n	8001f66 <I2C_Master_ADDR+0x294>
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d008      	beq.n	8001f66 <I2C_Master_ADDR+0x294>
 8001f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d005      	beq.n	8001f66 <I2C_Master_ADDR+0x294>
 8001f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5c:	2b10      	cmp	r3, #16
 8001f5e:	d002      	beq.n	8001f66 <I2C_Master_ADDR+0x294>
 8001f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d13b      	bne.n	8001fde <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	e032      	b.n	8001fde <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f86:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f96:	d117      	bne.n	8001fc8 <I2C_Master_ADDR+0x2f6>
 8001f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f9e:	d00b      	beq.n	8001fb8 <I2C_Master_ADDR+0x2e6>
 8001fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d008      	beq.n	8001fb8 <I2C_Master_ADDR+0x2e6>
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d005      	beq.n	8001fb8 <I2C_Master_ADDR+0x2e6>
 8001fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d002      	beq.n	8001fb8 <I2C_Master_ADDR+0x2e6>
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb4:	2b20      	cmp	r3, #32
 8001fb6:	d107      	bne.n	8001fc8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fc6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8001fe4:	e00b      	b.n	8001ffe <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
}
 8001ffc:	e7ff      	b.n	8001ffe <I2C_Master_ADDR+0x32c>
 8001ffe:	bf00      	nop
 8002000:	3744      	adds	r7, #68	; 0x44
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002016:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d02b      	beq.n	800207a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d114      	bne.n	800207a <I2C_SlaveTransmit_TXE+0x72>
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b29      	cmp	r3, #41	; 0x29
 8002054:	d111      	bne.n	800207a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002064:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2221      	movs	r2, #33	; 0x21
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2228      	movs	r2, #40	; 0x28
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff f9ec 	bl	8001452 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d011      	beq.n	80020b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d02c      	beq.n	8002136 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d114      	bne.n	8002136 <I2C_SlaveReceive_RXNE+0x74>
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b2a      	cmp	r3, #42	; 0x2a
 8002110:	d111      	bne.n	8002136 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002120:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2222      	movs	r2, #34	; 0x22
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2228      	movs	r2, #40	; 0x28
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7fe f827 	bl	8000184 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d012      	beq.n	8002176 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800219a:	2b28      	cmp	r3, #40	; 0x28
 800219c:	d127      	bne.n	80021ee <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	09db      	lsrs	r3, r3, #7
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	81bb      	strh	r3, [r7, #12]
 80021d0:	e002      	b.n	80021d8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80021e0:	89ba      	ldrh	r2, [r7, #12]
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff f93c 	bl	8001464 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80021ec:	e00e      	b.n	800220c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002222:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002232:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002260:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800226c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002270:	d172      	bne.n	8002358 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2b22      	cmp	r3, #34	; 0x22
 8002276:	d002      	beq.n	800227e <I2C_Slave_STOPF+0x6a>
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	2b2a      	cmp	r3, #42	; 0x2a
 800227c:	d135      	bne.n	80022ea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	b29a      	uxth	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f043 0204 	orr.w	r2, r3, #4
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fbf0 	bl	8000a9c <HAL_DMA_GetState>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d049      	beq.n	8002356 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	4a69      	ldr	r2, [pc, #420]	; (800246c <I2C_Slave_STOPF+0x258>)
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fb6c 	bl	80009ac <HAL_DMA_Abort_IT>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d03d      	beq.n	8002356 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022e4:	4610      	mov	r0, r2
 80022e6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022e8:	e035      	b.n	8002356 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f043 0204 	orr.w	r2, r3, #4
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe fbba 	bl	8000a9c <HAL_DMA_GetState>
 8002328:	4603      	mov	r3, r0
 800232a:	2b01      	cmp	r3, #1
 800232c:	d014      	beq.n	8002358 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	4a4e      	ldr	r2, [pc, #312]	; (800246c <I2C_Slave_STOPF+0x258>)
 8002334:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fb36 	bl	80009ac <HAL_DMA_Abort_IT>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002350:	4610      	mov	r0, r2
 8002352:	4798      	blx	r3
 8002354:	e000      	b.n	8002358 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002356:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d03e      	beq.n	80023e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b04      	cmp	r3, #4
 800236e:	d112      	bne.n	8002396 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d112      	bne.n	80023ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f043 0204 	orr.w	r2, r3, #4
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f843 	bl	8002474 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80023ee:	e039      	b.n	8002464 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b2a      	cmp	r3, #42	; 0x2a
 80023f4:	d109      	bne.n	800240a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2228      	movs	r2, #40	; 0x28
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7fd febd 	bl	8000184 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b28      	cmp	r3, #40	; 0x28
 8002414:	d111      	bne.n	800243a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a15      	ldr	r2, [pc, #84]	; (8002470 <I2C_Slave_STOPF+0x25c>)
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff f823 	bl	800147e <HAL_I2C_ListenCpltCallback>
}
 8002438:	e014      	b.n	8002464 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	2b22      	cmp	r3, #34	; 0x22
 8002440:	d002      	beq.n	8002448 <I2C_Slave_STOPF+0x234>
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2b22      	cmp	r3, #34	; 0x22
 8002446:	d10d      	bne.n	8002464 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fd fe90 	bl	8000184 <HAL_I2C_SlaveRxCpltCallback>
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	080026d9 	.word	0x080026d9
 8002470:	ffff0000 	.word	0xffff0000

08002474 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002482:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800248a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800248c:	7bbb      	ldrb	r3, [r7, #14]
 800248e:	2b10      	cmp	r3, #16
 8002490:	d002      	beq.n	8002498 <I2C_ITError+0x24>
 8002492:	7bbb      	ldrb	r3, [r7, #14]
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d10a      	bne.n	80024ae <I2C_ITError+0x3a>
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b22      	cmp	r3, #34	; 0x22
 800249c:	d107      	bne.n	80024ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024b4:	2b28      	cmp	r3, #40	; 0x28
 80024b6:	d107      	bne.n	80024c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2228      	movs	r2, #40	; 0x28
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024c6:	e015      	b.n	80024f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024d6:	d00a      	beq.n	80024ee <I2C_ITError+0x7a>
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b60      	cmp	r3, #96	; 0x60
 80024dc:	d007      	beq.n	80024ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002502:	d162      	bne.n	80025ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002512:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002518:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d020      	beq.n	8002564 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002526:	4a6a      	ldr	r2, [pc, #424]	; (80026d0 <I2C_ITError+0x25c>)
 8002528:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fa3c 	bl	80009ac <HAL_DMA_Abort_IT>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8089 	beq.w	800264e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800255e:	4610      	mov	r0, r2
 8002560:	4798      	blx	r3
 8002562:	e074      	b.n	800264e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	4a59      	ldr	r2, [pc, #356]	; (80026d0 <I2C_ITError+0x25c>)
 800256a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fa1b 	bl	80009ac <HAL_DMA_Abort_IT>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d068      	beq.n	800264e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	d10b      	bne.n	80025a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025c4:	4610      	mov	r0, r2
 80025c6:	4798      	blx	r3
 80025c8:	e041      	b.n	800264e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b60      	cmp	r3, #96	; 0x60
 80025d4:	d125      	bne.n	8002622 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d10b      	bne.n	800260a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe ff53 	bl	80014c6 <HAL_I2C_AbortCpltCallback>
 8002620:	e015      	b.n	800264e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d10b      	bne.n	8002648 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7fe ff33 	bl	80014b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10e      	bne.n	800267c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800268a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002692:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d113      	bne.n	80026c8 <I2C_ITError+0x254>
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b28      	cmp	r3, #40	; 0x28
 80026a4:	d110      	bne.n	80026c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <I2C_ITError+0x260>)
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe fedb 	bl	800147e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	080026d9 	.word	0x080026d9
 80026d4:	ffff0000 	.word	0xffff0000

080026d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026f2:	4b4b      	ldr	r3, [pc, #300]	; (8002820 <I2C_DMAAbort+0x148>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	08db      	lsrs	r3, r3, #3
 80026f8:	4a4a      	ldr	r2, [pc, #296]	; (8002824 <I2C_DMAAbort+0x14c>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0a1a      	lsrs	r2, r3, #8
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00da      	lsls	r2, r3, #3
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f043 0220 	orr.w	r2, r3, #32
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800271e:	e00a      	b.n	8002736 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3b01      	subs	r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002734:	d0ea      	beq.n	800270c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002742:	2200      	movs	r2, #0
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	2200      	movs	r2, #0
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002764:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2200      	movs	r2, #0
 800276a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	2200      	movs	r2, #0
 800277a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	2200      	movs	r2, #0
 800278a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b60      	cmp	r3, #96	; 0x60
 80027a6:	d10e      	bne.n	80027c6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7fe fe81 	bl	80014c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80027c4:	e027      	b.n	8002816 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027cc:	2b28      	cmp	r3, #40	; 0x28
 80027ce:	d117      	bne.n	8002800 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2200      	movs	r2, #0
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2228      	movs	r2, #40	; 0x28
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027fe:	e007      	b.n	8002810 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002810:	6978      	ldr	r0, [r7, #20]
 8002812:	f7fe fe4f 	bl	80014b4 <HAL_I2C_ErrorCallback>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000000 	.word	0x20000000
 8002824:	14f8b589 	.word	0x14f8b589

08002828 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	4a13      	ldr	r2, [pc, #76]	; (8002888 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	0a1a      	lsrs	r2, r3, #8
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3b01      	subs	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d107      	bne.n	8002866 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f043 0220 	orr.w	r2, r3, #32
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e008      	b.n	8002878 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002874:	d0e9      	beq.n	800284a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000000 	.word	0x20000000
 8002888:	14f8b589 	.word	0x14f8b589

0800288c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800289c:	d103      	bne.n	80028a6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80028a4:	e007      	b.n	80028b6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80028ae:	d102      	bne.n	80028b6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2208      	movs	r2, #8
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e272      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8087 	beq.w	80029ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e0:	4b92      	ldr	r3, [pc, #584]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d00c      	beq.n	8002906 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028ec:	4b8f      	ldr	r3, [pc, #572]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d112      	bne.n	800291e <HAL_RCC_OscConfig+0x5e>
 80028f8:	4b8c      	ldr	r3, [pc, #560]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002904:	d10b      	bne.n	800291e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002906:	4b89      	ldr	r3, [pc, #548]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d06c      	beq.n	80029ec <HAL_RCC_OscConfig+0x12c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d168      	bne.n	80029ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e24c      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002926:	d106      	bne.n	8002936 <HAL_RCC_OscConfig+0x76>
 8002928:	4b80      	ldr	r3, [pc, #512]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a7f      	ldr	r2, [pc, #508]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800292e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	e02e      	b.n	8002994 <HAL_RCC_OscConfig+0xd4>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0x98>
 800293e:	4b7b      	ldr	r3, [pc, #492]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a7a      	ldr	r2, [pc, #488]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b78      	ldr	r3, [pc, #480]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a77      	ldr	r2, [pc, #476]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e01d      	b.n	8002994 <HAL_RCC_OscConfig+0xd4>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0xbc>
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a71      	ldr	r2, [pc, #452]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b6f      	ldr	r3, [pc, #444]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6e      	ldr	r2, [pc, #440]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e00b      	b.n	8002994 <HAL_RCC_OscConfig+0xd4>
 800297c:	4b6b      	ldr	r3, [pc, #428]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a6a      	ldr	r2, [pc, #424]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b68      	ldr	r3, [pc, #416]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a67      	ldr	r2, [pc, #412]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800298e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002992:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fd feee 	bl	800077c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fd feea 	bl	800077c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e200      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b5d      	ldr	r3, [pc, #372]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0xe4>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fd feda 	bl	800077c <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fd fed6 	bl	800077c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	; 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e1ec      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	4b53      	ldr	r3, [pc, #332]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x10c>
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d063      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029fa:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a06:	4b49      	ldr	r3, [pc, #292]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d11c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x18c>
 8002a12:	4b46      	ldr	r3, [pc, #280]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d116      	bne.n	8002a4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	4b43      	ldr	r3, [pc, #268]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_RCC_OscConfig+0x176>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e1c0      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	4b3d      	ldr	r3, [pc, #244]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4939      	ldr	r1, [pc, #228]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	e03a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a54:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fd fe8f 	bl	800077c <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a62:	f7fd fe8b 	bl	800077c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1a1      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a80:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4927      	ldr	r1, [pc, #156]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
 8002a94:	e015      	b.n	8002ac2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fd fe6e 	bl	800077c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7fd fe6a 	bl	800077c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e180      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d03a      	beq.n	8002b44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d019      	beq.n	8002b0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad6:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7fd fe4e 	bl	800077c <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae4:	f7fd fe4a 	bl	800077c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e160      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f000 face 	bl	80030a4 <RCC_Delay>
 8002b08:	e01c      	b.n	8002b44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fd fe34 	bl	800077c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b16:	e00f      	b.n	8002b38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b18:	f7fd fe30 	bl	800077c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d908      	bls.n	8002b38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e146      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	42420000 	.word	0x42420000
 8002b34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b38:	4b92      	ldr	r3, [pc, #584]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e9      	bne.n	8002b18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a6 	beq.w	8002c9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b56:	4b8b      	ldr	r3, [pc, #556]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	4b88      	ldr	r3, [pc, #544]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	4a87      	ldr	r2, [pc, #540]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	61d3      	str	r3, [r2, #28]
 8002b6e:	4b85      	ldr	r3, [pc, #532]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b82      	ldr	r3, [pc, #520]	; (8002d88 <HAL_RCC_OscConfig+0x4c8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d118      	bne.n	8002bbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8a:	4b7f      	ldr	r3, [pc, #508]	; (8002d88 <HAL_RCC_OscConfig+0x4c8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a7e      	ldr	r2, [pc, #504]	; (8002d88 <HAL_RCC_OscConfig+0x4c8>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b96:	f7fd fdf1 	bl	800077c <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9e:	f7fd fded 	bl	800077c <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b64      	cmp	r3, #100	; 0x64
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e103      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	4b75      	ldr	r3, [pc, #468]	; (8002d88 <HAL_RCC_OscConfig+0x4c8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x312>
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4a6e      	ldr	r2, [pc, #440]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6213      	str	r3, [r2, #32]
 8002bd0:	e02d      	b.n	8002c2e <HAL_RCC_OscConfig+0x36e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x334>
 8002bda:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a69      	ldr	r2, [pc, #420]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6213      	str	r3, [r2, #32]
 8002be6:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a66      	ldr	r2, [pc, #408]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6213      	str	r3, [r2, #32]
 8002bf2:	e01c      	b.n	8002c2e <HAL_RCC_OscConfig+0x36e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCC_OscConfig+0x356>
 8002bfc:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	4a60      	ldr	r2, [pc, #384]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	6213      	str	r3, [r2, #32]
 8002c08:	4b5e      	ldr	r3, [pc, #376]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	4a5d      	ldr	r2, [pc, #372]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6213      	str	r3, [r2, #32]
 8002c14:	e00b      	b.n	8002c2e <HAL_RCC_OscConfig+0x36e>
 8002c16:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4a5a      	ldr	r2, [pc, #360]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6213      	str	r3, [r2, #32]
 8002c22:	4b58      	ldr	r3, [pc, #352]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a57      	ldr	r2, [pc, #348]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d015      	beq.n	8002c62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7fd fda1 	bl	800077c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fd fd9d 	bl	800077c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0b1      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c54:	4b4b      	ldr	r3, [pc, #300]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ee      	beq.n	8002c3e <HAL_RCC_OscConfig+0x37e>
 8002c60:	e014      	b.n	8002c8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c62:	f7fd fd8b 	bl	800077c <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fd fd87 	bl	800077c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e09b      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ee      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d105      	bne.n	8002c9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c92:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4a3b      	ldr	r2, [pc, #236]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8087 	beq.w	8002db6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca8:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d061      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d146      	bne.n	8002d4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbc:	4b33      	ldr	r3, [pc, #204]	; (8002d8c <HAL_RCC_OscConfig+0x4cc>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7fd fd5b 	bl	800077c <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fd fd57 	bl	800077c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e06d      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f0      	bne.n	8002cca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf0:	d108      	bne.n	8002d04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	4921      	ldr	r1, [pc, #132]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d04:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a19      	ldr	r1, [r3, #32]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	430b      	orrs	r3, r1
 8002d16:	491b      	ldr	r1, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_RCC_OscConfig+0x4cc>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7fd fd2b 	bl	800077c <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7fd fd27 	bl	800077c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e03d      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x46a>
 8002d48:	e035      	b.n	8002db6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fd fd14 	bl	800077c <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fd fd10 	bl	800077c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e026      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x498>
 8002d76:	e01e      	b.n	8002db6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e019      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_OscConfig+0x500>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0d0      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d910      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b67      	ldr	r3, [pc, #412]	; (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 0207 	bic.w	r2, r3, #7
 8002dee:	4965      	ldr	r1, [pc, #404]	; (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0b8      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e20:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e38:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	494d      	ldr	r1, [pc, #308]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d040      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d115      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b41      	ldr	r3, [pc, #260]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e073      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e06b      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea2:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4936      	ldr	r1, [pc, #216]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb4:	f7fd fc62 	bl	800077c <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7fd fc5e 	bl	800077c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e053      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 020c 	and.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1eb      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d210      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 0207 	bic.w	r2, r3, #7
 8002efa:	4922      	ldr	r1, [pc, #136]	; (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e032      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4916      	ldr	r1, [pc, #88]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	490e      	ldr	r1, [pc, #56]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f52:	f000 f821 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	490a      	ldr	r1, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	5ccb      	ldrb	r3, [r1, r3]
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <HAL_RCC_ClockConfig+0x1cc>)
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1d0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd fbc0 	bl	80006f8 <HAL_InitTick>

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40022000 	.word	0x40022000
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	08004440 	.word	0x08004440
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20000004 	.word	0x20000004

08002f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	; (800302c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d002      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x30>
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0x36>
 8002fc6:	e027      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fca:	613b      	str	r3, [r7, #16]
      break;
 8002fcc:	e027      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	0c9b      	lsrs	r3, r3, #18
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	4a17      	ldr	r2, [pc, #92]	; (8003034 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	0c5b      	lsrs	r3, r3, #17
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	4a11      	ldr	r2, [pc, #68]	; (8003038 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ff2:	5cd3      	ldrb	r3, [r2, r3]
 8002ff4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ffa:	fb03 f202 	mul.w	r2, r3, r2
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	e004      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a0c      	ldr	r2, [pc, #48]	; (800303c <HAL_RCC_GetSysClockFreq+0xa4>)
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	613b      	str	r3, [r7, #16]
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_RCC_GetSysClockFreq+0x98>)
 800301a:	613b      	str	r3, [r7, #16]
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	693b      	ldr	r3, [r7, #16]
}
 8003020:	4618      	mov	r0, r3
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
 8003030:	007a1200 	.word	0x007a1200
 8003034:	08004458 	.word	0x08004458
 8003038:	08004468 	.word	0x08004468
 800303c:	003d0900 	.word	0x003d0900

08003040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003044:	4b02      	ldr	r3, [pc, #8]	; (8003050 <HAL_RCC_GetHCLKFreq+0x10>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	20000000 	.word	0x20000000

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003058:	f7ff fff2 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	0a1b      	lsrs	r3, r3, #8
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4903      	ldr	r1, [pc, #12]	; (8003078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	08004450 	.word	0x08004450

0800307c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003080:	f7ff ffde 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	0adb      	lsrs	r3, r3, #11
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4903      	ldr	r1, [pc, #12]	; (80030a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000
 80030a0:	08004450 	.word	0x08004450

080030a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <RCC_Delay+0x34>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <RCC_Delay+0x38>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0a5b      	lsrs	r3, r3, #9
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030c0:	bf00      	nop
  }
  while (Delay --);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1e5a      	subs	r2, r3, #1
 80030c6:	60fa      	str	r2, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f9      	bne.n	80030c0 <RCC_Delay+0x1c>
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	20000000 	.word	0x20000000
 80030dc:	10624dd3 	.word	0x10624dd3

080030e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e042      	b.n	8003178 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd f9b2 	bl	8000470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f91d 	bl	8003364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b20      	cmp	r3, #32
 800319e:	d16d      	bne.n	800327c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_UART_Transmit+0x2c>
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e066      	b.n	800327e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2221      	movs	r2, #33	; 0x21
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031be:	f7fd fadd 	bl	800077c <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d8:	d108      	bne.n	80031ec <HAL_UART_Transmit+0x6c>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	e003      	b.n	80031f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031f4:	e02a      	b.n	800324c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f840 	bl	8003286 <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e036      	b.n	800327e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10b      	bne.n	800322e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003224:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	3302      	adds	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	e007      	b.n	800323e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	3301      	adds	r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1cf      	bne.n	80031f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	2140      	movs	r1, #64	; 0x40
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f810 	bl	8003286 <UART_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e006      	b.n	800327e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b090      	sub	sp, #64	; 0x40
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003296:	e050      	b.n	800333a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800329e:	d04c      	beq.n	800333a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80032a6:	f7fd fa69 	bl	800077c <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d241      	bcs.n	800333a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d6:	637a      	str	r2, [r7, #52]	; 0x34
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e5      	bne.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3314      	adds	r3, #20
 80032f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	613b      	str	r3, [r7, #16]
   return(result);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	63bb      	str	r3, [r7, #56]	; 0x38
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3314      	adds	r3, #20
 8003308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800330a:	623a      	str	r2, [r7, #32]
 800330c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	69f9      	ldr	r1, [r7, #28]
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	61bb      	str	r3, [r7, #24]
   return(result);
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e5      	bne.n	80032ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e00f      	b.n	800335a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4013      	ands	r3, r2
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	429a      	cmp	r2, r3
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	429a      	cmp	r2, r3
 8003356:	d09f      	beq.n	8003298 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3740      	adds	r7, #64	; 0x40
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800339e:	f023 030c 	bic.w	r3, r3, #12
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2c      	ldr	r2, [pc, #176]	; (8003478 <UART_SetConfig+0x114>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d103      	bne.n	80033d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033cc:	f7ff fe56 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	e002      	b.n	80033da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033d4:	f7ff fe3e 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 80033d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009a      	lsls	r2, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	4a22      	ldr	r2, [pc, #136]	; (800347c <UART_SetConfig+0x118>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	0119      	lsls	r1, r3, #4
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	009a      	lsls	r2, r3, #2
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <UART_SetConfig+0x118>)
 8003412:	fba3 0302 	umull	r0, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2064      	movs	r0, #100	; 0x64
 800341a:	fb00 f303 	mul.w	r3, r0, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	3332      	adds	r3, #50	; 0x32
 8003424:	4a15      	ldr	r2, [pc, #84]	; (800347c <UART_SetConfig+0x118>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003430:	4419      	add	r1, r3
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009a      	lsls	r2, r3, #2
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	fbb2 f2f3 	udiv	r2, r2, r3
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <UART_SetConfig+0x118>)
 800344a:	fba3 0302 	umull	r0, r3, r3, r2
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2064      	movs	r0, #100	; 0x64
 8003452:	fb00 f303 	mul.w	r3, r0, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	3332      	adds	r3, #50	; 0x32
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <UART_SetConfig+0x118>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	f003 020f 	and.w	r2, r3, #15
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	440a      	add	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40013800 	.word	0x40013800
 800347c:	51eb851f 	.word	0x51eb851f

08003480 <__errno>:
 8003480:	4b01      	ldr	r3, [pc, #4]	; (8003488 <__errno+0x8>)
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	2000000c 	.word	0x2000000c

0800348c <__libc_init_array>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	2600      	movs	r6, #0
 8003490:	4d0c      	ldr	r5, [pc, #48]	; (80034c4 <__libc_init_array+0x38>)
 8003492:	4c0d      	ldr	r4, [pc, #52]	; (80034c8 <__libc_init_array+0x3c>)
 8003494:	1b64      	subs	r4, r4, r5
 8003496:	10a4      	asrs	r4, r4, #2
 8003498:	42a6      	cmp	r6, r4
 800349a:	d109      	bne.n	80034b0 <__libc_init_array+0x24>
 800349c:	f000 ffb6 	bl	800440c <_init>
 80034a0:	2600      	movs	r6, #0
 80034a2:	4d0a      	ldr	r5, [pc, #40]	; (80034cc <__libc_init_array+0x40>)
 80034a4:	4c0a      	ldr	r4, [pc, #40]	; (80034d0 <__libc_init_array+0x44>)
 80034a6:	1b64      	subs	r4, r4, r5
 80034a8:	10a4      	asrs	r4, r4, #2
 80034aa:	42a6      	cmp	r6, r4
 80034ac:	d105      	bne.n	80034ba <__libc_init_array+0x2e>
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b4:	4798      	blx	r3
 80034b6:	3601      	adds	r6, #1
 80034b8:	e7ee      	b.n	8003498 <__libc_init_array+0xc>
 80034ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80034be:	4798      	blx	r3
 80034c0:	3601      	adds	r6, #1
 80034c2:	e7f2      	b.n	80034aa <__libc_init_array+0x1e>
 80034c4:	08004504 	.word	0x08004504
 80034c8:	08004504 	.word	0x08004504
 80034cc:	08004504 	.word	0x08004504
 80034d0:	08004508 	.word	0x08004508

080034d4 <memset>:
 80034d4:	4603      	mov	r3, r0
 80034d6:	4402      	add	r2, r0
 80034d8:	4293      	cmp	r3, r2
 80034da:	d100      	bne.n	80034de <memset+0xa>
 80034dc:	4770      	bx	lr
 80034de:	f803 1b01 	strb.w	r1, [r3], #1
 80034e2:	e7f9      	b.n	80034d8 <memset+0x4>

080034e4 <iprintf>:
 80034e4:	b40f      	push	{r0, r1, r2, r3}
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <iprintf+0x2c>)
 80034e8:	b513      	push	{r0, r1, r4, lr}
 80034ea:	681c      	ldr	r4, [r3, #0]
 80034ec:	b124      	cbz	r4, 80034f8 <iprintf+0x14>
 80034ee:	69a3      	ldr	r3, [r4, #24]
 80034f0:	b913      	cbnz	r3, 80034f8 <iprintf+0x14>
 80034f2:	4620      	mov	r0, r4
 80034f4:	f000 f866 	bl	80035c4 <__sinit>
 80034f8:	ab05      	add	r3, sp, #20
 80034fa:	4620      	mov	r0, r4
 80034fc:	9a04      	ldr	r2, [sp, #16]
 80034fe:	68a1      	ldr	r1, [r4, #8]
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	f000 f9bb 	bl	800387c <_vfiprintf_r>
 8003506:	b002      	add	sp, #8
 8003508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800350c:	b004      	add	sp, #16
 800350e:	4770      	bx	lr
 8003510:	2000000c 	.word	0x2000000c

08003514 <std>:
 8003514:	2300      	movs	r3, #0
 8003516:	b510      	push	{r4, lr}
 8003518:	4604      	mov	r4, r0
 800351a:	e9c0 3300 	strd	r3, r3, [r0]
 800351e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003522:	6083      	str	r3, [r0, #8]
 8003524:	8181      	strh	r1, [r0, #12]
 8003526:	6643      	str	r3, [r0, #100]	; 0x64
 8003528:	81c2      	strh	r2, [r0, #14]
 800352a:	6183      	str	r3, [r0, #24]
 800352c:	4619      	mov	r1, r3
 800352e:	2208      	movs	r2, #8
 8003530:	305c      	adds	r0, #92	; 0x5c
 8003532:	f7ff ffcf 	bl	80034d4 <memset>
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <std+0x38>)
 8003538:	6224      	str	r4, [r4, #32]
 800353a:	6263      	str	r3, [r4, #36]	; 0x24
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <std+0x3c>)
 800353e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <std+0x40>)
 8003542:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <std+0x44>)
 8003546:	6323      	str	r3, [r4, #48]	; 0x30
 8003548:	bd10      	pop	{r4, pc}
 800354a:	bf00      	nop
 800354c:	08003e29 	.word	0x08003e29
 8003550:	08003e4b 	.word	0x08003e4b
 8003554:	08003e83 	.word	0x08003e83
 8003558:	08003ea7 	.word	0x08003ea7

0800355c <_cleanup_r>:
 800355c:	4901      	ldr	r1, [pc, #4]	; (8003564 <_cleanup_r+0x8>)
 800355e:	f000 b8af 	b.w	80036c0 <_fwalk_reent>
 8003562:	bf00      	nop
 8003564:	08004179 	.word	0x08004179

08003568 <__sfmoreglue>:
 8003568:	2268      	movs	r2, #104	; 0x68
 800356a:	b570      	push	{r4, r5, r6, lr}
 800356c:	1e4d      	subs	r5, r1, #1
 800356e:	4355      	muls	r5, r2
 8003570:	460e      	mov	r6, r1
 8003572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003576:	f000 f8e5 	bl	8003744 <_malloc_r>
 800357a:	4604      	mov	r4, r0
 800357c:	b140      	cbz	r0, 8003590 <__sfmoreglue+0x28>
 800357e:	2100      	movs	r1, #0
 8003580:	e9c0 1600 	strd	r1, r6, [r0]
 8003584:	300c      	adds	r0, #12
 8003586:	60a0      	str	r0, [r4, #8]
 8003588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800358c:	f7ff ffa2 	bl	80034d4 <memset>
 8003590:	4620      	mov	r0, r4
 8003592:	bd70      	pop	{r4, r5, r6, pc}

08003594 <__sfp_lock_acquire>:
 8003594:	4801      	ldr	r0, [pc, #4]	; (800359c <__sfp_lock_acquire+0x8>)
 8003596:	f000 b8b3 	b.w	8003700 <__retarget_lock_acquire_recursive>
 800359a:	bf00      	nop
 800359c:	2000013d 	.word	0x2000013d

080035a0 <__sfp_lock_release>:
 80035a0:	4801      	ldr	r0, [pc, #4]	; (80035a8 <__sfp_lock_release+0x8>)
 80035a2:	f000 b8ae 	b.w	8003702 <__retarget_lock_release_recursive>
 80035a6:	bf00      	nop
 80035a8:	2000013d 	.word	0x2000013d

080035ac <__sinit_lock_acquire>:
 80035ac:	4801      	ldr	r0, [pc, #4]	; (80035b4 <__sinit_lock_acquire+0x8>)
 80035ae:	f000 b8a7 	b.w	8003700 <__retarget_lock_acquire_recursive>
 80035b2:	bf00      	nop
 80035b4:	2000013e 	.word	0x2000013e

080035b8 <__sinit_lock_release>:
 80035b8:	4801      	ldr	r0, [pc, #4]	; (80035c0 <__sinit_lock_release+0x8>)
 80035ba:	f000 b8a2 	b.w	8003702 <__retarget_lock_release_recursive>
 80035be:	bf00      	nop
 80035c0:	2000013e 	.word	0x2000013e

080035c4 <__sinit>:
 80035c4:	b510      	push	{r4, lr}
 80035c6:	4604      	mov	r4, r0
 80035c8:	f7ff fff0 	bl	80035ac <__sinit_lock_acquire>
 80035cc:	69a3      	ldr	r3, [r4, #24]
 80035ce:	b11b      	cbz	r3, 80035d8 <__sinit+0x14>
 80035d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d4:	f7ff bff0 	b.w	80035b8 <__sinit_lock_release>
 80035d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035dc:	6523      	str	r3, [r4, #80]	; 0x50
 80035de:	4b13      	ldr	r3, [pc, #76]	; (800362c <__sinit+0x68>)
 80035e0:	4a13      	ldr	r2, [pc, #76]	; (8003630 <__sinit+0x6c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80035e6:	42a3      	cmp	r3, r4
 80035e8:	bf08      	it	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	4620      	mov	r0, r4
 80035ee:	bf08      	it	eq
 80035f0:	61a3      	streq	r3, [r4, #24]
 80035f2:	f000 f81f 	bl	8003634 <__sfp>
 80035f6:	6060      	str	r0, [r4, #4]
 80035f8:	4620      	mov	r0, r4
 80035fa:	f000 f81b 	bl	8003634 <__sfp>
 80035fe:	60a0      	str	r0, [r4, #8]
 8003600:	4620      	mov	r0, r4
 8003602:	f000 f817 	bl	8003634 <__sfp>
 8003606:	2200      	movs	r2, #0
 8003608:	2104      	movs	r1, #4
 800360a:	60e0      	str	r0, [r4, #12]
 800360c:	6860      	ldr	r0, [r4, #4]
 800360e:	f7ff ff81 	bl	8003514 <std>
 8003612:	2201      	movs	r2, #1
 8003614:	2109      	movs	r1, #9
 8003616:	68a0      	ldr	r0, [r4, #8]
 8003618:	f7ff ff7c 	bl	8003514 <std>
 800361c:	2202      	movs	r2, #2
 800361e:	2112      	movs	r1, #18
 8003620:	68e0      	ldr	r0, [r4, #12]
 8003622:	f7ff ff77 	bl	8003514 <std>
 8003626:	2301      	movs	r3, #1
 8003628:	61a3      	str	r3, [r4, #24]
 800362a:	e7d1      	b.n	80035d0 <__sinit+0xc>
 800362c:	0800446c 	.word	0x0800446c
 8003630:	0800355d 	.word	0x0800355d

08003634 <__sfp>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	4607      	mov	r7, r0
 8003638:	f7ff ffac 	bl	8003594 <__sfp_lock_acquire>
 800363c:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <__sfp+0x84>)
 800363e:	681e      	ldr	r6, [r3, #0]
 8003640:	69b3      	ldr	r3, [r6, #24]
 8003642:	b913      	cbnz	r3, 800364a <__sfp+0x16>
 8003644:	4630      	mov	r0, r6
 8003646:	f7ff ffbd 	bl	80035c4 <__sinit>
 800364a:	3648      	adds	r6, #72	; 0x48
 800364c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003650:	3b01      	subs	r3, #1
 8003652:	d503      	bpl.n	800365c <__sfp+0x28>
 8003654:	6833      	ldr	r3, [r6, #0]
 8003656:	b30b      	cbz	r3, 800369c <__sfp+0x68>
 8003658:	6836      	ldr	r6, [r6, #0]
 800365a:	e7f7      	b.n	800364c <__sfp+0x18>
 800365c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003660:	b9d5      	cbnz	r5, 8003698 <__sfp+0x64>
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <__sfp+0x88>)
 8003664:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003668:	60e3      	str	r3, [r4, #12]
 800366a:	6665      	str	r5, [r4, #100]	; 0x64
 800366c:	f000 f847 	bl	80036fe <__retarget_lock_init_recursive>
 8003670:	f7ff ff96 	bl	80035a0 <__sfp_lock_release>
 8003674:	2208      	movs	r2, #8
 8003676:	4629      	mov	r1, r5
 8003678:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800367c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003680:	6025      	str	r5, [r4, #0]
 8003682:	61a5      	str	r5, [r4, #24]
 8003684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003688:	f7ff ff24 	bl	80034d4 <memset>
 800368c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003690:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003694:	4620      	mov	r0, r4
 8003696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003698:	3468      	adds	r4, #104	; 0x68
 800369a:	e7d9      	b.n	8003650 <__sfp+0x1c>
 800369c:	2104      	movs	r1, #4
 800369e:	4638      	mov	r0, r7
 80036a0:	f7ff ff62 	bl	8003568 <__sfmoreglue>
 80036a4:	4604      	mov	r4, r0
 80036a6:	6030      	str	r0, [r6, #0]
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d1d5      	bne.n	8003658 <__sfp+0x24>
 80036ac:	f7ff ff78 	bl	80035a0 <__sfp_lock_release>
 80036b0:	230c      	movs	r3, #12
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	e7ee      	b.n	8003694 <__sfp+0x60>
 80036b6:	bf00      	nop
 80036b8:	0800446c 	.word	0x0800446c
 80036bc:	ffff0001 	.word	0xffff0001

080036c0 <_fwalk_reent>:
 80036c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036c4:	4606      	mov	r6, r0
 80036c6:	4688      	mov	r8, r1
 80036c8:	2700      	movs	r7, #0
 80036ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036d2:	f1b9 0901 	subs.w	r9, r9, #1
 80036d6:	d505      	bpl.n	80036e4 <_fwalk_reent+0x24>
 80036d8:	6824      	ldr	r4, [r4, #0]
 80036da:	2c00      	cmp	r4, #0
 80036dc:	d1f7      	bne.n	80036ce <_fwalk_reent+0xe>
 80036de:	4638      	mov	r0, r7
 80036e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036e4:	89ab      	ldrh	r3, [r5, #12]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d907      	bls.n	80036fa <_fwalk_reent+0x3a>
 80036ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036ee:	3301      	adds	r3, #1
 80036f0:	d003      	beq.n	80036fa <_fwalk_reent+0x3a>
 80036f2:	4629      	mov	r1, r5
 80036f4:	4630      	mov	r0, r6
 80036f6:	47c0      	blx	r8
 80036f8:	4307      	orrs	r7, r0
 80036fa:	3568      	adds	r5, #104	; 0x68
 80036fc:	e7e9      	b.n	80036d2 <_fwalk_reent+0x12>

080036fe <__retarget_lock_init_recursive>:
 80036fe:	4770      	bx	lr

08003700 <__retarget_lock_acquire_recursive>:
 8003700:	4770      	bx	lr

08003702 <__retarget_lock_release_recursive>:
 8003702:	4770      	bx	lr

08003704 <sbrk_aligned>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4e0e      	ldr	r6, [pc, #56]	; (8003740 <sbrk_aligned+0x3c>)
 8003708:	460c      	mov	r4, r1
 800370a:	6831      	ldr	r1, [r6, #0]
 800370c:	4605      	mov	r5, r0
 800370e:	b911      	cbnz	r1, 8003716 <sbrk_aligned+0x12>
 8003710:	f000 fb7a 	bl	8003e08 <_sbrk_r>
 8003714:	6030      	str	r0, [r6, #0]
 8003716:	4621      	mov	r1, r4
 8003718:	4628      	mov	r0, r5
 800371a:	f000 fb75 	bl	8003e08 <_sbrk_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	d00a      	beq.n	8003738 <sbrk_aligned+0x34>
 8003722:	1cc4      	adds	r4, r0, #3
 8003724:	f024 0403 	bic.w	r4, r4, #3
 8003728:	42a0      	cmp	r0, r4
 800372a:	d007      	beq.n	800373c <sbrk_aligned+0x38>
 800372c:	1a21      	subs	r1, r4, r0
 800372e:	4628      	mov	r0, r5
 8003730:	f000 fb6a 	bl	8003e08 <_sbrk_r>
 8003734:	3001      	adds	r0, #1
 8003736:	d101      	bne.n	800373c <sbrk_aligned+0x38>
 8003738:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800373c:	4620      	mov	r0, r4
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	20000144 	.word	0x20000144

08003744 <_malloc_r>:
 8003744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003748:	1ccd      	adds	r5, r1, #3
 800374a:	f025 0503 	bic.w	r5, r5, #3
 800374e:	3508      	adds	r5, #8
 8003750:	2d0c      	cmp	r5, #12
 8003752:	bf38      	it	cc
 8003754:	250c      	movcc	r5, #12
 8003756:	2d00      	cmp	r5, #0
 8003758:	4607      	mov	r7, r0
 800375a:	db01      	blt.n	8003760 <_malloc_r+0x1c>
 800375c:	42a9      	cmp	r1, r5
 800375e:	d905      	bls.n	800376c <_malloc_r+0x28>
 8003760:	230c      	movs	r3, #12
 8003762:	2600      	movs	r6, #0
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4630      	mov	r0, r6
 8003768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800376c:	4e2e      	ldr	r6, [pc, #184]	; (8003828 <_malloc_r+0xe4>)
 800376e:	f000 fdc5 	bl	80042fc <__malloc_lock>
 8003772:	6833      	ldr	r3, [r6, #0]
 8003774:	461c      	mov	r4, r3
 8003776:	bb34      	cbnz	r4, 80037c6 <_malloc_r+0x82>
 8003778:	4629      	mov	r1, r5
 800377a:	4638      	mov	r0, r7
 800377c:	f7ff ffc2 	bl	8003704 <sbrk_aligned>
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	4604      	mov	r4, r0
 8003784:	d14d      	bne.n	8003822 <_malloc_r+0xde>
 8003786:	6834      	ldr	r4, [r6, #0]
 8003788:	4626      	mov	r6, r4
 800378a:	2e00      	cmp	r6, #0
 800378c:	d140      	bne.n	8003810 <_malloc_r+0xcc>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	4631      	mov	r1, r6
 8003792:	4638      	mov	r0, r7
 8003794:	eb04 0803 	add.w	r8, r4, r3
 8003798:	f000 fb36 	bl	8003e08 <_sbrk_r>
 800379c:	4580      	cmp	r8, r0
 800379e:	d13a      	bne.n	8003816 <_malloc_r+0xd2>
 80037a0:	6821      	ldr	r1, [r4, #0]
 80037a2:	3503      	adds	r5, #3
 80037a4:	1a6d      	subs	r5, r5, r1
 80037a6:	f025 0503 	bic.w	r5, r5, #3
 80037aa:	3508      	adds	r5, #8
 80037ac:	2d0c      	cmp	r5, #12
 80037ae:	bf38      	it	cc
 80037b0:	250c      	movcc	r5, #12
 80037b2:	4638      	mov	r0, r7
 80037b4:	4629      	mov	r1, r5
 80037b6:	f7ff ffa5 	bl	8003704 <sbrk_aligned>
 80037ba:	3001      	adds	r0, #1
 80037bc:	d02b      	beq.n	8003816 <_malloc_r+0xd2>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	442b      	add	r3, r5
 80037c2:	6023      	str	r3, [r4, #0]
 80037c4:	e00e      	b.n	80037e4 <_malloc_r+0xa0>
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	1b52      	subs	r2, r2, r5
 80037ca:	d41e      	bmi.n	800380a <_malloc_r+0xc6>
 80037cc:	2a0b      	cmp	r2, #11
 80037ce:	d916      	bls.n	80037fe <_malloc_r+0xba>
 80037d0:	1961      	adds	r1, r4, r5
 80037d2:	42a3      	cmp	r3, r4
 80037d4:	6025      	str	r5, [r4, #0]
 80037d6:	bf18      	it	ne
 80037d8:	6059      	strne	r1, [r3, #4]
 80037da:	6863      	ldr	r3, [r4, #4]
 80037dc:	bf08      	it	eq
 80037de:	6031      	streq	r1, [r6, #0]
 80037e0:	5162      	str	r2, [r4, r5]
 80037e2:	604b      	str	r3, [r1, #4]
 80037e4:	4638      	mov	r0, r7
 80037e6:	f104 060b 	add.w	r6, r4, #11
 80037ea:	f000 fd8d 	bl	8004308 <__malloc_unlock>
 80037ee:	f026 0607 	bic.w	r6, r6, #7
 80037f2:	1d23      	adds	r3, r4, #4
 80037f4:	1af2      	subs	r2, r6, r3
 80037f6:	d0b6      	beq.n	8003766 <_malloc_r+0x22>
 80037f8:	1b9b      	subs	r3, r3, r6
 80037fa:	50a3      	str	r3, [r4, r2]
 80037fc:	e7b3      	b.n	8003766 <_malloc_r+0x22>
 80037fe:	6862      	ldr	r2, [r4, #4]
 8003800:	42a3      	cmp	r3, r4
 8003802:	bf0c      	ite	eq
 8003804:	6032      	streq	r2, [r6, #0]
 8003806:	605a      	strne	r2, [r3, #4]
 8003808:	e7ec      	b.n	80037e4 <_malloc_r+0xa0>
 800380a:	4623      	mov	r3, r4
 800380c:	6864      	ldr	r4, [r4, #4]
 800380e:	e7b2      	b.n	8003776 <_malloc_r+0x32>
 8003810:	4634      	mov	r4, r6
 8003812:	6876      	ldr	r6, [r6, #4]
 8003814:	e7b9      	b.n	800378a <_malloc_r+0x46>
 8003816:	230c      	movs	r3, #12
 8003818:	4638      	mov	r0, r7
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	f000 fd74 	bl	8004308 <__malloc_unlock>
 8003820:	e7a1      	b.n	8003766 <_malloc_r+0x22>
 8003822:	6025      	str	r5, [r4, #0]
 8003824:	e7de      	b.n	80037e4 <_malloc_r+0xa0>
 8003826:	bf00      	nop
 8003828:	20000140 	.word	0x20000140

0800382c <__sfputc_r>:
 800382c:	6893      	ldr	r3, [r2, #8]
 800382e:	b410      	push	{r4}
 8003830:	3b01      	subs	r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	6093      	str	r3, [r2, #8]
 8003836:	da07      	bge.n	8003848 <__sfputc_r+0x1c>
 8003838:	6994      	ldr	r4, [r2, #24]
 800383a:	42a3      	cmp	r3, r4
 800383c:	db01      	blt.n	8003842 <__sfputc_r+0x16>
 800383e:	290a      	cmp	r1, #10
 8003840:	d102      	bne.n	8003848 <__sfputc_r+0x1c>
 8003842:	bc10      	pop	{r4}
 8003844:	f000 bb34 	b.w	8003eb0 <__swbuf_r>
 8003848:	6813      	ldr	r3, [r2, #0]
 800384a:	1c58      	adds	r0, r3, #1
 800384c:	6010      	str	r0, [r2, #0]
 800384e:	7019      	strb	r1, [r3, #0]
 8003850:	4608      	mov	r0, r1
 8003852:	bc10      	pop	{r4}
 8003854:	4770      	bx	lr

08003856 <__sfputs_r>:
 8003856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003858:	4606      	mov	r6, r0
 800385a:	460f      	mov	r7, r1
 800385c:	4614      	mov	r4, r2
 800385e:	18d5      	adds	r5, r2, r3
 8003860:	42ac      	cmp	r4, r5
 8003862:	d101      	bne.n	8003868 <__sfputs_r+0x12>
 8003864:	2000      	movs	r0, #0
 8003866:	e007      	b.n	8003878 <__sfputs_r+0x22>
 8003868:	463a      	mov	r2, r7
 800386a:	4630      	mov	r0, r6
 800386c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003870:	f7ff ffdc 	bl	800382c <__sfputc_r>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d1f3      	bne.n	8003860 <__sfputs_r+0xa>
 8003878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800387c <_vfiprintf_r>:
 800387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003880:	460d      	mov	r5, r1
 8003882:	4614      	mov	r4, r2
 8003884:	4698      	mov	r8, r3
 8003886:	4606      	mov	r6, r0
 8003888:	b09d      	sub	sp, #116	; 0x74
 800388a:	b118      	cbz	r0, 8003894 <_vfiprintf_r+0x18>
 800388c:	6983      	ldr	r3, [r0, #24]
 800388e:	b90b      	cbnz	r3, 8003894 <_vfiprintf_r+0x18>
 8003890:	f7ff fe98 	bl	80035c4 <__sinit>
 8003894:	4b89      	ldr	r3, [pc, #548]	; (8003abc <_vfiprintf_r+0x240>)
 8003896:	429d      	cmp	r5, r3
 8003898:	d11b      	bne.n	80038d2 <_vfiprintf_r+0x56>
 800389a:	6875      	ldr	r5, [r6, #4]
 800389c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800389e:	07d9      	lsls	r1, r3, #31
 80038a0:	d405      	bmi.n	80038ae <_vfiprintf_r+0x32>
 80038a2:	89ab      	ldrh	r3, [r5, #12]
 80038a4:	059a      	lsls	r2, r3, #22
 80038a6:	d402      	bmi.n	80038ae <_vfiprintf_r+0x32>
 80038a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038aa:	f7ff ff29 	bl	8003700 <__retarget_lock_acquire_recursive>
 80038ae:	89ab      	ldrh	r3, [r5, #12]
 80038b0:	071b      	lsls	r3, r3, #28
 80038b2:	d501      	bpl.n	80038b8 <_vfiprintf_r+0x3c>
 80038b4:	692b      	ldr	r3, [r5, #16]
 80038b6:	b9eb      	cbnz	r3, 80038f4 <_vfiprintf_r+0x78>
 80038b8:	4629      	mov	r1, r5
 80038ba:	4630      	mov	r0, r6
 80038bc:	f000 fb5c 	bl	8003f78 <__swsetup_r>
 80038c0:	b1c0      	cbz	r0, 80038f4 <_vfiprintf_r+0x78>
 80038c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038c4:	07dc      	lsls	r4, r3, #31
 80038c6:	d50e      	bpl.n	80038e6 <_vfiprintf_r+0x6a>
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038cc:	b01d      	add	sp, #116	; 0x74
 80038ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d2:	4b7b      	ldr	r3, [pc, #492]	; (8003ac0 <_vfiprintf_r+0x244>)
 80038d4:	429d      	cmp	r5, r3
 80038d6:	d101      	bne.n	80038dc <_vfiprintf_r+0x60>
 80038d8:	68b5      	ldr	r5, [r6, #8]
 80038da:	e7df      	b.n	800389c <_vfiprintf_r+0x20>
 80038dc:	4b79      	ldr	r3, [pc, #484]	; (8003ac4 <_vfiprintf_r+0x248>)
 80038de:	429d      	cmp	r5, r3
 80038e0:	bf08      	it	eq
 80038e2:	68f5      	ldreq	r5, [r6, #12]
 80038e4:	e7da      	b.n	800389c <_vfiprintf_r+0x20>
 80038e6:	89ab      	ldrh	r3, [r5, #12]
 80038e8:	0598      	lsls	r0, r3, #22
 80038ea:	d4ed      	bmi.n	80038c8 <_vfiprintf_r+0x4c>
 80038ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ee:	f7ff ff08 	bl	8003702 <__retarget_lock_release_recursive>
 80038f2:	e7e9      	b.n	80038c8 <_vfiprintf_r+0x4c>
 80038f4:	2300      	movs	r3, #0
 80038f6:	9309      	str	r3, [sp, #36]	; 0x24
 80038f8:	2320      	movs	r3, #32
 80038fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038fe:	2330      	movs	r3, #48	; 0x30
 8003900:	f04f 0901 	mov.w	r9, #1
 8003904:	f8cd 800c 	str.w	r8, [sp, #12]
 8003908:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003ac8 <_vfiprintf_r+0x24c>
 800390c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003910:	4623      	mov	r3, r4
 8003912:	469a      	mov	sl, r3
 8003914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003918:	b10a      	cbz	r2, 800391e <_vfiprintf_r+0xa2>
 800391a:	2a25      	cmp	r2, #37	; 0x25
 800391c:	d1f9      	bne.n	8003912 <_vfiprintf_r+0x96>
 800391e:	ebba 0b04 	subs.w	fp, sl, r4
 8003922:	d00b      	beq.n	800393c <_vfiprintf_r+0xc0>
 8003924:	465b      	mov	r3, fp
 8003926:	4622      	mov	r2, r4
 8003928:	4629      	mov	r1, r5
 800392a:	4630      	mov	r0, r6
 800392c:	f7ff ff93 	bl	8003856 <__sfputs_r>
 8003930:	3001      	adds	r0, #1
 8003932:	f000 80aa 	beq.w	8003a8a <_vfiprintf_r+0x20e>
 8003936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003938:	445a      	add	r2, fp
 800393a:	9209      	str	r2, [sp, #36]	; 0x24
 800393c:	f89a 3000 	ldrb.w	r3, [sl]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80a2 	beq.w	8003a8a <_vfiprintf_r+0x20e>
 8003946:	2300      	movs	r3, #0
 8003948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800394c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003950:	f10a 0a01 	add.w	sl, sl, #1
 8003954:	9304      	str	r3, [sp, #16]
 8003956:	9307      	str	r3, [sp, #28]
 8003958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800395c:	931a      	str	r3, [sp, #104]	; 0x68
 800395e:	4654      	mov	r4, sl
 8003960:	2205      	movs	r2, #5
 8003962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003966:	4858      	ldr	r0, [pc, #352]	; (8003ac8 <_vfiprintf_r+0x24c>)
 8003968:	f000 fcba 	bl	80042e0 <memchr>
 800396c:	9a04      	ldr	r2, [sp, #16]
 800396e:	b9d8      	cbnz	r0, 80039a8 <_vfiprintf_r+0x12c>
 8003970:	06d1      	lsls	r1, r2, #27
 8003972:	bf44      	itt	mi
 8003974:	2320      	movmi	r3, #32
 8003976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397a:	0713      	lsls	r3, r2, #28
 800397c:	bf44      	itt	mi
 800397e:	232b      	movmi	r3, #43	; 0x2b
 8003980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003984:	f89a 3000 	ldrb.w	r3, [sl]
 8003988:	2b2a      	cmp	r3, #42	; 0x2a
 800398a:	d015      	beq.n	80039b8 <_vfiprintf_r+0x13c>
 800398c:	4654      	mov	r4, sl
 800398e:	2000      	movs	r0, #0
 8003990:	f04f 0c0a 	mov.w	ip, #10
 8003994:	9a07      	ldr	r2, [sp, #28]
 8003996:	4621      	mov	r1, r4
 8003998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800399c:	3b30      	subs	r3, #48	; 0x30
 800399e:	2b09      	cmp	r3, #9
 80039a0:	d94e      	bls.n	8003a40 <_vfiprintf_r+0x1c4>
 80039a2:	b1b0      	cbz	r0, 80039d2 <_vfiprintf_r+0x156>
 80039a4:	9207      	str	r2, [sp, #28]
 80039a6:	e014      	b.n	80039d2 <_vfiprintf_r+0x156>
 80039a8:	eba0 0308 	sub.w	r3, r0, r8
 80039ac:	fa09 f303 	lsl.w	r3, r9, r3
 80039b0:	4313      	orrs	r3, r2
 80039b2:	46a2      	mov	sl, r4
 80039b4:	9304      	str	r3, [sp, #16]
 80039b6:	e7d2      	b.n	800395e <_vfiprintf_r+0xe2>
 80039b8:	9b03      	ldr	r3, [sp, #12]
 80039ba:	1d19      	adds	r1, r3, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	9103      	str	r1, [sp, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bfbb      	ittet	lt
 80039c4:	425b      	neglt	r3, r3
 80039c6:	f042 0202 	orrlt.w	r2, r2, #2
 80039ca:	9307      	strge	r3, [sp, #28]
 80039cc:	9307      	strlt	r3, [sp, #28]
 80039ce:	bfb8      	it	lt
 80039d0:	9204      	strlt	r2, [sp, #16]
 80039d2:	7823      	ldrb	r3, [r4, #0]
 80039d4:	2b2e      	cmp	r3, #46	; 0x2e
 80039d6:	d10c      	bne.n	80039f2 <_vfiprintf_r+0x176>
 80039d8:	7863      	ldrb	r3, [r4, #1]
 80039da:	2b2a      	cmp	r3, #42	; 0x2a
 80039dc:	d135      	bne.n	8003a4a <_vfiprintf_r+0x1ce>
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	3402      	adds	r4, #2
 80039e2:	1d1a      	adds	r2, r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	9203      	str	r2, [sp, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bfb8      	it	lt
 80039ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80039f0:	9305      	str	r3, [sp, #20]
 80039f2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003acc <_vfiprintf_r+0x250>
 80039f6:	2203      	movs	r2, #3
 80039f8:	4650      	mov	r0, sl
 80039fa:	7821      	ldrb	r1, [r4, #0]
 80039fc:	f000 fc70 	bl	80042e0 <memchr>
 8003a00:	b140      	cbz	r0, 8003a14 <_vfiprintf_r+0x198>
 8003a02:	2340      	movs	r3, #64	; 0x40
 8003a04:	eba0 000a 	sub.w	r0, r0, sl
 8003a08:	fa03 f000 	lsl.w	r0, r3, r0
 8003a0c:	9b04      	ldr	r3, [sp, #16]
 8003a0e:	3401      	adds	r4, #1
 8003a10:	4303      	orrs	r3, r0
 8003a12:	9304      	str	r3, [sp, #16]
 8003a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a18:	2206      	movs	r2, #6
 8003a1a:	482d      	ldr	r0, [pc, #180]	; (8003ad0 <_vfiprintf_r+0x254>)
 8003a1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a20:	f000 fc5e 	bl	80042e0 <memchr>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d03f      	beq.n	8003aa8 <_vfiprintf_r+0x22c>
 8003a28:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <_vfiprintf_r+0x258>)
 8003a2a:	bb1b      	cbnz	r3, 8003a74 <_vfiprintf_r+0x1f8>
 8003a2c:	9b03      	ldr	r3, [sp, #12]
 8003a2e:	3307      	adds	r3, #7
 8003a30:	f023 0307 	bic.w	r3, r3, #7
 8003a34:	3308      	adds	r3, #8
 8003a36:	9303      	str	r3, [sp, #12]
 8003a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a3a:	443b      	add	r3, r7
 8003a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a3e:	e767      	b.n	8003910 <_vfiprintf_r+0x94>
 8003a40:	460c      	mov	r4, r1
 8003a42:	2001      	movs	r0, #1
 8003a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a48:	e7a5      	b.n	8003996 <_vfiprintf_r+0x11a>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f04f 0c0a 	mov.w	ip, #10
 8003a50:	4619      	mov	r1, r3
 8003a52:	3401      	adds	r4, #1
 8003a54:	9305      	str	r3, [sp, #20]
 8003a56:	4620      	mov	r0, r4
 8003a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a5c:	3a30      	subs	r2, #48	; 0x30
 8003a5e:	2a09      	cmp	r2, #9
 8003a60:	d903      	bls.n	8003a6a <_vfiprintf_r+0x1ee>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0c5      	beq.n	80039f2 <_vfiprintf_r+0x176>
 8003a66:	9105      	str	r1, [sp, #20]
 8003a68:	e7c3      	b.n	80039f2 <_vfiprintf_r+0x176>
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a72:	e7f0      	b.n	8003a56 <_vfiprintf_r+0x1da>
 8003a74:	ab03      	add	r3, sp, #12
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	462a      	mov	r2, r5
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <_vfiprintf_r+0x25c>)
 8003a7e:	a904      	add	r1, sp, #16
 8003a80:	f3af 8000 	nop.w
 8003a84:	4607      	mov	r7, r0
 8003a86:	1c78      	adds	r0, r7, #1
 8003a88:	d1d6      	bne.n	8003a38 <_vfiprintf_r+0x1bc>
 8003a8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a8c:	07d9      	lsls	r1, r3, #31
 8003a8e:	d405      	bmi.n	8003a9c <_vfiprintf_r+0x220>
 8003a90:	89ab      	ldrh	r3, [r5, #12]
 8003a92:	059a      	lsls	r2, r3, #22
 8003a94:	d402      	bmi.n	8003a9c <_vfiprintf_r+0x220>
 8003a96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a98:	f7ff fe33 	bl	8003702 <__retarget_lock_release_recursive>
 8003a9c:	89ab      	ldrh	r3, [r5, #12]
 8003a9e:	065b      	lsls	r3, r3, #25
 8003aa0:	f53f af12 	bmi.w	80038c8 <_vfiprintf_r+0x4c>
 8003aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aa6:	e711      	b.n	80038cc <_vfiprintf_r+0x50>
 8003aa8:	ab03      	add	r3, sp, #12
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	462a      	mov	r2, r5
 8003aae:	4630      	mov	r0, r6
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <_vfiprintf_r+0x25c>)
 8003ab2:	a904      	add	r1, sp, #16
 8003ab4:	f000 f882 	bl	8003bbc <_printf_i>
 8003ab8:	e7e4      	b.n	8003a84 <_vfiprintf_r+0x208>
 8003aba:	bf00      	nop
 8003abc:	08004490 	.word	0x08004490
 8003ac0:	080044b0 	.word	0x080044b0
 8003ac4:	08004470 	.word	0x08004470
 8003ac8:	080044d0 	.word	0x080044d0
 8003acc:	080044d6 	.word	0x080044d6
 8003ad0:	080044da 	.word	0x080044da
 8003ad4:	00000000 	.word	0x00000000
 8003ad8:	08003857 	.word	0x08003857

08003adc <_printf_common>:
 8003adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae0:	4616      	mov	r6, r2
 8003ae2:	4699      	mov	r9, r3
 8003ae4:	688a      	ldr	r2, [r1, #8]
 8003ae6:	690b      	ldr	r3, [r1, #16]
 8003ae8:	4607      	mov	r7, r0
 8003aea:	4293      	cmp	r3, r2
 8003aec:	bfb8      	it	lt
 8003aee:	4613      	movlt	r3, r2
 8003af0:	6033      	str	r3, [r6, #0]
 8003af2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003af6:	460c      	mov	r4, r1
 8003af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003afc:	b10a      	cbz	r2, 8003b02 <_printf_common+0x26>
 8003afe:	3301      	adds	r3, #1
 8003b00:	6033      	str	r3, [r6, #0]
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	0699      	lsls	r1, r3, #26
 8003b06:	bf42      	ittt	mi
 8003b08:	6833      	ldrmi	r3, [r6, #0]
 8003b0a:	3302      	addmi	r3, #2
 8003b0c:	6033      	strmi	r3, [r6, #0]
 8003b0e:	6825      	ldr	r5, [r4, #0]
 8003b10:	f015 0506 	ands.w	r5, r5, #6
 8003b14:	d106      	bne.n	8003b24 <_printf_common+0x48>
 8003b16:	f104 0a19 	add.w	sl, r4, #25
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	6832      	ldr	r2, [r6, #0]
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	42ab      	cmp	r3, r5
 8003b22:	dc28      	bgt.n	8003b76 <_printf_common+0x9a>
 8003b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b28:	1e13      	subs	r3, r2, #0
 8003b2a:	6822      	ldr	r2, [r4, #0]
 8003b2c:	bf18      	it	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	0692      	lsls	r2, r2, #26
 8003b32:	d42d      	bmi.n	8003b90 <_printf_common+0xb4>
 8003b34:	4649      	mov	r1, r9
 8003b36:	4638      	mov	r0, r7
 8003b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b3c:	47c0      	blx	r8
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d020      	beq.n	8003b84 <_printf_common+0xa8>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	68e5      	ldr	r5, [r4, #12]
 8003b46:	f003 0306 	and.w	r3, r3, #6
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	bf18      	it	ne
 8003b4e:	2500      	movne	r5, #0
 8003b50:	6832      	ldr	r2, [r6, #0]
 8003b52:	f04f 0600 	mov.w	r6, #0
 8003b56:	68a3      	ldr	r3, [r4, #8]
 8003b58:	bf08      	it	eq
 8003b5a:	1aad      	subeq	r5, r5, r2
 8003b5c:	6922      	ldr	r2, [r4, #16]
 8003b5e:	bf08      	it	eq
 8003b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b64:	4293      	cmp	r3, r2
 8003b66:	bfc4      	itt	gt
 8003b68:	1a9b      	subgt	r3, r3, r2
 8003b6a:	18ed      	addgt	r5, r5, r3
 8003b6c:	341a      	adds	r4, #26
 8003b6e:	42b5      	cmp	r5, r6
 8003b70:	d11a      	bne.n	8003ba8 <_printf_common+0xcc>
 8003b72:	2000      	movs	r0, #0
 8003b74:	e008      	b.n	8003b88 <_printf_common+0xac>
 8003b76:	2301      	movs	r3, #1
 8003b78:	4652      	mov	r2, sl
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	47c0      	blx	r8
 8003b80:	3001      	adds	r0, #1
 8003b82:	d103      	bne.n	8003b8c <_printf_common+0xb0>
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b8c:	3501      	adds	r5, #1
 8003b8e:	e7c4      	b.n	8003b1a <_printf_common+0x3e>
 8003b90:	2030      	movs	r0, #48	; 0x30
 8003b92:	18e1      	adds	r1, r4, r3
 8003b94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b9e:	4422      	add	r2, r4
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba6:	e7c5      	b.n	8003b34 <_printf_common+0x58>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	4622      	mov	r2, r4
 8003bac:	4649      	mov	r1, r9
 8003bae:	4638      	mov	r0, r7
 8003bb0:	47c0      	blx	r8
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d0e6      	beq.n	8003b84 <_printf_common+0xa8>
 8003bb6:	3601      	adds	r6, #1
 8003bb8:	e7d9      	b.n	8003b6e <_printf_common+0x92>
	...

08003bbc <_printf_i>:
 8003bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc0:	7e0f      	ldrb	r7, [r1, #24]
 8003bc2:	4691      	mov	r9, r2
 8003bc4:	2f78      	cmp	r7, #120	; 0x78
 8003bc6:	4680      	mov	r8, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	469a      	mov	sl, r3
 8003bcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bd2:	d807      	bhi.n	8003be4 <_printf_i+0x28>
 8003bd4:	2f62      	cmp	r7, #98	; 0x62
 8003bd6:	d80a      	bhi.n	8003bee <_printf_i+0x32>
 8003bd8:	2f00      	cmp	r7, #0
 8003bda:	f000 80d9 	beq.w	8003d90 <_printf_i+0x1d4>
 8003bde:	2f58      	cmp	r7, #88	; 0x58
 8003be0:	f000 80a4 	beq.w	8003d2c <_printf_i+0x170>
 8003be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bec:	e03a      	b.n	8003c64 <_printf_i+0xa8>
 8003bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bf2:	2b15      	cmp	r3, #21
 8003bf4:	d8f6      	bhi.n	8003be4 <_printf_i+0x28>
 8003bf6:	a101      	add	r1, pc, #4	; (adr r1, 8003bfc <_printf_i+0x40>)
 8003bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bfc:	08003c55 	.word	0x08003c55
 8003c00:	08003c69 	.word	0x08003c69
 8003c04:	08003be5 	.word	0x08003be5
 8003c08:	08003be5 	.word	0x08003be5
 8003c0c:	08003be5 	.word	0x08003be5
 8003c10:	08003be5 	.word	0x08003be5
 8003c14:	08003c69 	.word	0x08003c69
 8003c18:	08003be5 	.word	0x08003be5
 8003c1c:	08003be5 	.word	0x08003be5
 8003c20:	08003be5 	.word	0x08003be5
 8003c24:	08003be5 	.word	0x08003be5
 8003c28:	08003d77 	.word	0x08003d77
 8003c2c:	08003c99 	.word	0x08003c99
 8003c30:	08003d59 	.word	0x08003d59
 8003c34:	08003be5 	.word	0x08003be5
 8003c38:	08003be5 	.word	0x08003be5
 8003c3c:	08003d99 	.word	0x08003d99
 8003c40:	08003be5 	.word	0x08003be5
 8003c44:	08003c99 	.word	0x08003c99
 8003c48:	08003be5 	.word	0x08003be5
 8003c4c:	08003be5 	.word	0x08003be5
 8003c50:	08003d61 	.word	0x08003d61
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	1d1a      	adds	r2, r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	602a      	str	r2, [r5, #0]
 8003c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0a4      	b.n	8003db2 <_printf_i+0x1f6>
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	6829      	ldr	r1, [r5, #0]
 8003c6c:	0606      	lsls	r6, r0, #24
 8003c6e:	f101 0304 	add.w	r3, r1, #4
 8003c72:	d50a      	bpl.n	8003c8a <_printf_i+0xce>
 8003c74:	680e      	ldr	r6, [r1, #0]
 8003c76:	602b      	str	r3, [r5, #0]
 8003c78:	2e00      	cmp	r6, #0
 8003c7a:	da03      	bge.n	8003c84 <_printf_i+0xc8>
 8003c7c:	232d      	movs	r3, #45	; 0x2d
 8003c7e:	4276      	negs	r6, r6
 8003c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c84:	230a      	movs	r3, #10
 8003c86:	485e      	ldr	r0, [pc, #376]	; (8003e00 <_printf_i+0x244>)
 8003c88:	e019      	b.n	8003cbe <_printf_i+0x102>
 8003c8a:	680e      	ldr	r6, [r1, #0]
 8003c8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c90:	602b      	str	r3, [r5, #0]
 8003c92:	bf18      	it	ne
 8003c94:	b236      	sxthne	r6, r6
 8003c96:	e7ef      	b.n	8003c78 <_printf_i+0xbc>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	6820      	ldr	r0, [r4, #0]
 8003c9c:	1d19      	adds	r1, r3, #4
 8003c9e:	6029      	str	r1, [r5, #0]
 8003ca0:	0601      	lsls	r1, r0, #24
 8003ca2:	d501      	bpl.n	8003ca8 <_printf_i+0xec>
 8003ca4:	681e      	ldr	r6, [r3, #0]
 8003ca6:	e002      	b.n	8003cae <_printf_i+0xf2>
 8003ca8:	0646      	lsls	r6, r0, #25
 8003caa:	d5fb      	bpl.n	8003ca4 <_printf_i+0xe8>
 8003cac:	881e      	ldrh	r6, [r3, #0]
 8003cae:	2f6f      	cmp	r7, #111	; 0x6f
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2308      	moveq	r3, #8
 8003cb4:	230a      	movne	r3, #10
 8003cb6:	4852      	ldr	r0, [pc, #328]	; (8003e00 <_printf_i+0x244>)
 8003cb8:	2100      	movs	r1, #0
 8003cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cbe:	6865      	ldr	r5, [r4, #4]
 8003cc0:	2d00      	cmp	r5, #0
 8003cc2:	bfa8      	it	ge
 8003cc4:	6821      	ldrge	r1, [r4, #0]
 8003cc6:	60a5      	str	r5, [r4, #8]
 8003cc8:	bfa4      	itt	ge
 8003cca:	f021 0104 	bicge.w	r1, r1, #4
 8003cce:	6021      	strge	r1, [r4, #0]
 8003cd0:	b90e      	cbnz	r6, 8003cd6 <_printf_i+0x11a>
 8003cd2:	2d00      	cmp	r5, #0
 8003cd4:	d04d      	beq.n	8003d72 <_printf_i+0x1b6>
 8003cd6:	4615      	mov	r5, r2
 8003cd8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cdc:	fb03 6711 	mls	r7, r3, r1, r6
 8003ce0:	5dc7      	ldrb	r7, [r0, r7]
 8003ce2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ce6:	4637      	mov	r7, r6
 8003ce8:	42bb      	cmp	r3, r7
 8003cea:	460e      	mov	r6, r1
 8003cec:	d9f4      	bls.n	8003cd8 <_printf_i+0x11c>
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d10b      	bne.n	8003d0a <_printf_i+0x14e>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	07de      	lsls	r6, r3, #31
 8003cf6:	d508      	bpl.n	8003d0a <_printf_i+0x14e>
 8003cf8:	6923      	ldr	r3, [r4, #16]
 8003cfa:	6861      	ldr	r1, [r4, #4]
 8003cfc:	4299      	cmp	r1, r3
 8003cfe:	bfde      	ittt	le
 8003d00:	2330      	movle	r3, #48	; 0x30
 8003d02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d06:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003d0a:	1b52      	subs	r2, r2, r5
 8003d0c:	6122      	str	r2, [r4, #16]
 8003d0e:	464b      	mov	r3, r9
 8003d10:	4621      	mov	r1, r4
 8003d12:	4640      	mov	r0, r8
 8003d14:	f8cd a000 	str.w	sl, [sp]
 8003d18:	aa03      	add	r2, sp, #12
 8003d1a:	f7ff fedf 	bl	8003adc <_printf_common>
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d14c      	bne.n	8003dbc <_printf_i+0x200>
 8003d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d26:	b004      	add	sp, #16
 8003d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2c:	4834      	ldr	r0, [pc, #208]	; (8003e00 <_printf_i+0x244>)
 8003d2e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d32:	6829      	ldr	r1, [r5, #0]
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d3a:	6029      	str	r1, [r5, #0]
 8003d3c:	061d      	lsls	r5, r3, #24
 8003d3e:	d514      	bpl.n	8003d6a <_printf_i+0x1ae>
 8003d40:	07df      	lsls	r7, r3, #31
 8003d42:	bf44      	itt	mi
 8003d44:	f043 0320 	orrmi.w	r3, r3, #32
 8003d48:	6023      	strmi	r3, [r4, #0]
 8003d4a:	b91e      	cbnz	r6, 8003d54 <_printf_i+0x198>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	f023 0320 	bic.w	r3, r3, #32
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	2310      	movs	r3, #16
 8003d56:	e7af      	b.n	8003cb8 <_printf_i+0xfc>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	f043 0320 	orr.w	r3, r3, #32
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	2378      	movs	r3, #120	; 0x78
 8003d62:	4828      	ldr	r0, [pc, #160]	; (8003e04 <_printf_i+0x248>)
 8003d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d68:	e7e3      	b.n	8003d32 <_printf_i+0x176>
 8003d6a:	0659      	lsls	r1, r3, #25
 8003d6c:	bf48      	it	mi
 8003d6e:	b2b6      	uxthmi	r6, r6
 8003d70:	e7e6      	b.n	8003d40 <_printf_i+0x184>
 8003d72:	4615      	mov	r5, r2
 8003d74:	e7bb      	b.n	8003cee <_printf_i+0x132>
 8003d76:	682b      	ldr	r3, [r5, #0]
 8003d78:	6826      	ldr	r6, [r4, #0]
 8003d7a:	1d18      	adds	r0, r3, #4
 8003d7c:	6961      	ldr	r1, [r4, #20]
 8003d7e:	6028      	str	r0, [r5, #0]
 8003d80:	0635      	lsls	r5, r6, #24
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	d501      	bpl.n	8003d8a <_printf_i+0x1ce>
 8003d86:	6019      	str	r1, [r3, #0]
 8003d88:	e002      	b.n	8003d90 <_printf_i+0x1d4>
 8003d8a:	0670      	lsls	r0, r6, #25
 8003d8c:	d5fb      	bpl.n	8003d86 <_printf_i+0x1ca>
 8003d8e:	8019      	strh	r1, [r3, #0]
 8003d90:	2300      	movs	r3, #0
 8003d92:	4615      	mov	r5, r2
 8003d94:	6123      	str	r3, [r4, #16]
 8003d96:	e7ba      	b.n	8003d0e <_printf_i+0x152>
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	1d1a      	adds	r2, r3, #4
 8003d9e:	602a      	str	r2, [r5, #0]
 8003da0:	681d      	ldr	r5, [r3, #0]
 8003da2:	6862      	ldr	r2, [r4, #4]
 8003da4:	4628      	mov	r0, r5
 8003da6:	f000 fa9b 	bl	80042e0 <memchr>
 8003daa:	b108      	cbz	r0, 8003db0 <_printf_i+0x1f4>
 8003dac:	1b40      	subs	r0, r0, r5
 8003dae:	6060      	str	r0, [r4, #4]
 8003db0:	6863      	ldr	r3, [r4, #4]
 8003db2:	6123      	str	r3, [r4, #16]
 8003db4:	2300      	movs	r3, #0
 8003db6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dba:	e7a8      	b.n	8003d0e <_printf_i+0x152>
 8003dbc:	462a      	mov	r2, r5
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	6923      	ldr	r3, [r4, #16]
 8003dc4:	47d0      	blx	sl
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d0ab      	beq.n	8003d22 <_printf_i+0x166>
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	079b      	lsls	r3, r3, #30
 8003dce:	d413      	bmi.n	8003df8 <_printf_i+0x23c>
 8003dd0:	68e0      	ldr	r0, [r4, #12]
 8003dd2:	9b03      	ldr	r3, [sp, #12]
 8003dd4:	4298      	cmp	r0, r3
 8003dd6:	bfb8      	it	lt
 8003dd8:	4618      	movlt	r0, r3
 8003dda:	e7a4      	b.n	8003d26 <_printf_i+0x16a>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	4632      	mov	r2, r6
 8003de0:	4649      	mov	r1, r9
 8003de2:	4640      	mov	r0, r8
 8003de4:	47d0      	blx	sl
 8003de6:	3001      	adds	r0, #1
 8003de8:	d09b      	beq.n	8003d22 <_printf_i+0x166>
 8003dea:	3501      	adds	r5, #1
 8003dec:	68e3      	ldr	r3, [r4, #12]
 8003dee:	9903      	ldr	r1, [sp, #12]
 8003df0:	1a5b      	subs	r3, r3, r1
 8003df2:	42ab      	cmp	r3, r5
 8003df4:	dcf2      	bgt.n	8003ddc <_printf_i+0x220>
 8003df6:	e7eb      	b.n	8003dd0 <_printf_i+0x214>
 8003df8:	2500      	movs	r5, #0
 8003dfa:	f104 0619 	add.w	r6, r4, #25
 8003dfe:	e7f5      	b.n	8003dec <_printf_i+0x230>
 8003e00:	080044e1 	.word	0x080044e1
 8003e04:	080044f2 	.word	0x080044f2

08003e08 <_sbrk_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4d05      	ldr	r5, [pc, #20]	; (8003e24 <_sbrk_r+0x1c>)
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fc fbf8 	bl	8000608 <_sbrk>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_sbrk_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_sbrk_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	20000148 	.word	0x20000148

08003e28 <__sread>:
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e30:	f000 fab8 	bl	80043a4 <_read_r>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	bfab      	itete	ge
 8003e38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e3c:	181b      	addge	r3, r3, r0
 8003e3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e42:	bfac      	ite	ge
 8003e44:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e46:	81a3      	strhlt	r3, [r4, #12]
 8003e48:	bd10      	pop	{r4, pc}

08003e4a <__swrite>:
 8003e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4e:	461f      	mov	r7, r3
 8003e50:	898b      	ldrh	r3, [r1, #12]
 8003e52:	4605      	mov	r5, r0
 8003e54:	05db      	lsls	r3, r3, #23
 8003e56:	460c      	mov	r4, r1
 8003e58:	4616      	mov	r6, r2
 8003e5a:	d505      	bpl.n	8003e68 <__swrite+0x1e>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e64:	f000 f9c4 	bl	80041f0 <_lseek_r>
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	4632      	mov	r2, r6
 8003e6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e70:	81a3      	strh	r3, [r4, #12]
 8003e72:	4628      	mov	r0, r5
 8003e74:	463b      	mov	r3, r7
 8003e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7e:	f000 b869 	b.w	8003f54 <_write_r>

08003e82 <__sseek>:
 8003e82:	b510      	push	{r4, lr}
 8003e84:	460c      	mov	r4, r1
 8003e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e8a:	f000 f9b1 	bl	80041f0 <_lseek_r>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	bf15      	itete	ne
 8003e94:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e9e:	81a3      	strheq	r3, [r4, #12]
 8003ea0:	bf18      	it	ne
 8003ea2:	81a3      	strhne	r3, [r4, #12]
 8003ea4:	bd10      	pop	{r4, pc}

08003ea6 <__sclose>:
 8003ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eaa:	f000 b8d3 	b.w	8004054 <_close_r>
	...

08003eb0 <__swbuf_r>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	460e      	mov	r6, r1
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	b118      	cbz	r0, 8003ec2 <__swbuf_r+0x12>
 8003eba:	6983      	ldr	r3, [r0, #24]
 8003ebc:	b90b      	cbnz	r3, 8003ec2 <__swbuf_r+0x12>
 8003ebe:	f7ff fb81 	bl	80035c4 <__sinit>
 8003ec2:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <__swbuf_r+0x98>)
 8003ec4:	429c      	cmp	r4, r3
 8003ec6:	d12b      	bne.n	8003f20 <__swbuf_r+0x70>
 8003ec8:	686c      	ldr	r4, [r5, #4]
 8003eca:	69a3      	ldr	r3, [r4, #24]
 8003ecc:	60a3      	str	r3, [r4, #8]
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	071a      	lsls	r2, r3, #28
 8003ed2:	d52f      	bpl.n	8003f34 <__swbuf_r+0x84>
 8003ed4:	6923      	ldr	r3, [r4, #16]
 8003ed6:	b36b      	cbz	r3, 8003f34 <__swbuf_r+0x84>
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	6820      	ldr	r0, [r4, #0]
 8003edc:	b2f6      	uxtb	r6, r6
 8003ede:	1ac0      	subs	r0, r0, r3
 8003ee0:	6963      	ldr	r3, [r4, #20]
 8003ee2:	4637      	mov	r7, r6
 8003ee4:	4283      	cmp	r3, r0
 8003ee6:	dc04      	bgt.n	8003ef2 <__swbuf_r+0x42>
 8003ee8:	4621      	mov	r1, r4
 8003eea:	4628      	mov	r0, r5
 8003eec:	f000 f944 	bl	8004178 <_fflush_r>
 8003ef0:	bb30      	cbnz	r0, 8003f40 <__swbuf_r+0x90>
 8003ef2:	68a3      	ldr	r3, [r4, #8]
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	60a3      	str	r3, [r4, #8]
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	6022      	str	r2, [r4, #0]
 8003f00:	701e      	strb	r6, [r3, #0]
 8003f02:	6963      	ldr	r3, [r4, #20]
 8003f04:	4283      	cmp	r3, r0
 8003f06:	d004      	beq.n	8003f12 <__swbuf_r+0x62>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	07db      	lsls	r3, r3, #31
 8003f0c:	d506      	bpl.n	8003f1c <__swbuf_r+0x6c>
 8003f0e:	2e0a      	cmp	r6, #10
 8003f10:	d104      	bne.n	8003f1c <__swbuf_r+0x6c>
 8003f12:	4621      	mov	r1, r4
 8003f14:	4628      	mov	r0, r5
 8003f16:	f000 f92f 	bl	8004178 <_fflush_r>
 8003f1a:	b988      	cbnz	r0, 8003f40 <__swbuf_r+0x90>
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <__swbuf_r+0x9c>)
 8003f22:	429c      	cmp	r4, r3
 8003f24:	d101      	bne.n	8003f2a <__swbuf_r+0x7a>
 8003f26:	68ac      	ldr	r4, [r5, #8]
 8003f28:	e7cf      	b.n	8003eca <__swbuf_r+0x1a>
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <__swbuf_r+0xa0>)
 8003f2c:	429c      	cmp	r4, r3
 8003f2e:	bf08      	it	eq
 8003f30:	68ec      	ldreq	r4, [r5, #12]
 8003f32:	e7ca      	b.n	8003eca <__swbuf_r+0x1a>
 8003f34:	4621      	mov	r1, r4
 8003f36:	4628      	mov	r0, r5
 8003f38:	f000 f81e 	bl	8003f78 <__swsetup_r>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d0cb      	beq.n	8003ed8 <__swbuf_r+0x28>
 8003f40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f44:	e7ea      	b.n	8003f1c <__swbuf_r+0x6c>
 8003f46:	bf00      	nop
 8003f48:	08004490 	.word	0x08004490
 8003f4c:	080044b0 	.word	0x080044b0
 8003f50:	08004470 	.word	0x08004470

08003f54 <_write_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4604      	mov	r4, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4d05      	ldr	r5, [pc, #20]	; (8003f74 <_write_r+0x20>)
 8003f60:	602a      	str	r2, [r5, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f7fc f8f2 	bl	800014c <_write>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_write_r+0x1e>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_write_r+0x1e>
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	20000148 	.word	0x20000148

08003f78 <__swsetup_r>:
 8003f78:	4b32      	ldr	r3, [pc, #200]	; (8004044 <__swsetup_r+0xcc>)
 8003f7a:	b570      	push	{r4, r5, r6, lr}
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	4606      	mov	r6, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	b125      	cbz	r5, 8003f8e <__swsetup_r+0x16>
 8003f84:	69ab      	ldr	r3, [r5, #24]
 8003f86:	b913      	cbnz	r3, 8003f8e <__swsetup_r+0x16>
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f7ff fb1b 	bl	80035c4 <__sinit>
 8003f8e:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <__swsetup_r+0xd0>)
 8003f90:	429c      	cmp	r4, r3
 8003f92:	d10f      	bne.n	8003fb4 <__swsetup_r+0x3c>
 8003f94:	686c      	ldr	r4, [r5, #4]
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f9c:	0719      	lsls	r1, r3, #28
 8003f9e:	d42c      	bmi.n	8003ffa <__swsetup_r+0x82>
 8003fa0:	06dd      	lsls	r5, r3, #27
 8003fa2:	d411      	bmi.n	8003fc8 <__swsetup_r+0x50>
 8003fa4:	2309      	movs	r3, #9
 8003fa6:	6033      	str	r3, [r6, #0]
 8003fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	e03e      	b.n	8004032 <__swsetup_r+0xba>
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <__swsetup_r+0xd4>)
 8003fb6:	429c      	cmp	r4, r3
 8003fb8:	d101      	bne.n	8003fbe <__swsetup_r+0x46>
 8003fba:	68ac      	ldr	r4, [r5, #8]
 8003fbc:	e7eb      	b.n	8003f96 <__swsetup_r+0x1e>
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <__swsetup_r+0xd8>)
 8003fc0:	429c      	cmp	r4, r3
 8003fc2:	bf08      	it	eq
 8003fc4:	68ec      	ldreq	r4, [r5, #12]
 8003fc6:	e7e6      	b.n	8003f96 <__swsetup_r+0x1e>
 8003fc8:	0758      	lsls	r0, r3, #29
 8003fca:	d512      	bpl.n	8003ff2 <__swsetup_r+0x7a>
 8003fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fce:	b141      	cbz	r1, 8003fe2 <__swsetup_r+0x6a>
 8003fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	d002      	beq.n	8003fde <__swsetup_r+0x66>
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 f99b 	bl	8004314 <_free_r>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fe8:	81a3      	strh	r3, [r4, #12]
 8003fea:	2300      	movs	r3, #0
 8003fec:	6063      	str	r3, [r4, #4]
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	f043 0308 	orr.w	r3, r3, #8
 8003ff8:	81a3      	strh	r3, [r4, #12]
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	b94b      	cbnz	r3, 8004012 <__swsetup_r+0x9a>
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004008:	d003      	beq.n	8004012 <__swsetup_r+0x9a>
 800400a:	4621      	mov	r1, r4
 800400c:	4630      	mov	r0, r6
 800400e:	f000 f927 	bl	8004260 <__smakebuf_r>
 8004012:	89a0      	ldrh	r0, [r4, #12]
 8004014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004018:	f010 0301 	ands.w	r3, r0, #1
 800401c:	d00a      	beq.n	8004034 <__swsetup_r+0xbc>
 800401e:	2300      	movs	r3, #0
 8004020:	60a3      	str	r3, [r4, #8]
 8004022:	6963      	ldr	r3, [r4, #20]
 8004024:	425b      	negs	r3, r3
 8004026:	61a3      	str	r3, [r4, #24]
 8004028:	6923      	ldr	r3, [r4, #16]
 800402a:	b943      	cbnz	r3, 800403e <__swsetup_r+0xc6>
 800402c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004030:	d1ba      	bne.n	8003fa8 <__swsetup_r+0x30>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	0781      	lsls	r1, r0, #30
 8004036:	bf58      	it	pl
 8004038:	6963      	ldrpl	r3, [r4, #20]
 800403a:	60a3      	str	r3, [r4, #8]
 800403c:	e7f4      	b.n	8004028 <__swsetup_r+0xb0>
 800403e:	2000      	movs	r0, #0
 8004040:	e7f7      	b.n	8004032 <__swsetup_r+0xba>
 8004042:	bf00      	nop
 8004044:	2000000c 	.word	0x2000000c
 8004048:	08004490 	.word	0x08004490
 800404c:	080044b0 	.word	0x080044b0
 8004050:	08004470 	.word	0x08004470

08004054 <_close_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	2300      	movs	r3, #0
 8004058:	4d05      	ldr	r5, [pc, #20]	; (8004070 <_close_r+0x1c>)
 800405a:	4604      	mov	r4, r0
 800405c:	4608      	mov	r0, r1
 800405e:	602b      	str	r3, [r5, #0]
 8004060:	f7fc faa1 	bl	80005a6 <_close>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_close_r+0x1a>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_close_r+0x1a>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	20000148 	.word	0x20000148

08004074 <__sflush_r>:
 8004074:	898a      	ldrh	r2, [r1, #12]
 8004076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004078:	4605      	mov	r5, r0
 800407a:	0710      	lsls	r0, r2, #28
 800407c:	460c      	mov	r4, r1
 800407e:	d457      	bmi.n	8004130 <__sflush_r+0xbc>
 8004080:	684b      	ldr	r3, [r1, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	dc04      	bgt.n	8004090 <__sflush_r+0x1c>
 8004086:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	dc01      	bgt.n	8004090 <__sflush_r+0x1c>
 800408c:	2000      	movs	r0, #0
 800408e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004092:	2e00      	cmp	r6, #0
 8004094:	d0fa      	beq.n	800408c <__sflush_r+0x18>
 8004096:	2300      	movs	r3, #0
 8004098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800409c:	682f      	ldr	r7, [r5, #0]
 800409e:	602b      	str	r3, [r5, #0]
 80040a0:	d032      	beq.n	8004108 <__sflush_r+0x94>
 80040a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	075a      	lsls	r2, r3, #29
 80040a8:	d505      	bpl.n	80040b6 <__sflush_r+0x42>
 80040aa:	6863      	ldr	r3, [r4, #4]
 80040ac:	1ac0      	subs	r0, r0, r3
 80040ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040b0:	b10b      	cbz	r3, 80040b6 <__sflush_r+0x42>
 80040b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040b4:	1ac0      	subs	r0, r0, r3
 80040b6:	2300      	movs	r3, #0
 80040b8:	4602      	mov	r2, r0
 80040ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040bc:	4628      	mov	r0, r5
 80040be:	6a21      	ldr	r1, [r4, #32]
 80040c0:	47b0      	blx	r6
 80040c2:	1c43      	adds	r3, r0, #1
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	d106      	bne.n	80040d6 <__sflush_r+0x62>
 80040c8:	6829      	ldr	r1, [r5, #0]
 80040ca:	291d      	cmp	r1, #29
 80040cc:	d82c      	bhi.n	8004128 <__sflush_r+0xb4>
 80040ce:	4a29      	ldr	r2, [pc, #164]	; (8004174 <__sflush_r+0x100>)
 80040d0:	40ca      	lsrs	r2, r1
 80040d2:	07d6      	lsls	r6, r2, #31
 80040d4:	d528      	bpl.n	8004128 <__sflush_r+0xb4>
 80040d6:	2200      	movs	r2, #0
 80040d8:	6062      	str	r2, [r4, #4]
 80040da:	6922      	ldr	r2, [r4, #16]
 80040dc:	04d9      	lsls	r1, r3, #19
 80040de:	6022      	str	r2, [r4, #0]
 80040e0:	d504      	bpl.n	80040ec <__sflush_r+0x78>
 80040e2:	1c42      	adds	r2, r0, #1
 80040e4:	d101      	bne.n	80040ea <__sflush_r+0x76>
 80040e6:	682b      	ldr	r3, [r5, #0]
 80040e8:	b903      	cbnz	r3, 80040ec <__sflush_r+0x78>
 80040ea:	6560      	str	r0, [r4, #84]	; 0x54
 80040ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ee:	602f      	str	r7, [r5, #0]
 80040f0:	2900      	cmp	r1, #0
 80040f2:	d0cb      	beq.n	800408c <__sflush_r+0x18>
 80040f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040f8:	4299      	cmp	r1, r3
 80040fa:	d002      	beq.n	8004102 <__sflush_r+0x8e>
 80040fc:	4628      	mov	r0, r5
 80040fe:	f000 f909 	bl	8004314 <_free_r>
 8004102:	2000      	movs	r0, #0
 8004104:	6360      	str	r0, [r4, #52]	; 0x34
 8004106:	e7c2      	b.n	800408e <__sflush_r+0x1a>
 8004108:	6a21      	ldr	r1, [r4, #32]
 800410a:	2301      	movs	r3, #1
 800410c:	4628      	mov	r0, r5
 800410e:	47b0      	blx	r6
 8004110:	1c41      	adds	r1, r0, #1
 8004112:	d1c7      	bne.n	80040a4 <__sflush_r+0x30>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0c4      	beq.n	80040a4 <__sflush_r+0x30>
 800411a:	2b1d      	cmp	r3, #29
 800411c:	d001      	beq.n	8004122 <__sflush_r+0xae>
 800411e:	2b16      	cmp	r3, #22
 8004120:	d101      	bne.n	8004126 <__sflush_r+0xb2>
 8004122:	602f      	str	r7, [r5, #0]
 8004124:	e7b2      	b.n	800408c <__sflush_r+0x18>
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	e7ae      	b.n	800408e <__sflush_r+0x1a>
 8004130:	690f      	ldr	r7, [r1, #16]
 8004132:	2f00      	cmp	r7, #0
 8004134:	d0aa      	beq.n	800408c <__sflush_r+0x18>
 8004136:	0793      	lsls	r3, r2, #30
 8004138:	bf18      	it	ne
 800413a:	2300      	movne	r3, #0
 800413c:	680e      	ldr	r6, [r1, #0]
 800413e:	bf08      	it	eq
 8004140:	694b      	ldreq	r3, [r1, #20]
 8004142:	1bf6      	subs	r6, r6, r7
 8004144:	600f      	str	r7, [r1, #0]
 8004146:	608b      	str	r3, [r1, #8]
 8004148:	2e00      	cmp	r6, #0
 800414a:	dd9f      	ble.n	800408c <__sflush_r+0x18>
 800414c:	4633      	mov	r3, r6
 800414e:	463a      	mov	r2, r7
 8004150:	4628      	mov	r0, r5
 8004152:	6a21      	ldr	r1, [r4, #32]
 8004154:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004158:	47e0      	blx	ip
 800415a:	2800      	cmp	r0, #0
 800415c:	dc06      	bgt.n	800416c <__sflush_r+0xf8>
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	e790      	b.n	800408e <__sflush_r+0x1a>
 800416c:	4407      	add	r7, r0
 800416e:	1a36      	subs	r6, r6, r0
 8004170:	e7ea      	b.n	8004148 <__sflush_r+0xd4>
 8004172:	bf00      	nop
 8004174:	20400001 	.word	0x20400001

08004178 <_fflush_r>:
 8004178:	b538      	push	{r3, r4, r5, lr}
 800417a:	690b      	ldr	r3, [r1, #16]
 800417c:	4605      	mov	r5, r0
 800417e:	460c      	mov	r4, r1
 8004180:	b913      	cbnz	r3, 8004188 <_fflush_r+0x10>
 8004182:	2500      	movs	r5, #0
 8004184:	4628      	mov	r0, r5
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	b118      	cbz	r0, 8004192 <_fflush_r+0x1a>
 800418a:	6983      	ldr	r3, [r0, #24]
 800418c:	b90b      	cbnz	r3, 8004192 <_fflush_r+0x1a>
 800418e:	f7ff fa19 	bl	80035c4 <__sinit>
 8004192:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <_fflush_r+0x6c>)
 8004194:	429c      	cmp	r4, r3
 8004196:	d11b      	bne.n	80041d0 <_fflush_r+0x58>
 8004198:	686c      	ldr	r4, [r5, #4]
 800419a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0ef      	beq.n	8004182 <_fflush_r+0xa>
 80041a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041a4:	07d0      	lsls	r0, r2, #31
 80041a6:	d404      	bmi.n	80041b2 <_fflush_r+0x3a>
 80041a8:	0599      	lsls	r1, r3, #22
 80041aa:	d402      	bmi.n	80041b2 <_fflush_r+0x3a>
 80041ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ae:	f7ff faa7 	bl	8003700 <__retarget_lock_acquire_recursive>
 80041b2:	4628      	mov	r0, r5
 80041b4:	4621      	mov	r1, r4
 80041b6:	f7ff ff5d 	bl	8004074 <__sflush_r>
 80041ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041bc:	4605      	mov	r5, r0
 80041be:	07da      	lsls	r2, r3, #31
 80041c0:	d4e0      	bmi.n	8004184 <_fflush_r+0xc>
 80041c2:	89a3      	ldrh	r3, [r4, #12]
 80041c4:	059b      	lsls	r3, r3, #22
 80041c6:	d4dd      	bmi.n	8004184 <_fflush_r+0xc>
 80041c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ca:	f7ff fa9a 	bl	8003702 <__retarget_lock_release_recursive>
 80041ce:	e7d9      	b.n	8004184 <_fflush_r+0xc>
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <_fflush_r+0x70>)
 80041d2:	429c      	cmp	r4, r3
 80041d4:	d101      	bne.n	80041da <_fflush_r+0x62>
 80041d6:	68ac      	ldr	r4, [r5, #8]
 80041d8:	e7df      	b.n	800419a <_fflush_r+0x22>
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <_fflush_r+0x74>)
 80041dc:	429c      	cmp	r4, r3
 80041de:	bf08      	it	eq
 80041e0:	68ec      	ldreq	r4, [r5, #12]
 80041e2:	e7da      	b.n	800419a <_fflush_r+0x22>
 80041e4:	08004490 	.word	0x08004490
 80041e8:	080044b0 	.word	0x080044b0
 80041ec:	08004470 	.word	0x08004470

080041f0 <_lseek_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4604      	mov	r4, r0
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	2200      	movs	r2, #0
 80041fa:	4d05      	ldr	r5, [pc, #20]	; (8004210 <_lseek_r+0x20>)
 80041fc:	602a      	str	r2, [r5, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	f7fc f9f5 	bl	80005ee <_lseek>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_lseek_r+0x1e>
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	b103      	cbz	r3, 800420e <_lseek_r+0x1e>
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	20000148 	.word	0x20000148

08004214 <__swhatbuf_r>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	460e      	mov	r6, r1
 8004218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800421c:	4614      	mov	r4, r2
 800421e:	2900      	cmp	r1, #0
 8004220:	461d      	mov	r5, r3
 8004222:	b096      	sub	sp, #88	; 0x58
 8004224:	da08      	bge.n	8004238 <__swhatbuf_r+0x24>
 8004226:	2200      	movs	r2, #0
 8004228:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800422c:	602a      	str	r2, [r5, #0]
 800422e:	061a      	lsls	r2, r3, #24
 8004230:	d410      	bmi.n	8004254 <__swhatbuf_r+0x40>
 8004232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004236:	e00e      	b.n	8004256 <__swhatbuf_r+0x42>
 8004238:	466a      	mov	r2, sp
 800423a:	f000 f8c5 	bl	80043c8 <_fstat_r>
 800423e:	2800      	cmp	r0, #0
 8004240:	dbf1      	blt.n	8004226 <__swhatbuf_r+0x12>
 8004242:	9a01      	ldr	r2, [sp, #4]
 8004244:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004248:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800424c:	425a      	negs	r2, r3
 800424e:	415a      	adcs	r2, r3
 8004250:	602a      	str	r2, [r5, #0]
 8004252:	e7ee      	b.n	8004232 <__swhatbuf_r+0x1e>
 8004254:	2340      	movs	r3, #64	; 0x40
 8004256:	2000      	movs	r0, #0
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	b016      	add	sp, #88	; 0x58
 800425c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004260 <__smakebuf_r>:
 8004260:	898b      	ldrh	r3, [r1, #12]
 8004262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004264:	079d      	lsls	r5, r3, #30
 8004266:	4606      	mov	r6, r0
 8004268:	460c      	mov	r4, r1
 800426a:	d507      	bpl.n	800427c <__smakebuf_r+0x1c>
 800426c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	6123      	str	r3, [r4, #16]
 8004274:	2301      	movs	r3, #1
 8004276:	6163      	str	r3, [r4, #20]
 8004278:	b002      	add	sp, #8
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	466a      	mov	r2, sp
 800427e:	ab01      	add	r3, sp, #4
 8004280:	f7ff ffc8 	bl	8004214 <__swhatbuf_r>
 8004284:	9900      	ldr	r1, [sp, #0]
 8004286:	4605      	mov	r5, r0
 8004288:	4630      	mov	r0, r6
 800428a:	f7ff fa5b 	bl	8003744 <_malloc_r>
 800428e:	b948      	cbnz	r0, 80042a4 <__smakebuf_r+0x44>
 8004290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004294:	059a      	lsls	r2, r3, #22
 8004296:	d4ef      	bmi.n	8004278 <__smakebuf_r+0x18>
 8004298:	f023 0303 	bic.w	r3, r3, #3
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	81a3      	strh	r3, [r4, #12]
 80042a2:	e7e3      	b.n	800426c <__smakebuf_r+0xc>
 80042a4:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <__smakebuf_r+0x7c>)
 80042a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	6020      	str	r0, [r4, #0]
 80042ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	9b00      	ldr	r3, [sp, #0]
 80042b4:	6120      	str	r0, [r4, #16]
 80042b6:	6163      	str	r3, [r4, #20]
 80042b8:	9b01      	ldr	r3, [sp, #4]
 80042ba:	b15b      	cbz	r3, 80042d4 <__smakebuf_r+0x74>
 80042bc:	4630      	mov	r0, r6
 80042be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042c2:	f000 f893 	bl	80043ec <_isatty_r>
 80042c6:	b128      	cbz	r0, 80042d4 <__smakebuf_r+0x74>
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	f023 0303 	bic.w	r3, r3, #3
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	81a3      	strh	r3, [r4, #12]
 80042d4:	89a0      	ldrh	r0, [r4, #12]
 80042d6:	4305      	orrs	r5, r0
 80042d8:	81a5      	strh	r5, [r4, #12]
 80042da:	e7cd      	b.n	8004278 <__smakebuf_r+0x18>
 80042dc:	0800355d 	.word	0x0800355d

080042e0 <memchr>:
 80042e0:	4603      	mov	r3, r0
 80042e2:	b510      	push	{r4, lr}
 80042e4:	b2c9      	uxtb	r1, r1
 80042e6:	4402      	add	r2, r0
 80042e8:	4293      	cmp	r3, r2
 80042ea:	4618      	mov	r0, r3
 80042ec:	d101      	bne.n	80042f2 <memchr+0x12>
 80042ee:	2000      	movs	r0, #0
 80042f0:	e003      	b.n	80042fa <memchr+0x1a>
 80042f2:	7804      	ldrb	r4, [r0, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	428c      	cmp	r4, r1
 80042f8:	d1f6      	bne.n	80042e8 <memchr+0x8>
 80042fa:	bd10      	pop	{r4, pc}

080042fc <__malloc_lock>:
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <__malloc_lock+0x8>)
 80042fe:	f7ff b9ff 	b.w	8003700 <__retarget_lock_acquire_recursive>
 8004302:	bf00      	nop
 8004304:	2000013c 	.word	0x2000013c

08004308 <__malloc_unlock>:
 8004308:	4801      	ldr	r0, [pc, #4]	; (8004310 <__malloc_unlock+0x8>)
 800430a:	f7ff b9fa 	b.w	8003702 <__retarget_lock_release_recursive>
 800430e:	bf00      	nop
 8004310:	2000013c 	.word	0x2000013c

08004314 <_free_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	4605      	mov	r5, r0
 8004318:	2900      	cmp	r1, #0
 800431a:	d040      	beq.n	800439e <_free_r+0x8a>
 800431c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004320:	1f0c      	subs	r4, r1, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	bfb8      	it	lt
 8004326:	18e4      	addlt	r4, r4, r3
 8004328:	f7ff ffe8 	bl	80042fc <__malloc_lock>
 800432c:	4a1c      	ldr	r2, [pc, #112]	; (80043a0 <_free_r+0x8c>)
 800432e:	6813      	ldr	r3, [r2, #0]
 8004330:	b933      	cbnz	r3, 8004340 <_free_r+0x2c>
 8004332:	6063      	str	r3, [r4, #4]
 8004334:	6014      	str	r4, [r2, #0]
 8004336:	4628      	mov	r0, r5
 8004338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800433c:	f7ff bfe4 	b.w	8004308 <__malloc_unlock>
 8004340:	42a3      	cmp	r3, r4
 8004342:	d908      	bls.n	8004356 <_free_r+0x42>
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	1821      	adds	r1, r4, r0
 8004348:	428b      	cmp	r3, r1
 800434a:	bf01      	itttt	eq
 800434c:	6819      	ldreq	r1, [r3, #0]
 800434e:	685b      	ldreq	r3, [r3, #4]
 8004350:	1809      	addeq	r1, r1, r0
 8004352:	6021      	streq	r1, [r4, #0]
 8004354:	e7ed      	b.n	8004332 <_free_r+0x1e>
 8004356:	461a      	mov	r2, r3
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	b10b      	cbz	r3, 8004360 <_free_r+0x4c>
 800435c:	42a3      	cmp	r3, r4
 800435e:	d9fa      	bls.n	8004356 <_free_r+0x42>
 8004360:	6811      	ldr	r1, [r2, #0]
 8004362:	1850      	adds	r0, r2, r1
 8004364:	42a0      	cmp	r0, r4
 8004366:	d10b      	bne.n	8004380 <_free_r+0x6c>
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	4401      	add	r1, r0
 800436c:	1850      	adds	r0, r2, r1
 800436e:	4283      	cmp	r3, r0
 8004370:	6011      	str	r1, [r2, #0]
 8004372:	d1e0      	bne.n	8004336 <_free_r+0x22>
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	4401      	add	r1, r0
 800437a:	6011      	str	r1, [r2, #0]
 800437c:	6053      	str	r3, [r2, #4]
 800437e:	e7da      	b.n	8004336 <_free_r+0x22>
 8004380:	d902      	bls.n	8004388 <_free_r+0x74>
 8004382:	230c      	movs	r3, #12
 8004384:	602b      	str	r3, [r5, #0]
 8004386:	e7d6      	b.n	8004336 <_free_r+0x22>
 8004388:	6820      	ldr	r0, [r4, #0]
 800438a:	1821      	adds	r1, r4, r0
 800438c:	428b      	cmp	r3, r1
 800438e:	bf01      	itttt	eq
 8004390:	6819      	ldreq	r1, [r3, #0]
 8004392:	685b      	ldreq	r3, [r3, #4]
 8004394:	1809      	addeq	r1, r1, r0
 8004396:	6021      	streq	r1, [r4, #0]
 8004398:	6063      	str	r3, [r4, #4]
 800439a:	6054      	str	r4, [r2, #4]
 800439c:	e7cb      	b.n	8004336 <_free_r+0x22>
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	20000140 	.word	0x20000140

080043a4 <_read_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4604      	mov	r4, r0
 80043a8:	4608      	mov	r0, r1
 80043aa:	4611      	mov	r1, r2
 80043ac:	2200      	movs	r2, #0
 80043ae:	4d05      	ldr	r5, [pc, #20]	; (80043c4 <_read_r+0x20>)
 80043b0:	602a      	str	r2, [r5, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f7fc f8da 	bl	800056c <_read>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d102      	bne.n	80043c2 <_read_r+0x1e>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	b103      	cbz	r3, 80043c2 <_read_r+0x1e>
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	20000148 	.word	0x20000148

080043c8 <_fstat_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	2300      	movs	r3, #0
 80043cc:	4d06      	ldr	r5, [pc, #24]	; (80043e8 <_fstat_r+0x20>)
 80043ce:	4604      	mov	r4, r0
 80043d0:	4608      	mov	r0, r1
 80043d2:	4611      	mov	r1, r2
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	f7fc f8f1 	bl	80005bc <_fstat>
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	d102      	bne.n	80043e4 <_fstat_r+0x1c>
 80043de:	682b      	ldr	r3, [r5, #0]
 80043e0:	b103      	cbz	r3, 80043e4 <_fstat_r+0x1c>
 80043e2:	6023      	str	r3, [r4, #0]
 80043e4:	bd38      	pop	{r3, r4, r5, pc}
 80043e6:	bf00      	nop
 80043e8:	20000148 	.word	0x20000148

080043ec <_isatty_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	2300      	movs	r3, #0
 80043f0:	4d05      	ldr	r5, [pc, #20]	; (8004408 <_isatty_r+0x1c>)
 80043f2:	4604      	mov	r4, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	602b      	str	r3, [r5, #0]
 80043f8:	f7fc f8ef 	bl	80005da <_isatty>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_isatty_r+0x1a>
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	b103      	cbz	r3, 8004406 <_isatty_r+0x1a>
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	20000148 	.word	0x20000148

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr
