
I2CRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d0  080044d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080044d0  080044d0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d0  080044d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  08004548  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004548  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac2f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a01  00000000  00000000  0002acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002d0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b71  00000000  00000000  0002da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c74d  00000000  00000000  000455d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e7b  00000000  00000000  00051d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7b99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003118  00000000  00000000  000d7bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080043ec 	.word	0x080043ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080043ec 	.word	0x080043ec

0800014c <_write>:
static void	MX_I2C1_Init(void);
static void	MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

int	_write(int file, char *data, int len)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	// arbitrary timeout 1000
	HAL_StatusTypeDef status =
		HAL_UART_Transmit(&huart1, (uint8_t *)data, len, 1000);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000160:	68b9      	ldr	r1, [r7, #8]
 8000162:	4807      	ldr	r0, [pc, #28]	; (8000180 <_write+0x34>)
 8000164:	f002 fffc 	bl	8003160 <HAL_UART_Transmit>
 8000168:	4603      	mov	r3, r0
 800016a:	75fb      	strb	r3, [r7, #23]

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 800016c:	7dfb      	ldrb	r3, [r7, #23]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d101      	bne.n	8000176 <_write+0x2a>
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	e000      	b.n	8000178 <_write+0x2c>
 8000176:	2300      	movs	r3, #0
}
 8000178:	4618      	mov	r0, r3
 800017a:	3718      	adds	r7, #24
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	200000e0 	.word	0x200000e0

08000184 <HAL_I2C_SlaveRxCpltCallback>:

void	HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	// printf("DataReceived: ");
	// for (int i = 0; i < 10; i++)
	// {
	printf("%d ", RX_Buffer[0]);
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	4619      	mov	r1, r3
 8000192:	4806      	ldr	r0, [pc, #24]	; (80001ac <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8000194:	f003 f996 	bl	80034c4 <iprintf>
	// }
	printf("\n\r");
 8000198:	4805      	ldr	r0, [pc, #20]	; (80001b0 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 800019a:	f003 f993 	bl	80034c4 <iprintf>
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000128 	.word	0x20000128
 80001ac:	08004404 	.word	0x08004404
 80001b0:	08004408 	.word	0x08004408

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int	main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals,
		Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001b8:	f000 fa78 	bl	80006ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001bc:	f000 f810 	bl	80001e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001c0:	f000 f8a2 	bl	8000308 <MX_GPIO_Init>
	MX_I2C1_Init();
 80001c4:	f000 f848 	bl	8000258 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80001c8:	f000 f874 	bl	80002b4 <MX_USART1_UART_Init>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)RX_Buffer, 10);
 80001cc:	220a      	movs	r2, #10
 80001ce:	4902      	ldr	r1, [pc, #8]	; (80001d8 <main+0x24>)
 80001d0:	4802      	ldr	r0, [pc, #8]	; (80001dc <main+0x28>)
 80001d2:	f000 ff3d 	bl	8001050 <HAL_I2C_Slave_Receive_IT>
 80001d6:	e7f9      	b.n	80001cc <main+0x18>
 80001d8:	20000128 	.word	0x20000128
 80001dc:	2000008c 	.word	0x2000008c

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void	SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b090      	sub	sp, #64	; 0x40
 80001e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	2228      	movs	r2, #40	; 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f003 f960 	bl	80034b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000202:	2302      	movs	r3, #2
 8000204:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020a:	2310      	movs	r3, #16
 800020c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800020e:	2300      	movs	r3, #0
 8000210:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fb42 	bl	80028a0 <HAL_RCC_OscConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x46>
	{
		Error_Handler();
 8000222:	f000 f893 	bl	800034c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000226:	230f      	movs	r3, #15
 8000228:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022a:	2300      	movs	r3, #0
 800022c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fdb0 	bl	8002da4 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x6e>
	{
		Error_Handler();
 800024a:	f000 f87f 	bl	800034c <Error_Handler>
	}
}
 800024e:	bf00      	nop
 8000250:	3740      	adds	r7, #64	; 0x40
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void	MX_I2C1_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <MX_I2C1_Init+0x50>)
 800025e:	4a13      	ldr	r2, [pc, #76]	; (80002ac <MX_I2C1_Init+0x54>)
 8000260:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000264:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <MX_I2C1_Init+0x58>)
 8000266:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <MX_I2C1_Init+0x50>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 2;
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000270:	2202      	movs	r2, #2
 8000272:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800027a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <MX_I2C1_Init+0x50>)
 800027e:	2200      	movs	r2, #0
 8000280:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <MX_I2C1_Init+0x50>)
 800028a:	2200      	movs	r2, #0
 800028c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000290:	2200      	movs	r2, #0
 8000292:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000296:	f000 fd83 	bl	8000da0 <HAL_I2C_Init>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80002a0:	f000 f854 	bl	800034c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000008c 	.word	0x2000008c
 80002ac:	40005400 	.word	0x40005400
 80002b0:	00061a80 	.word	0x00061a80

080002b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void	MX_USART1_UART_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <MX_USART1_UART_Init+0x50>)
 80002bc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002da:	220c      	movs	r2, #12
 80002dc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ec:	f002 fee8 	bl	80030c0 <HAL_UART_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80002f6:	f000 f829 	bl	800034c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	200000e0 	.word	0x200000e0
 8000304:	40013800 	.word	0x40013800

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void	MX_GPIO_Init(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <MX_GPIO_Init+0x40>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a0d      	ldr	r2, [pc, #52]	; (8000348 <MX_GPIO_Init+0x40>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6193      	str	r3, [r2, #24]
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <MX_GPIO_Init+0x40>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0304 	and.w	r3, r3, #4
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <MX_GPIO_Init+0x40>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a07      	ldr	r2, [pc, #28]	; (8000348 <MX_GPIO_Init+0x40>)
 800032c:	f043 0308 	orr.w	r3, r3, #8
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <MX_GPIO_Init+0x40>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	683b      	ldr	r3, [r7, #0]
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000

0800034c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void	Error_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000350:	b672      	cpsid	i
}
 8000352:	bf00      	nop
	__disable_irq();
	// while (1)
	// {
	// }
	/* USER CODE END Error_Handler_Debug */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <HAL_MspInit+0x40>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a0d      	ldr	r2, [pc, #52]	; (800039c <HAL_MspInit+0x40>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6193      	str	r3, [r2, #24]
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <HAL_MspInit+0x40>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <HAL_MspInit+0x40>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	4a07      	ldr	r2, [pc, #28]	; (800039c <HAL_MspInit+0x40>)
 8000380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000384:	61d3      	str	r3, [r2, #28]
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <HAL_MspInit+0x40>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000

080003a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	; 0x28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a21      	ldr	r2, [pc, #132]	; (8000440 <HAL_I2C_MspInit+0xa0>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d13a      	bne.n	8000436 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b20      	ldr	r3, [pc, #128]	; (8000444 <HAL_I2C_MspInit+0xa4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1f      	ldr	r2, [pc, #124]	; (8000444 <HAL_I2C_MspInit+0xa4>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <HAL_I2C_MspInit+0xa4>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	613b      	str	r3, [r7, #16]
 80003d6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80003dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003de:	2312      	movs	r3, #18
 80003e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e2:	2303      	movs	r3, #3
 80003e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	4619      	mov	r1, r3
 80003ec:	4816      	ldr	r0, [pc, #88]	; (8000448 <HAL_I2C_MspInit+0xa8>)
 80003ee:	f000 fb53 	bl	8000a98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80003f2:	4b16      	ldr	r3, [pc, #88]	; (800044c <HAL_I2C_MspInit+0xac>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	627b      	str	r3, [r7, #36]	; 0x24
 80003f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80003fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000402:	f043 0302 	orr.w	r3, r3, #2
 8000406:	627b      	str	r3, [r7, #36]	; 0x24
 8000408:	4a10      	ldr	r2, [pc, #64]	; (800044c <HAL_I2C_MspInit+0xac>)
 800040a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <HAL_I2C_MspInit+0xa4>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0c      	ldr	r2, [pc, #48]	; (8000444 <HAL_I2C_MspInit+0xa4>)
 8000414:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <HAL_I2C_MspInit+0xa4>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	2100      	movs	r1, #0
 800042a:	201f      	movs	r0, #31
 800042c:	f000 fa77 	bl	800091e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000430:	201f      	movs	r0, #31
 8000432:	f000 fa90 	bl	8000956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000436:	bf00      	nop
 8000438:	3728      	adds	r7, #40	; 0x28
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40005400 	.word	0x40005400
 8000444:	40021000 	.word	0x40021000
 8000448:	40010c00 	.word	0x40010c00
 800044c:	40010000 	.word	0x40010000

08000450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <HAL_UART_MspInit+0x8c>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d131      	bne.n	80004d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <HAL_UART_MspInit+0x90>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a1a      	ldr	r2, [pc, #104]	; (80004e0 <HAL_UART_MspInit+0x90>)
 8000476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <HAL_UART_MspInit+0x90>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <HAL_UART_MspInit+0x90>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <HAL_UART_MspInit+0x90>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <HAL_UART_MspInit+0x90>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a6:	2302      	movs	r3, #2
 80004a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004aa:	2303      	movs	r3, #3
 80004ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4619      	mov	r1, r3
 80004b4:	480b      	ldr	r0, [pc, #44]	; (80004e4 <HAL_UART_MspInit+0x94>)
 80004b6:	f000 faef 	bl	8000a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <HAL_UART_MspInit+0x94>)
 80004d0:	f000 fae2 	bl	8000a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40013800 	.word	0x40013800
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010800 	.word	0x40010800

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80004ec:	e7fe      	b.n	80004ec <NMI_Handler+0x4>

080004ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <MemManage_Handler+0x4>

080004fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <UsageFault_Handler+0x4>

08000506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052e:	f000 f903 	bl	8000738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <I2C1_EV_IRQHandler+0x10>)
 800053e:	f000 fdf5 	bl	800112c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000008c 	.word	0x2000008c

0800054c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	e00a      	b.n	8000574 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800055e:	f3af 8000 	nop.w
 8000562:	4601      	mov	r1, r0
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	60ba      	str	r2, [r7, #8]
 800056a:	b2ca      	uxtb	r2, r1
 800056c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf0      	blt.n	800055e <_read+0x12>
  }

  return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ac:	605a      	str	r2, [r3, #4]
  return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <_isatty>:

int _isatty(int file)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
	...

080005e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <_sbrk+0x5c>)
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <_sbrk+0x60>)
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <_sbrk+0x64>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <_sbrk+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	429a      	cmp	r2, r3
 8000616:	d207      	bcs.n	8000628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000618:	f002 ff22 	bl	8003460 <__errno>
 800061c:	4603      	mov	r3, r0
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000626:	e009      	b.n	800063c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <_sbrk+0x64>)
 8000638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20005000 	.word	0x20005000
 8000648:	00000400 	.word	0x00000400
 800064c:	20000134 	.word	0x20000134
 8000650:	20000150 	.word	0x20000150

08000654 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000660:	f7ff fff8 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000666:	490c      	ldr	r1, [pc, #48]	; (8000698 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <LoopFillZerobss+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800067c:	4c09      	ldr	r4, [pc, #36]	; (80006a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f002 feef 	bl	800346c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fd91 	bl	80001b4 <main>
  bx lr
 8000692:	4770      	bx	lr
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800069c:	080044d8 	.word	0x080044d8
  ldr r2, =_sbss
 80006a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006a4:	2000014c 	.word	0x2000014c

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>
	...

080006ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_Init+0x28>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_Init+0x28>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 f923 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c2:	200f      	movs	r0, #15
 80006c4:	f000 f808 	bl	80006d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c8:	f7ff fe48 	bl	800035c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40022000 	.word	0x40022000

080006d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_InitTick+0x54>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_InitTick+0x58>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f93b 	bl	8000972 <HAL_SYSTICK_Config>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e00e      	b.n	8000724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d80a      	bhi.n	8000722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800070c:	2200      	movs	r2, #0
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000714:	f000 f903 	bl	800091e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <HAL_InitTick+0x5c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	e000      	b.n	8000724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
}
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000000 	.word	0x20000000
 8000730:	20000008 	.word	0x20000008
 8000734:	20000004 	.word	0x20000004

08000738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_IncTick+0x1c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <HAL_IncTick+0x20>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a03      	ldr	r2, [pc, #12]	; (8000758 <HAL_IncTick+0x20>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	20000008 	.word	0x20000008
 8000758:	20000138 	.word	0x20000138

0800075c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return uwTick;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <HAL_GetTick+0x10>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000138 	.word	0x20000138

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4906      	ldr	r1, [pc, #24]	; (8000808 <__NVIC_EnableIRQ+0x34>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	e000e100 	.word	0xe000e100

0800080c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	db0a      	blt.n	8000836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	490c      	ldr	r1, [pc, #48]	; (8000858 <__NVIC_SetPriority+0x4c>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	0112      	lsls	r2, r2, #4
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	440b      	add	r3, r1
 8000830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000834:	e00a      	b.n	800084c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4908      	ldr	r1, [pc, #32]	; (800085c <__NVIC_SetPriority+0x50>)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	3b04      	subs	r3, #4
 8000844:	0112      	lsls	r2, r2, #4
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	440b      	add	r3, r1
 800084a:	761a      	strb	r2, [r3, #24]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000860:	b480      	push	{r7}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f1c3 0307 	rsb	r3, r3, #7
 800087a:	2b04      	cmp	r3, #4
 800087c:	bf28      	it	cs
 800087e:	2304      	movcs	r3, #4
 8000880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3304      	adds	r3, #4
 8000886:	2b06      	cmp	r3, #6
 8000888:	d902      	bls.n	8000890 <NVIC_EncodePriority+0x30>
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3b03      	subs	r3, #3
 800088e:	e000      	b.n	8000892 <NVIC_EncodePriority+0x32>
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43da      	mvns	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	401a      	ands	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43d9      	mvns	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	4313      	orrs	r3, r2
         );
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3724      	adds	r7, #36	; 0x24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d4:	d301      	bcc.n	80008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00f      	b.n	80008fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <SysTick_Config+0x40>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e2:	210f      	movs	r1, #15
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e8:	f7ff ff90 	bl	800080c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <SysTick_Config+0x40>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f2:	4b04      	ldr	r3, [pc, #16]	; (8000904 <SysTick_Config+0x40>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ff2d 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000930:	f7ff ff42 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ff90 	bl	8000860 <NVIC_EncodePriority>
 8000940:	4602      	mov	r2, r0
 8000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff5f 	bl	800080c <__NVIC_SetPriority>
}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff35 	bl	80007d4 <__NVIC_EnableIRQ>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffa2 	bl	80008c4 <SysTick_Config>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d005      	beq.n	80009b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2204      	movs	r2, #4
 80009a8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
 80009ae:	e051      	b.n	8000a54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f022 020e 	bic.w	r2, r2, #14
 80009be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 0201 	bic.w	r2, r2, #1
 80009ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <HAL_DMA_Abort_IT+0xd4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d029      	beq.n	8000a2e <HAL_DMA_Abort_IT+0xa2>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <HAL_DMA_Abort_IT+0xd8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d022      	beq.n	8000a2a <HAL_DMA_Abort_IT+0x9e>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <HAL_DMA_Abort_IT+0xdc>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d01a      	beq.n	8000a24 <HAL_DMA_Abort_IT+0x98>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <HAL_DMA_Abort_IT+0xe0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d012      	beq.n	8000a1e <HAL_DMA_Abort_IT+0x92>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <HAL_DMA_Abort_IT+0xe4>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d00a      	beq.n	8000a18 <HAL_DMA_Abort_IT+0x8c>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <HAL_DMA_Abort_IT+0xe8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d102      	bne.n	8000a12 <HAL_DMA_Abort_IT+0x86>
 8000a0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a10:	e00e      	b.n	8000a30 <HAL_DMA_Abort_IT+0xa4>
 8000a12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a16:	e00b      	b.n	8000a30 <HAL_DMA_Abort_IT+0xa4>
 8000a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1c:	e008      	b.n	8000a30 <HAL_DMA_Abort_IT+0xa4>
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	e005      	b.n	8000a30 <HAL_DMA_Abort_IT+0xa4>
 8000a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a28:	e002      	b.n	8000a30 <HAL_DMA_Abort_IT+0xa4>
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	e000      	b.n	8000a30 <HAL_DMA_Abort_IT+0xa4>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <HAL_DMA_Abort_IT+0xec>)
 8000a32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2201      	movs	r2, #1
 8000a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	4798      	blx	r3
    } 
  }
  return status;
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40020008 	.word	0x40020008
 8000a64:	4002001c 	.word	0x4002001c
 8000a68:	40020030 	.word	0x40020030
 8000a6c:	40020044 	.word	0x40020044
 8000a70:	40020058 	.word	0x40020058
 8000a74:	4002006c 	.word	0x4002006c
 8000a78:	40020000 	.word	0x40020000

08000a7c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a8a:	b2db      	uxtb	r3, r3
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
	...

08000a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b08b      	sub	sp, #44	; 0x2c
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aaa:	e169      	b.n	8000d80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aac:	2201      	movs	r2, #1
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	69fa      	ldr	r2, [r7, #28]
 8000abc:	4013      	ands	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	f040 8158 	bne.w	8000d7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	4a9a      	ldr	r2, [pc, #616]	; (8000d38 <HAL_GPIO_Init+0x2a0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d05e      	beq.n	8000b92 <HAL_GPIO_Init+0xfa>
 8000ad4:	4a98      	ldr	r2, [pc, #608]	; (8000d38 <HAL_GPIO_Init+0x2a0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d875      	bhi.n	8000bc6 <HAL_GPIO_Init+0x12e>
 8000ada:	4a98      	ldr	r2, [pc, #608]	; (8000d3c <HAL_GPIO_Init+0x2a4>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d058      	beq.n	8000b92 <HAL_GPIO_Init+0xfa>
 8000ae0:	4a96      	ldr	r2, [pc, #600]	; (8000d3c <HAL_GPIO_Init+0x2a4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d86f      	bhi.n	8000bc6 <HAL_GPIO_Init+0x12e>
 8000ae6:	4a96      	ldr	r2, [pc, #600]	; (8000d40 <HAL_GPIO_Init+0x2a8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d052      	beq.n	8000b92 <HAL_GPIO_Init+0xfa>
 8000aec:	4a94      	ldr	r2, [pc, #592]	; (8000d40 <HAL_GPIO_Init+0x2a8>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d869      	bhi.n	8000bc6 <HAL_GPIO_Init+0x12e>
 8000af2:	4a94      	ldr	r2, [pc, #592]	; (8000d44 <HAL_GPIO_Init+0x2ac>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d04c      	beq.n	8000b92 <HAL_GPIO_Init+0xfa>
 8000af8:	4a92      	ldr	r2, [pc, #584]	; (8000d44 <HAL_GPIO_Init+0x2ac>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d863      	bhi.n	8000bc6 <HAL_GPIO_Init+0x12e>
 8000afe:	4a92      	ldr	r2, [pc, #584]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d046      	beq.n	8000b92 <HAL_GPIO_Init+0xfa>
 8000b04:	4a90      	ldr	r2, [pc, #576]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d85d      	bhi.n	8000bc6 <HAL_GPIO_Init+0x12e>
 8000b0a:	2b12      	cmp	r3, #18
 8000b0c:	d82a      	bhi.n	8000b64 <HAL_GPIO_Init+0xcc>
 8000b0e:	2b12      	cmp	r3, #18
 8000b10:	d859      	bhi.n	8000bc6 <HAL_GPIO_Init+0x12e>
 8000b12:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <HAL_GPIO_Init+0x80>)
 8000b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b18:	08000b93 	.word	0x08000b93
 8000b1c:	08000b6d 	.word	0x08000b6d
 8000b20:	08000b7f 	.word	0x08000b7f
 8000b24:	08000bc1 	.word	0x08000bc1
 8000b28:	08000bc7 	.word	0x08000bc7
 8000b2c:	08000bc7 	.word	0x08000bc7
 8000b30:	08000bc7 	.word	0x08000bc7
 8000b34:	08000bc7 	.word	0x08000bc7
 8000b38:	08000bc7 	.word	0x08000bc7
 8000b3c:	08000bc7 	.word	0x08000bc7
 8000b40:	08000bc7 	.word	0x08000bc7
 8000b44:	08000bc7 	.word	0x08000bc7
 8000b48:	08000bc7 	.word	0x08000bc7
 8000b4c:	08000bc7 	.word	0x08000bc7
 8000b50:	08000bc7 	.word	0x08000bc7
 8000b54:	08000bc7 	.word	0x08000bc7
 8000b58:	08000bc7 	.word	0x08000bc7
 8000b5c:	08000b75 	.word	0x08000b75
 8000b60:	08000b89 	.word	0x08000b89
 8000b64:	4a79      	ldr	r2, [pc, #484]	; (8000d4c <HAL_GPIO_Init+0x2b4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d013      	beq.n	8000b92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b6a:	e02c      	b.n	8000bc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	623b      	str	r3, [r7, #32]
          break;
 8000b72:	e029      	b.n	8000bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	623b      	str	r3, [r7, #32]
          break;
 8000b7c:	e024      	b.n	8000bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	3308      	adds	r3, #8
 8000b84:	623b      	str	r3, [r7, #32]
          break;
 8000b86:	e01f      	b.n	8000bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	330c      	adds	r3, #12
 8000b8e:	623b      	str	r3, [r7, #32]
          break;
 8000b90:	e01a      	b.n	8000bc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	623b      	str	r3, [r7, #32]
          break;
 8000b9e:	e013      	b.n	8000bc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d105      	bne.n	8000bb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69fa      	ldr	r2, [r7, #28]
 8000bb0:	611a      	str	r2, [r3, #16]
          break;
 8000bb2:	e009      	b.n	8000bc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	615a      	str	r2, [r3, #20]
          break;
 8000bbe:	e003      	b.n	8000bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
          break;
 8000bc4:	e000      	b.n	8000bc8 <HAL_GPIO_Init+0x130>
          break;
 8000bc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d801      	bhi.n	8000bd2 <HAL_GPIO_Init+0x13a>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	e001      	b.n	8000bd6 <HAL_GPIO_Init+0x13e>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	2bff      	cmp	r3, #255	; 0xff
 8000bdc:	d802      	bhi.n	8000be4 <HAL_GPIO_Init+0x14c>
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	e002      	b.n	8000bea <HAL_GPIO_Init+0x152>
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	3b08      	subs	r3, #8
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	6a39      	ldr	r1, [r7, #32]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	fa01 f303 	lsl.w	r3, r1, r3
 8000c04:	431a      	orrs	r2, r3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 80b1 	beq.w	8000d7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c18:	4b4d      	ldr	r3, [pc, #308]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a4c      	ldr	r2, [pc, #304]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <HAL_GPIO_Init+0x2b8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c30:	4a48      	ldr	r2, [pc, #288]	; (8000d54 <HAL_GPIO_Init+0x2bc>)
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	3302      	adds	r3, #2
 8000c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	220f      	movs	r2, #15
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4013      	ands	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a40      	ldr	r2, [pc, #256]	; (8000d58 <HAL_GPIO_Init+0x2c0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d013      	beq.n	8000c84 <HAL_GPIO_Init+0x1ec>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a3f      	ldr	r2, [pc, #252]	; (8000d5c <HAL_GPIO_Init+0x2c4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d00d      	beq.n	8000c80 <HAL_GPIO_Init+0x1e8>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a3e      	ldr	r2, [pc, #248]	; (8000d60 <HAL_GPIO_Init+0x2c8>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d007      	beq.n	8000c7c <HAL_GPIO_Init+0x1e4>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a3d      	ldr	r2, [pc, #244]	; (8000d64 <HAL_GPIO_Init+0x2cc>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d101      	bne.n	8000c78 <HAL_GPIO_Init+0x1e0>
 8000c74:	2303      	movs	r3, #3
 8000c76:	e006      	b.n	8000c86 <HAL_GPIO_Init+0x1ee>
 8000c78:	2304      	movs	r3, #4
 8000c7a:	e004      	b.n	8000c86 <HAL_GPIO_Init+0x1ee>
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	e002      	b.n	8000c86 <HAL_GPIO_Init+0x1ee>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e000      	b.n	8000c86 <HAL_GPIO_Init+0x1ee>
 8000c84:	2300      	movs	r3, #0
 8000c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c88:	f002 0203 	and.w	r2, r2, #3
 8000c8c:	0092      	lsls	r2, r2, #2
 8000c8e:	4093      	lsls	r3, r2
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c96:	492f      	ldr	r1, [pc, #188]	; (8000d54 <HAL_GPIO_Init+0x2bc>)
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	492c      	ldr	r1, [pc, #176]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	608b      	str	r3, [r1, #8]
 8000cbc:	e006      	b.n	8000ccc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	4928      	ldr	r1, [pc, #160]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d006      	beq.n	8000ce6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	4922      	ldr	r1, [pc, #136]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	60cb      	str	r3, [r1, #12]
 8000ce4:	e006      	b.n	8000cf4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	491e      	ldr	r1, [pc, #120]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d006      	beq.n	8000d0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	4918      	ldr	r1, [pc, #96]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	604b      	str	r3, [r1, #4]
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	4914      	ldr	r1, [pc, #80]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000d18:	4013      	ands	r3, r2
 8000d1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d021      	beq.n	8000d6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	490e      	ldr	r1, [pc, #56]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	600b      	str	r3, [r1, #0]
 8000d34:	e021      	b.n	8000d7a <HAL_GPIO_Init+0x2e2>
 8000d36:	bf00      	nop
 8000d38:	10320000 	.word	0x10320000
 8000d3c:	10310000 	.word	0x10310000
 8000d40:	10220000 	.word	0x10220000
 8000d44:	10210000 	.word	0x10210000
 8000d48:	10120000 	.word	0x10120000
 8000d4c:	10110000 	.word	0x10110000
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010000 	.word	0x40010000
 8000d58:	40010800 	.word	0x40010800
 8000d5c:	40010c00 	.word	0x40010c00
 8000d60:	40011000 	.word	0x40011000
 8000d64:	40011400 	.word	0x40011400
 8000d68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	4909      	ldr	r1, [pc, #36]	; (8000d9c <HAL_GPIO_Init+0x304>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f47f ae8e 	bne.w	8000aac <HAL_GPIO_Init+0x14>
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	372c      	adds	r7, #44	; 0x2c
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	40010400 	.word	0x40010400

08000da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e12b      	b.n	800100a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d106      	bne.n	8000dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff faea 	bl	80003a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2224      	movs	r2, #36	; 0x24
 8000dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0201 	bic.w	r2, r2, #1
 8000de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e04:	f002 f916 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8000e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4a81      	ldr	r2, [pc, #516]	; (8001014 <HAL_I2C_Init+0x274>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d807      	bhi.n	8000e24 <HAL_I2C_Init+0x84>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4a80      	ldr	r2, [pc, #512]	; (8001018 <HAL_I2C_Init+0x278>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	bf94      	ite	ls
 8000e1c:	2301      	movls	r3, #1
 8000e1e:	2300      	movhi	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	e006      	b.n	8000e32 <HAL_I2C_Init+0x92>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4a7d      	ldr	r2, [pc, #500]	; (800101c <HAL_I2C_Init+0x27c>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	bf94      	ite	ls
 8000e2c:	2301      	movls	r3, #1
 8000e2e:	2300      	movhi	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e0e7      	b.n	800100a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4a78      	ldr	r2, [pc, #480]	; (8001020 <HAL_I2C_Init+0x280>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	0c9b      	lsrs	r3, r3, #18
 8000e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4a6a      	ldr	r2, [pc, #424]	; (8001014 <HAL_I2C_Init+0x274>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d802      	bhi.n	8000e74 <HAL_I2C_Init+0xd4>
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	3301      	adds	r3, #1
 8000e72:	e009      	b.n	8000e88 <HAL_I2C_Init+0xe8>
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e7a:	fb02 f303 	mul.w	r3, r2, r3
 8000e7e:	4a69      	ldr	r2, [pc, #420]	; (8001024 <HAL_I2C_Init+0x284>)
 8000e80:	fba2 2303 	umull	r2, r3, r2, r3
 8000e84:	099b      	lsrs	r3, r3, #6
 8000e86:	3301      	adds	r3, #1
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	495c      	ldr	r1, [pc, #368]	; (8001014 <HAL_I2C_Init+0x274>)
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d819      	bhi.n	8000edc <HAL_I2C_Init+0x13c>
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	1e59      	subs	r1, r3, #1
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eb6:	1c59      	adds	r1, r3, #1
 8000eb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ebc:	400b      	ands	r3, r1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00a      	beq.n	8000ed8 <HAL_I2C_Init+0x138>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	1e59      	subs	r1, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed6:	e051      	b.n	8000f7c <HAL_I2C_Init+0x1dc>
 8000ed8:	2304      	movs	r3, #4
 8000eda:	e04f      	b.n	8000f7c <HAL_I2C_Init+0x1dc>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d111      	bne.n	8000f08 <HAL_I2C_Init+0x168>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	1e58      	subs	r0, r3, #1
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6859      	ldr	r1, [r3, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	440b      	add	r3, r1
 8000ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf0c      	ite	eq
 8000f00:	2301      	moveq	r3, #1
 8000f02:	2300      	movne	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	e012      	b.n	8000f2e <HAL_I2C_Init+0x18e>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	1e58      	subs	r0, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6859      	ldr	r1, [r3, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	0099      	lsls	r1, r3, #2
 8000f18:	440b      	add	r3, r1
 8000f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bf0c      	ite	eq
 8000f28:	2301      	moveq	r3, #1
 8000f2a:	2300      	movne	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_I2C_Init+0x196>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e022      	b.n	8000f7c <HAL_I2C_Init+0x1dc>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10e      	bne.n	8000f5c <HAL_I2C_Init+0x1bc>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1e58      	subs	r0, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6859      	ldr	r1, [r3, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	440b      	add	r3, r1
 8000f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f50:	3301      	adds	r3, #1
 8000f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f5a:	e00f      	b.n	8000f7c <HAL_I2C_Init+0x1dc>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1e58      	subs	r0, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6859      	ldr	r1, [r3, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	0099      	lsls	r1, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	6809      	ldr	r1, [r1, #0]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69da      	ldr	r2, [r3, #28]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	6911      	ldr	r1, [r2, #16]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68d2      	ldr	r2, [r2, #12]
 8000fb6:	4311      	orrs	r1, r2
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695a      	ldr	r2, [r3, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	000186a0 	.word	0x000186a0
 8001018:	001e847f 	.word	0x001e847f
 800101c:	003d08ff 	.word	0x003d08ff
 8001020:	431bde83 	.word	0x431bde83
 8001024:	10624dd3 	.word	0x10624dd3

08001028 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103a:	2b80      	cmp	r3, #128	; 0x80
 800103c:	d103      	bne.n	8001046 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b20      	cmp	r3, #32
 8001068:	d158      	bne.n	800111c <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_I2C_Slave_Receive_IT+0x26>
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e051      	b.n	800111e <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_I2C_Slave_Receive_IT+0x38>
 8001084:	2302      	movs	r3, #2
 8001086:	e04a      	b.n	800111e <HAL_I2C_Slave_Receive_IT+0xce>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b01      	cmp	r3, #1
 800109c:	d007      	beq.n	80010ae <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f042 0201 	orr.w	r2, r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010bc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2222      	movs	r2, #34	; 0x22
 80010c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2220      	movs	r2, #32
 80010ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	88fa      	ldrh	r2, [r7, #6]
 80010de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_I2C_Slave_Receive_IT+0xd8>)
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010fe:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001116:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	e000      	b.n	800111e <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800111c:	2302      	movs	r3, #2
  }
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	ffff0000 	.word	0xffff0000

0800112c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800114c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001154:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b10      	cmp	r3, #16
 800115a:	d003      	beq.n	8001164 <HAL_I2C_EV_IRQHandler+0x38>
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b40      	cmp	r3, #64	; 0x40
 8001160:	f040 80c1 	bne.w	80012e6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10d      	bne.n	800119a <HAL_I2C_EV_IRQHandler+0x6e>
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001184:	d003      	beq.n	800118e <HAL_I2C_EV_IRQHandler+0x62>
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800118c:	d101      	bne.n	8001192 <HAL_I2C_EV_IRQHandler+0x66>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_I2C_EV_IRQHandler+0x68>
 8001192:	2300      	movs	r3, #0
 8001194:	2b01      	cmp	r3, #1
 8001196:	f000 8132 	beq.w	80013fe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00c      	beq.n	80011be <HAL_I2C_EV_IRQHandler+0x92>
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	0a5b      	lsrs	r3, r3, #9
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f001 fb5b 	bl	800286c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fccd 	bl	8001b56 <I2C_Master_SB>
 80011bc:	e092      	b.n	80012e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	08db      	lsrs	r3, r3, #3
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <HAL_I2C_EV_IRQHandler+0xb2>
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	0a5b      	lsrs	r3, r3, #9
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 fd42 	bl	8001c60 <I2C_Master_ADD10>
 80011dc:	e082      	b.n	80012e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	085b      	lsrs	r3, r3, #1
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d009      	beq.n	80011fe <HAL_I2C_EV_IRQHandler+0xd2>
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	0a5b      	lsrs	r3, r3, #9
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fd5b 	bl	8001cb2 <I2C_Master_ADDR>
 80011fc:	e072      	b.n	80012e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d03b      	beq.n	8001282 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001218:	f000 80f3 	beq.w	8001402 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	09db      	lsrs	r3, r3, #7
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00f      	beq.n	8001248 <HAL_I2C_EV_IRQHandler+0x11c>
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	0a9b      	lsrs	r3, r3, #10
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d009      	beq.n	8001248 <HAL_I2C_EV_IRQHandler+0x11c>
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d103      	bne.n	8001248 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f939 	bl	80014b8 <I2C_MasterTransmit_TXE>
 8001246:	e04d      	b.n	80012e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80d6 	beq.w	8001402 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	0a5b      	lsrs	r3, r3, #9
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80cf 	beq.w	8001402 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001264:	7bbb      	ldrb	r3, [r7, #14]
 8001266:	2b21      	cmp	r3, #33	; 0x21
 8001268:	d103      	bne.n	8001272 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f9c0 	bl	80015f0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001270:	e0c7      	b.n	8001402 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b40      	cmp	r3, #64	; 0x40
 8001276:	f040 80c4 	bne.w	8001402 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fa2e 	bl	80016dc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001280:	e0bf      	b.n	8001402 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800128c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001290:	f000 80b7 	beq.w	8001402 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	099b      	lsrs	r3, r3, #6
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00f      	beq.n	80012c0 <HAL_I2C_EV_IRQHandler+0x194>
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	0a9b      	lsrs	r3, r3, #10
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d009      	beq.n	80012c0 <HAL_I2C_EV_IRQHandler+0x194>
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d103      	bne.n	80012c0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 faa7 	bl	800180c <I2C_MasterReceive_RXNE>
 80012be:	e011      	b.n	80012e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 809a 	beq.w	8001402 <HAL_I2C_EV_IRQHandler+0x2d6>
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	0a5b      	lsrs	r3, r3, #9
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8093 	beq.w	8001402 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fb50 	bl	8001982 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012e2:	e08e      	b.n	8001402 <HAL_I2C_EV_IRQHandler+0x2d6>
 80012e4:	e08d      	b.n	8001402 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	e007      	b.n	8001308 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d012      	beq.n	800133a <HAL_I2C_EV_IRQHandler+0x20e>
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	0a5b      	lsrs	r3, r3, #9
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00c      	beq.n	800133a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001330:	69b9      	ldr	r1, [r7, #24]
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 ff14 	bl	8002160 <I2C_Slave_ADDR>
 8001338:	e066      	b.n	8001408 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_I2C_EV_IRQHandler+0x22e>
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	0a5b      	lsrs	r3, r3, #9
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 ff4e 	bl	80021f4 <I2C_Slave_STOPF>
 8001358:	e056      	b.n	8001408 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	2b21      	cmp	r3, #33	; 0x21
 800135e:	d002      	beq.n	8001366 <HAL_I2C_EV_IRQHandler+0x23a>
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	2b29      	cmp	r3, #41	; 0x29
 8001364:	d125      	bne.n	80013b2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	09db      	lsrs	r3, r3, #7
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00f      	beq.n	8001392 <HAL_I2C_EV_IRQHandler+0x266>
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	0a9b      	lsrs	r3, r3, #10
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <HAL_I2C_EV_IRQHandler+0x266>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fe2c 	bl	8001fe8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001390:	e039      	b.n	8001406 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d033      	beq.n	8001406 <HAL_I2C_EV_IRQHandler+0x2da>
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	0a5b      	lsrs	r3, r3, #9
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d02d      	beq.n	8001406 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fe59 	bl	8002062 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013b0:	e029      	b.n	8001406 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	099b      	lsrs	r3, r3, #6
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00f      	beq.n	80013de <HAL_I2C_EV_IRQHandler+0x2b2>
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	0a9b      	lsrs	r3, r3, #10
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d009      	beq.n	80013de <HAL_I2C_EV_IRQHandler+0x2b2>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d103      	bne.n	80013de <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fe63 	bl	80020a2 <I2C_SlaveReceive_RXNE>
 80013dc:	e014      	b.n	8001408 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00e      	beq.n	8001408 <HAL_I2C_EV_IRQHandler+0x2dc>
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	0a5b      	lsrs	r3, r3, #9
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fe91 	bl	800211e <I2C_SlaveReceive_BTF>
 80013fc:	e004      	b.n	8001408 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80013fe:	bf00      	nop
 8001400:	e002      	b.n	8001408 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001402:	bf00      	nop
 8001404:	e000      	b.n	8001408 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001406:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
 8001450:	4613      	mov	r3, r2
 8001452:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d150      	bne.n	8001580 <I2C_MasterTransmit_TXE+0xc8>
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	2b21      	cmp	r3, #33	; 0x21
 80014e2:	d14d      	bne.n	8001580 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d01d      	beq.n	8001526 <I2C_MasterTransmit_TXE+0x6e>
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b20      	cmp	r3, #32
 80014ee:	d01a      	beq.n	8001526 <I2C_MasterTransmit_TXE+0x6e>
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014f6:	d016      	beq.n	8001526 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001506:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2211      	movs	r2, #17
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2220      	movs	r2, #32
 800151a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff75 	bl	800140e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001524:	e060      	b.n	80015e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001534:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001544:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2220      	movs	r2, #32
 8001550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b40      	cmp	r3, #64	; 0x40
 800155e:	d107      	bne.n	8001570 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff81 	bl	8001470 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800156e:	e03b      	b.n	80015e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff48 	bl	800140e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800157e:	e033      	b.n	80015e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b21      	cmp	r3, #33	; 0x21
 8001584:	d005      	beq.n	8001592 <I2C_MasterTransmit_TXE+0xda>
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	2b40      	cmp	r3, #64	; 0x40
 800158a:	d12d      	bne.n	80015e8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b22      	cmp	r3, #34	; 0x22
 8001590:	d12a      	bne.n	80015e8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001596:	b29b      	uxth	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d108      	bne.n	80015ae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015aa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80015ac:	e01c      	b.n	80015e8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b40      	cmp	r3, #64	; 0x40
 80015b8:	d103      	bne.n	80015c2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f88e 	bl	80016dc <I2C_MemoryTransmit_TXE_BTF>
}
 80015c0:	e012      	b.n	80015e8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015dc:	b29b      	uxth	r3, r3
 80015de:	3b01      	subs	r3, #1
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80015e6:	e7ff      	b.n	80015e8 <I2C_MasterTransmit_TXE+0x130>
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b21      	cmp	r3, #33	; 0x21
 8001608:	d164      	bne.n	80016d4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160e:	b29b      	uxth	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d012      	beq.n	800163a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162e:	b29b      	uxth	r3, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	b29a      	uxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001638:	e04c      	b.n	80016d4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b08      	cmp	r3, #8
 800163e:	d01d      	beq.n	800167c <I2C_MasterTransmit_BTF+0x8c>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b20      	cmp	r3, #32
 8001644:	d01a      	beq.n	800167c <I2C_MasterTransmit_BTF+0x8c>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800164c:	d016      	beq.n	800167c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800165c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2211      	movs	r2, #17
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff feca 	bl	800140e <HAL_I2C_MasterTxCpltCallback>
}
 800167a:	e02b      	b.n	80016d4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800168a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2220      	movs	r2, #32
 80016a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b40      	cmp	r3, #64	; 0x40
 80016b4:	d107      	bne.n	80016c6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fed6 	bl	8001470 <HAL_I2C_MemTxCpltCallback>
}
 80016c4:	e006      	b.n	80016d4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fe9d 	bl	800140e <HAL_I2C_MasterTxCpltCallback>
}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d11d      	bne.n	8001730 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d10b      	bne.n	8001714 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001700:	b2da      	uxtb	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800170c:	1c9a      	adds	r2, r3, #2
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001712:	e077      	b.n	8001804 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001718:	b29b      	uxth	r3, r3
 800171a:	121b      	asrs	r3, r3, #8
 800171c:	b2da      	uxtb	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800172e:	e069      	b.n	8001804 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001734:	2b01      	cmp	r3, #1
 8001736:	d10b      	bne.n	8001750 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173c:	b2da      	uxtb	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800174e:	e059      	b.n	8001804 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001754:	2b02      	cmp	r3, #2
 8001756:	d152      	bne.n	80017fe <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b22      	cmp	r3, #34	; 0x22
 800175c:	d10d      	bne.n	800177a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800176c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001778:	e044      	b.n	8001804 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d015      	beq.n	80017b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b21      	cmp	r3, #33	; 0x21
 8001788:	d112      	bne.n	80017b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80017ae:	e029      	b.n	8001804 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d124      	bne.n	8001804 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	2b21      	cmp	r3, #33	; 0x21
 80017be:	d121      	bne.n	8001804 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017ce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2220      	movs	r2, #32
 80017ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fe3a 	bl	8001470 <HAL_I2C_MemTxCpltCallback>
}
 80017fc:	e002      	b.n	8001804 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fc12 	bl	8001028 <I2C_Flush_DR>
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b22      	cmp	r3, #34	; 0x22
 800181e:	f040 80ac 	bne.w	800197a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001826:	b29b      	uxth	r3, r3
 8001828:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d921      	bls.n	8001874 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	2b03      	cmp	r3, #3
 800185e:	f040 808c 	bne.w	800197a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001870:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001872:	e082      	b.n	800197a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	2b02      	cmp	r3, #2
 800187a:	d075      	beq.n	8001968 <I2C_MasterReceive_RXNE+0x15c>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d002      	beq.n	8001888 <I2C_MasterReceive_RXNE+0x7c>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d16f      	bne.n	8001968 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 ffbd 	bl	8002808 <I2C_WaitOnSTOPRequestThroughIT>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d142      	bne.n	800191a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2220      	movs	r2, #32
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b40      	cmp	r3, #64	; 0x40
 80018ec:	d10a      	bne.n	8001904 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fdc0 	bl	8001482 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001902:	e03a      	b.n	800197a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2212      	movs	r2, #18
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fd84 	bl	8001420 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001918:	e02f      	b.n	800197a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001928:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001946:	b29b      	uxth	r3, r3
 8001948:	3b01      	subs	r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2220      	movs	r2, #32
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff fd97 	bl	8001494 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001966:	e008      	b.n	800197a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001976:	605a      	str	r2, [r3, #4]
}
 8001978:	e7ff      	b.n	800197a <I2C_MasterReceive_RXNE+0x16e>
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001994:	b29b      	uxth	r3, r3
 8001996:	2b04      	cmp	r3, #4
 8001998:	d11b      	bne.n	80019d2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80019d0:	e0bd      	b.n	8001b4e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d129      	bne.n	8001a30 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d00a      	beq.n	8001a08 <I2C_MasterReceive_BTF+0x86>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d007      	beq.n	8001a08 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a06:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001a2e:	e08e      	b.n	8001b4e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d176      	bne.n	8001b28 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d002      	beq.n	8001a46 <I2C_MasterReceive_BTF+0xc4>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d108      	bne.n	8001a58 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	e019      	b.n	8001a8c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d002      	beq.n	8001a64 <I2C_MasterReceive_BTF+0xe2>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d108      	bne.n	8001a76 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e00a      	b.n	8001a8c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b10      	cmp	r3, #16
 8001a7a:	d007      	beq.n	8001a8c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ae6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b40      	cmp	r3, #64	; 0x40
 8001afa:	d10a      	bne.n	8001b12 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fcb9 	bl	8001482 <HAL_I2C_MemRxCpltCallback>
}
 8001b10:	e01d      	b.n	8001b4e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2212      	movs	r2, #18
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fc7d 	bl	8001420 <HAL_I2C_MasterRxCpltCallback>
}
 8001b26:	e012      	b.n	8001b4e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b40      	cmp	r3, #64	; 0x40
 8001b68:	d117      	bne.n	8001b9a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b82:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001b84:	e067      	b.n	8001c56 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	611a      	str	r2, [r3, #16]
}
 8001b98:	e05d      	b.n	8001c56 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ba2:	d133      	bne.n	8001c0c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b21      	cmp	r3, #33	; 0x21
 8001bae:	d109      	bne.n	8001bc4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	e008      	b.n	8001bd6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <I2C_Master_SB+0x92>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d108      	bne.n	8001bfa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d032      	beq.n	8001c56 <I2C_Master_SB+0x100>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d02d      	beq.n	8001c56 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c08:	605a      	str	r2, [r3, #4]
}
 8001c0a:	e024      	b.n	8001c56 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10e      	bne.n	8001c32 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	11db      	asrs	r3, r3, #7
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f003 0306 	and.w	r3, r3, #6
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f063 030f 	orn	r3, r3, #15
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	611a      	str	r2, [r3, #16]
}
 8001c30:	e011      	b.n	8001c56 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10d      	bne.n	8001c56 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	11db      	asrs	r3, r3, #7
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f003 0306 	and.w	r3, r3, #6
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f063 030e 	orn	r3, r3, #14
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	611a      	str	r2, [r3, #16]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <I2C_Master_ADD10+0x26>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d108      	bne.n	8001c98 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00c      	beq.n	8001ca8 <I2C_Master_ADD10+0x48>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d007      	beq.n	8001ca8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ca6:	605a      	str	r2, [r3, #4]
  }
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b091      	sub	sp, #68	; 0x44
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b22      	cmp	r3, #34	; 0x22
 8001cda:	f040 8174 	bne.w	8001fc6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10f      	bne.n	8001d06 <I2C_Master_ADDR+0x54>
 8001ce6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	d10b      	bne.n	8001d06 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
 8001d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d04:	e16b      	b.n	8001fde <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11d      	bne.n	8001d4a <I2C_Master_ADDR+0x98>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d16:	d118      	bne.n	8001d4a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d3c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	651a      	str	r2, [r3, #80]	; 0x50
 8001d48:	e149      	b.n	8001fde <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d113      	bne.n	8001d7c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d68:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e120      	b.n	8001fbe <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	f040 808a 	bne.w	8001e9c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d8e:	d137      	bne.n	8001e00 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d9e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dae:	d113      	bne.n	8001dd8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dbe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	e0f2      	b.n	8001fbe <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	623b      	str	r3, [r7, #32]
 8001dec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e0de      	b.n	8001fbe <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d02e      	beq.n	8001e64 <I2C_Master_ADDR+0x1b2>
 8001e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d02b      	beq.n	8001e64 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d102      	bne.n	8001e18 <I2C_Master_ADDR+0x166>
 8001e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d125      	bne.n	8001e64 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d00e      	beq.n	8001e3c <I2C_Master_ADDR+0x18a>
 8001e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d00b      	beq.n	8001e3c <I2C_Master_ADDR+0x18a>
 8001e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d008      	beq.n	8001e3c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e007      	b.n	8001e4c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e4a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	e0ac      	b.n	8001fbe <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e72:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e090      	b.n	8001fbe <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d158      	bne.n	8001f58 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d021      	beq.n	8001ef0 <I2C_Master_ADDR+0x23e>
 8001eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d01e      	beq.n	8001ef0 <I2C_Master_ADDR+0x23e>
 8001eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d01b      	beq.n	8001ef0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ec6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e012      	b.n	8001f16 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001efe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f24:	d14b      	bne.n	8001fbe <I2C_Master_ADDR+0x30c>
 8001f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f2c:	d00b      	beq.n	8001f46 <I2C_Master_ADDR+0x294>
 8001f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d008      	beq.n	8001f46 <I2C_Master_ADDR+0x294>
 8001f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d005      	beq.n	8001f46 <I2C_Master_ADDR+0x294>
 8001f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d002      	beq.n	8001f46 <I2C_Master_ADDR+0x294>
 8001f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d13b      	bne.n	8001fbe <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	e032      	b.n	8001fbe <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f66:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f76:	d117      	bne.n	8001fa8 <I2C_Master_ADDR+0x2f6>
 8001f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f7e:	d00b      	beq.n	8001f98 <I2C_Master_ADDR+0x2e6>
 8001f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d008      	beq.n	8001f98 <I2C_Master_ADDR+0x2e6>
 8001f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d005      	beq.n	8001f98 <I2C_Master_ADDR+0x2e6>
 8001f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d002      	beq.n	8001f98 <I2C_Master_ADDR+0x2e6>
 8001f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d107      	bne.n	8001fa8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fa6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8001fc4:	e00b      	b.n	8001fde <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
}
 8001fdc:	e7ff      	b.n	8001fde <I2C_Master_ADDR+0x32c>
 8001fde:	bf00      	nop
 8001fe0:	3744      	adds	r7, #68	; 0x44
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d02b      	beq.n	800205a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d114      	bne.n	800205a <I2C_SlaveTransmit_TXE+0x72>
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	2b29      	cmp	r3, #41	; 0x29
 8002034:	d111      	bne.n	800205a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002044:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2221      	movs	r2, #33	; 0x21
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2228      	movs	r2, #40	; 0x28
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff f9ec 	bl	8001432 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d011      	beq.n	8002098 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d02c      	beq.n	8002116 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d114      	bne.n	8002116 <I2C_SlaveReceive_RXNE+0x74>
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b2a      	cmp	r3, #42	; 0x2a
 80020f0:	d111      	bne.n	8002116 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002100:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2222      	movs	r2, #34	; 0x22
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2228      	movs	r2, #40	; 0x28
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7fe f837 	bl	8000184 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800217a:	2b28      	cmp	r3, #40	; 0x28
 800217c:	d127      	bne.n	80021ce <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	09db      	lsrs	r3, r3, #7
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d103      	bne.n	80021b2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	81bb      	strh	r3, [r7, #12]
 80021b0:	e002      	b.n	80021b8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80021c0:	89ba      	ldrh	r2, [r7, #12]
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	4619      	mov	r1, r3
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff f93c 	bl	8001444 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80021cc:	e00e      	b.n	80021ec <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002202:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002212:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002240:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800224c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002250:	d172      	bne.n	8002338 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	2b22      	cmp	r3, #34	; 0x22
 8002256:	d002      	beq.n	800225e <I2C_Slave_STOPF+0x6a>
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	2b2a      	cmp	r3, #42	; 0x2a
 800225c:	d135      	bne.n	80022ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	b29a      	uxth	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f043 0204 	orr.w	r2, r3, #4
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002290:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fbf0 	bl	8000a7c <HAL_DMA_GetState>
 800229c:	4603      	mov	r3, r0
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d049      	beq.n	8002336 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	4a69      	ldr	r2, [pc, #420]	; (800244c <I2C_Slave_STOPF+0x258>)
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fb6c 	bl	800098c <HAL_DMA_Abort_IT>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d03d      	beq.n	8002336 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022c4:	4610      	mov	r0, r2
 80022c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022c8:	e035      	b.n	8002336 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f043 0204 	orr.w	r2, r3, #4
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fbba 	bl	8000a7c <HAL_DMA_GetState>
 8002308:	4603      	mov	r3, r0
 800230a:	2b01      	cmp	r3, #1
 800230c:	d014      	beq.n	8002338 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002312:	4a4e      	ldr	r2, [pc, #312]	; (800244c <I2C_Slave_STOPF+0x258>)
 8002314:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fb36 	bl	800098c <HAL_DMA_Abort_IT>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002330:	4610      	mov	r0, r2
 8002332:	4798      	blx	r3
 8002334:	e000      	b.n	8002338 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002336:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d03e      	beq.n	80023c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d112      	bne.n	8002376 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002380:	2b40      	cmp	r3, #64	; 0x40
 8002382:	d112      	bne.n	80023aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f043 0204 	orr.w	r2, r3, #4
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f843 	bl	8002454 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80023ce:	e039      	b.n	8002444 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b2a      	cmp	r3, #42	; 0x2a
 80023d4:	d109      	bne.n	80023ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2228      	movs	r2, #40	; 0x28
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fd fecd 	bl	8000184 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b28      	cmp	r3, #40	; 0x28
 80023f4:	d111      	bne.n	800241a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a15      	ldr	r2, [pc, #84]	; (8002450 <I2C_Slave_STOPF+0x25c>)
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff f823 	bl	800145e <HAL_I2C_ListenCpltCallback>
}
 8002418:	e014      	b.n	8002444 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	2b22      	cmp	r3, #34	; 0x22
 8002420:	d002      	beq.n	8002428 <I2C_Slave_STOPF+0x234>
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	2b22      	cmp	r3, #34	; 0x22
 8002426:	d10d      	bne.n	8002444 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fd fea0 	bl	8000184 <HAL_I2C_SlaveRxCpltCallback>
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	080026b9 	.word	0x080026b9
 8002450:	ffff0000 	.word	0xffff0000

08002454 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002462:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800246a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800246c:	7bbb      	ldrb	r3, [r7, #14]
 800246e:	2b10      	cmp	r3, #16
 8002470:	d002      	beq.n	8002478 <I2C_ITError+0x24>
 8002472:	7bbb      	ldrb	r3, [r7, #14]
 8002474:	2b40      	cmp	r3, #64	; 0x40
 8002476:	d10a      	bne.n	800248e <I2C_ITError+0x3a>
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b22      	cmp	r3, #34	; 0x22
 800247c:	d107      	bne.n	800248e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002494:	2b28      	cmp	r3, #40	; 0x28
 8002496:	d107      	bne.n	80024a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2228      	movs	r2, #40	; 0x28
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024a6:	e015      	b.n	80024d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024b6:	d00a      	beq.n	80024ce <I2C_ITError+0x7a>
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b60      	cmp	r3, #96	; 0x60
 80024bc:	d007      	beq.n	80024ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024e2:	d162      	bne.n	80025aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d020      	beq.n	8002544 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002506:	4a6a      	ldr	r2, [pc, #424]	; (80026b0 <I2C_ITError+0x25c>)
 8002508:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fa3c 	bl	800098c <HAL_DMA_Abort_IT>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8089 	beq.w	800262e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800253e:	4610      	mov	r0, r2
 8002540:	4798      	blx	r3
 8002542:	e074      	b.n	800262e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	4a59      	ldr	r2, [pc, #356]	; (80026b0 <I2C_ITError+0x25c>)
 800254a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fa1b 	bl	800098c <HAL_DMA_Abort_IT>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d068      	beq.n	800262e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	d10b      	bne.n	8002582 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025a4:	4610      	mov	r0, r2
 80025a6:	4798      	blx	r3
 80025a8:	e041      	b.n	800262e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b60      	cmp	r3, #96	; 0x60
 80025b4:	d125      	bne.n	8002602 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d10b      	bne.n	80025ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe ff53 	bl	80014a6 <HAL_I2C_AbortCpltCallback>
 8002600:	e015      	b.n	800262e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d10b      	bne.n	8002628 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7fe ff33 	bl	8001494 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10e      	bne.n	800265c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002644:	2b00      	cmp	r3, #0
 8002646:	d109      	bne.n	800265c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800264e:	2b00      	cmp	r3, #0
 8002650:	d104      	bne.n	800265c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800266a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002672:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d113      	bne.n	80026a8 <I2C_ITError+0x254>
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b28      	cmp	r3, #40	; 0x28
 8002684:	d110      	bne.n	80026a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <I2C_ITError+0x260>)
 800268a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fe fedb 	bl	800145e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	080026b9 	.word	0x080026b9
 80026b4:	ffff0000 	.word	0xffff0000

080026b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026d2:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <I2C_DMAAbort+0x148>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	08db      	lsrs	r3, r3, #3
 80026d8:	4a4a      	ldr	r2, [pc, #296]	; (8002804 <I2C_DMAAbort+0x14c>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0a1a      	lsrs	r2, r3, #8
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	00da      	lsls	r2, r3, #3
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f043 0220 	orr.w	r2, r3, #32
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80026fe:	e00a      	b.n	8002716 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3b01      	subs	r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002714:	d0ea      	beq.n	80026ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002722:	2200      	movs	r2, #0
 8002724:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	2200      	movs	r2, #0
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002744:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002758:	2200      	movs	r2, #0
 800275a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	2200      	movs	r2, #0
 800276a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b60      	cmp	r3, #96	; 0x60
 8002786:	d10e      	bne.n	80027a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7fe fe81 	bl	80014a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80027a4:	e027      	b.n	80027f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027ac:	2b28      	cmp	r3, #40	; 0x28
 80027ae:	d117      	bne.n	80027e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2228      	movs	r2, #40	; 0x28
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027de:	e007      	b.n	80027f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80027f0:	6978      	ldr	r0, [r7, #20]
 80027f2:	f7fe fe4f 	bl	8001494 <HAL_I2C_ErrorCallback>
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000000 	.word	0x20000000
 8002804:	14f8b589 	.word	0x14f8b589

08002808 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	08db      	lsrs	r3, r3, #3
 800281a:	4a13      	ldr	r2, [pc, #76]	; (8002868 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	0a1a      	lsrs	r2, r3, #8
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3b01      	subs	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d107      	bne.n	8002846 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f043 0220 	orr.w	r2, r3, #32
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e008      	b.n	8002858 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002854:	d0e9      	beq.n	800282a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000000 	.word	0x20000000
 8002868:	14f8b589 	.word	0x14f8b589

0800286c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800287c:	d103      	bne.n	8002886 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002884:	e007      	b.n	8002896 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800288e:	d102      	bne.n	8002896 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2208      	movs	r2, #8
 8002894:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e272      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8087 	beq.w	80029ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c0:	4b92      	ldr	r3, [pc, #584]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d00c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028cc:	4b8f      	ldr	r3, [pc, #572]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d112      	bne.n	80028fe <HAL_RCC_OscConfig+0x5e>
 80028d8:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e4:	d10b      	bne.n	80028fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e6:	4b89      	ldr	r3, [pc, #548]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d06c      	beq.n	80029cc <HAL_RCC_OscConfig+0x12c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d168      	bne.n	80029cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e24c      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x76>
 8002908:	4b80      	ldr	r3, [pc, #512]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a7f      	ldr	r2, [pc, #508]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800290e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	e02e      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x98>
 800291e:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7a      	ldr	r2, [pc, #488]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a77      	ldr	r2, [pc, #476]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e01d      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0xbc>
 8002942:	4b72      	ldr	r3, [pc, #456]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a71      	ldr	r2, [pc, #452]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b6f      	ldr	r3, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6e      	ldr	r2, [pc, #440]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 800295c:	4b6b      	ldr	r3, [pc, #428]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6a      	ldr	r2, [pc, #424]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a67      	ldr	r2, [pc, #412]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800296e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002972:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fd feee 	bl	800075c <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7fd feea 	bl	800075c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e200      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0xe4>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fd feda 	bl	800075c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ac:	f7fd fed6 	bl	800075c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1ec      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	4b53      	ldr	r3, [pc, #332]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x10c>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d063      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029da:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029e6:	4b49      	ldr	r3, [pc, #292]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d11c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x18c>
 80029f2:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d116      	bne.n	8002a2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	4b43      	ldr	r3, [pc, #268]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_RCC_OscConfig+0x176>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e1c0      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4939      	ldr	r1, [pc, #228]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	e03a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fd fe8f 	bl	800075c <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a42:	f7fd fe8b 	bl	800075c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e1a1      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a60:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4927      	ldr	r1, [pc, #156]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
 8002a74:	e015      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fd fe6e 	bl	800075c <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a84:	f7fd fe6a 	bl	800075c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e180      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d03a      	beq.n	8002b24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d019      	beq.n	8002aea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7fd fe4e 	bl	800075c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7fd fe4a 	bl	800075c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e160      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f000 face 	bl	8003084 <RCC_Delay>
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7fd fe34 	bl	800075c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af6:	e00f      	b.n	8002b18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af8:	f7fd fe30 	bl	800075c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d908      	bls.n	8002b18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e146      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	42420000 	.word	0x42420000
 8002b14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	4b92      	ldr	r3, [pc, #584]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e9      	bne.n	8002af8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80a6 	beq.w	8002c7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b36:	4b8b      	ldr	r3, [pc, #556]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10d      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4b88      	ldr	r3, [pc, #544]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4a87      	ldr	r2, [pc, #540]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	61d3      	str	r3, [r2, #28]
 8002b4e:	4b85      	ldr	r3, [pc, #532]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b82      	ldr	r3, [pc, #520]	; (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7e      	ldr	r2, [pc, #504]	; (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7fd fdf1 	bl	800075c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7e:	f7fd fded 	bl	800075c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b64      	cmp	r3, #100	; 0x64
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e103      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	4b75      	ldr	r3, [pc, #468]	; (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x312>
 8002ba4:	4b6f      	ldr	r3, [pc, #444]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4a6e      	ldr	r2, [pc, #440]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6213      	str	r3, [r2, #32]
 8002bb0:	e02d      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x334>
 8002bba:	4b6a      	ldr	r3, [pc, #424]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a69      	ldr	r2, [pc, #420]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	4b67      	ldr	r3, [pc, #412]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a66      	ldr	r2, [pc, #408]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6213      	str	r3, [r2, #32]
 8002bd2:	e01c      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d10c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x356>
 8002bdc:	4b61      	ldr	r3, [pc, #388]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a60      	ldr	r2, [pc, #384]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6213      	str	r3, [r2, #32]
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bf6:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a5a      	ldr	r2, [pc, #360]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6213      	str	r3, [r2, #32]
 8002c02:	4b58      	ldr	r3, [pc, #352]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4a57      	ldr	r2, [pc, #348]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d015      	beq.n	8002c42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7fd fda1 	bl	800075c <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fd fd9d 	bl	800075c <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0b1      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	4b4b      	ldr	r3, [pc, #300]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ee      	beq.n	8002c1e <HAL_RCC_OscConfig+0x37e>
 8002c40:	e014      	b.n	8002c6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7fd fd8b 	bl	800075c <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fd fd87 	bl	800075c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e09b      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c60:	4b40      	ldr	r3, [pc, #256]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ee      	bne.n	8002c4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c72:	4b3c      	ldr	r3, [pc, #240]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4a3b      	ldr	r2, [pc, #236]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8087 	beq.w	8002d96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c88:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 030c 	and.w	r3, r3, #12
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d061      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d146      	bne.n	8002d2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9c:	4b33      	ldr	r3, [pc, #204]	; (8002d6c <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fd fd5b 	bl	800075c <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002caa:	f7fd fd57 	bl	800075c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e06d      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd0:	d108      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cd2:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4921      	ldr	r1, [pc, #132]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a19      	ldr	r1, [r3, #32]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	491b      	ldr	r1, [pc, #108]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7fd fd2b 	bl	800075c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0a:	f7fd fd27 	bl	800075c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e03d      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x46a>
 8002d28:	e035      	b.n	8002d96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <HAL_RCC_OscConfig+0x4cc>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fd fd14 	bl	800075c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fd fd10 	bl	800075c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e026      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x498>
 8002d56:	e01e      	b.n	8002d96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e019      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCC_OscConfig+0x500>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0d0      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db8:	4b6a      	ldr	r3, [pc, #424]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d910      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b67      	ldr	r3, [pc, #412]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 0207 	bic.w	r2, r3, #7
 8002dce:	4965      	ldr	r1, [pc, #404]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b63      	ldr	r3, [pc, #396]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0b8      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e00:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4a58      	ldr	r2, [pc, #352]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e18:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e24:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	494d      	ldr	r1, [pc, #308]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d040      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d115      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e62:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e073      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e06b      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e82:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f023 0203 	bic.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4936      	ldr	r1, [pc, #216]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e94:	f7fd fc62 	bl	800075c <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9c:	f7fd fc5e 	bl	800075c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e053      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb2:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 020c 	and.w	r2, r3, #12
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d1eb      	bne.n	8002e9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d210      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0207 	bic.w	r2, r3, #7
 8002eda:	4922      	ldr	r1, [pc, #136]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e032      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4916      	ldr	r1, [pc, #88]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f1e:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	490e      	ldr	r1, [pc, #56]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f32:	f000 f821 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	490a      	ldr	r1, [pc, #40]	; (8002f6c <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	5ccb      	ldrb	r3, [r1, r3]
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1cc>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_ClockConfig+0x1d0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fbc0 	bl	80006d8 <HAL_InitTick>

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	0800440c 	.word	0x0800440c
 8002f70:	20000000 	.word	0x20000000
 8002f74:	20000004 	.word	0x20000004

08002f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d002      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x30>
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x36>
 8002fa6:	e027      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_RCC_GetSysClockFreq+0x98>)
 8002faa:	613b      	str	r3, [r7, #16]
      break;
 8002fac:	e027      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	0c9b      	lsrs	r3, r3, #18
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	4a17      	ldr	r2, [pc, #92]	; (8003014 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fb8:	5cd3      	ldrb	r3, [r2, r3]
 8002fba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d010      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fc6:	4b11      	ldr	r3, [pc, #68]	; (800300c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	0c5b      	lsrs	r3, r3, #17
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	4a11      	ldr	r2, [pc, #68]	; (8003018 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fda:	fb03 f202 	mul.w	r2, r3, r2
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e004      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a0c      	ldr	r2, [pc, #48]	; (800301c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	613b      	str	r3, [r7, #16]
      break;
 8002ff6:	e002      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ffa:	613b      	str	r3, [r7, #16]
      break;
 8002ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffe:	693b      	ldr	r3, [r7, #16]
}
 8003000:	4618      	mov	r0, r3
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	007a1200 	.word	0x007a1200
 8003014:	08004424 	.word	0x08004424
 8003018:	08004434 	.word	0x08004434
 800301c:	003d0900 	.word	0x003d0900

08003020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003024:	4b02      	ldr	r3, [pc, #8]	; (8003030 <HAL_RCC_GetHCLKFreq+0x10>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	20000000 	.word	0x20000000

08003034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003038:	f7ff fff2 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	4903      	ldr	r1, [pc, #12]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	0800441c 	.word	0x0800441c

0800305c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003060:	f7ff ffde 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	0adb      	lsrs	r3, r3, #11
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	4903      	ldr	r1, [pc, #12]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	0800441c 	.word	0x0800441c

08003084 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <RCC_Delay+0x34>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <RCC_Delay+0x38>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	0a5b      	lsrs	r3, r3, #9
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030a0:	bf00      	nop
  }
  while (Delay --);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1e5a      	subs	r2, r3, #1
 80030a6:	60fa      	str	r2, [r7, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f9      	bne.n	80030a0 <RCC_Delay+0x1c>
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	20000000 	.word	0x20000000
 80030bc:	10624dd3 	.word	0x10624dd3

080030c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e042      	b.n	8003158 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd f9b2 	bl	8000450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	; 0x24
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f91d 	bl	8003344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b20      	cmp	r3, #32
 800317e:	d16d      	bne.n	800325c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_UART_Transmit+0x2c>
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e066      	b.n	800325e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2221      	movs	r2, #33	; 0x21
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800319e:	f7fd fadd 	bl	800075c <HAL_GetTick>
 80031a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	88fa      	ldrh	r2, [r7, #6]
 80031a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	88fa      	ldrh	r2, [r7, #6]
 80031ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b8:	d108      	bne.n	80031cc <HAL_UART_Transmit+0x6c>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	e003      	b.n	80031d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031d4:	e02a      	b.n	800322c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2200      	movs	r2, #0
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f840 	bl	8003266 <UART_WaitOnFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e036      	b.n	800325e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10b      	bne.n	800320e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	3302      	adds	r3, #2
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e007      	b.n	800321e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1cf      	bne.n	80031d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	2140      	movs	r1, #64	; 0x40
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f810 	bl	8003266 <UART_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e006      	b.n	800325e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	e000      	b.n	800325e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800325c:	2302      	movs	r3, #2
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b090      	sub	sp, #64	; 0x40
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003276:	e050      	b.n	800331a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800327e:	d04c      	beq.n	800331a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <UART_WaitOnFlagUntilTimeout+0x30>
 8003286:	f7fd fa69 	bl	800075c <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003292:	429a      	cmp	r2, r3
 8003294:	d241      	bcs.n	800331a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	e853 3f00 	ldrex	r3, [r3]
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	330c      	adds	r3, #12
 80032b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032b6:	637a      	str	r2, [r7, #52]	; 0x34
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e5      	bne.n	8003296 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3314      	adds	r3, #20
 80032d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	613b      	str	r3, [r7, #16]
   return(result);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3314      	adds	r3, #20
 80032e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ea:	623a      	str	r2, [r7, #32]
 80032ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	69f9      	ldr	r1, [r7, #28]
 80032f0:	6a3a      	ldr	r2, [r7, #32]
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e5      	bne.n	80032ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e00f      	b.n	800333a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	429a      	cmp	r2, r3
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	429a      	cmp	r2, r3
 8003336:	d09f      	beq.n	8003278 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3740      	adds	r7, #64	; 0x40
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800337e:	f023 030c 	bic.w	r3, r3, #12
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	430b      	orrs	r3, r1
 800338a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2c      	ldr	r2, [pc, #176]	; (8003458 <UART_SetConfig+0x114>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d103      	bne.n	80033b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033ac:	f7ff fe56 	bl	800305c <HAL_RCC_GetPCLK2Freq>
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	e002      	b.n	80033ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033b4:	f7ff fe3e 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 80033b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009a      	lsls	r2, r3, #2
 80033c4:	441a      	add	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	4a22      	ldr	r2, [pc, #136]	; (800345c <UART_SetConfig+0x118>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	0119      	lsls	r1, r3, #4
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009a      	lsls	r2, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f0:	4b1a      	ldr	r3, [pc, #104]	; (800345c <UART_SetConfig+0x118>)
 80033f2:	fba3 0302 	umull	r0, r3, r3, r2
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2064      	movs	r0, #100	; 0x64
 80033fa:	fb00 f303 	mul.w	r3, r0, r3
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	3332      	adds	r3, #50	; 0x32
 8003404:	4a15      	ldr	r2, [pc, #84]	; (800345c <UART_SetConfig+0x118>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003410:	4419      	add	r1, r3
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009a      	lsls	r2, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fbb2 f2f3 	udiv	r2, r2, r3
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <UART_SetConfig+0x118>)
 800342a:	fba3 0302 	umull	r0, r3, r3, r2
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2064      	movs	r0, #100	; 0x64
 8003432:	fb00 f303 	mul.w	r3, r0, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	3332      	adds	r3, #50	; 0x32
 800343c:	4a07      	ldr	r2, [pc, #28]	; (800345c <UART_SetConfig+0x118>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	f003 020f 	and.w	r2, r3, #15
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	440a      	add	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40013800 	.word	0x40013800
 800345c:	51eb851f 	.word	0x51eb851f

08003460 <__errno>:
 8003460:	4b01      	ldr	r3, [pc, #4]	; (8003468 <__errno+0x8>)
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	2000000c 	.word	0x2000000c

0800346c <__libc_init_array>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	2600      	movs	r6, #0
 8003470:	4d0c      	ldr	r5, [pc, #48]	; (80034a4 <__libc_init_array+0x38>)
 8003472:	4c0d      	ldr	r4, [pc, #52]	; (80034a8 <__libc_init_array+0x3c>)
 8003474:	1b64      	subs	r4, r4, r5
 8003476:	10a4      	asrs	r4, r4, #2
 8003478:	42a6      	cmp	r6, r4
 800347a:	d109      	bne.n	8003490 <__libc_init_array+0x24>
 800347c:	f000 ffb6 	bl	80043ec <_init>
 8003480:	2600      	movs	r6, #0
 8003482:	4d0a      	ldr	r5, [pc, #40]	; (80034ac <__libc_init_array+0x40>)
 8003484:	4c0a      	ldr	r4, [pc, #40]	; (80034b0 <__libc_init_array+0x44>)
 8003486:	1b64      	subs	r4, r4, r5
 8003488:	10a4      	asrs	r4, r4, #2
 800348a:	42a6      	cmp	r6, r4
 800348c:	d105      	bne.n	800349a <__libc_init_array+0x2e>
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	f855 3b04 	ldr.w	r3, [r5], #4
 8003494:	4798      	blx	r3
 8003496:	3601      	adds	r6, #1
 8003498:	e7ee      	b.n	8003478 <__libc_init_array+0xc>
 800349a:	f855 3b04 	ldr.w	r3, [r5], #4
 800349e:	4798      	blx	r3
 80034a0:	3601      	adds	r6, #1
 80034a2:	e7f2      	b.n	800348a <__libc_init_array+0x1e>
 80034a4:	080044d0 	.word	0x080044d0
 80034a8:	080044d0 	.word	0x080044d0
 80034ac:	080044d0 	.word	0x080044d0
 80034b0:	080044d4 	.word	0x080044d4

080034b4 <memset>:
 80034b4:	4603      	mov	r3, r0
 80034b6:	4402      	add	r2, r0
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d100      	bne.n	80034be <memset+0xa>
 80034bc:	4770      	bx	lr
 80034be:	f803 1b01 	strb.w	r1, [r3], #1
 80034c2:	e7f9      	b.n	80034b8 <memset+0x4>

080034c4 <iprintf>:
 80034c4:	b40f      	push	{r0, r1, r2, r3}
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <iprintf+0x2c>)
 80034c8:	b513      	push	{r0, r1, r4, lr}
 80034ca:	681c      	ldr	r4, [r3, #0]
 80034cc:	b124      	cbz	r4, 80034d8 <iprintf+0x14>
 80034ce:	69a3      	ldr	r3, [r4, #24]
 80034d0:	b913      	cbnz	r3, 80034d8 <iprintf+0x14>
 80034d2:	4620      	mov	r0, r4
 80034d4:	f000 f866 	bl	80035a4 <__sinit>
 80034d8:	ab05      	add	r3, sp, #20
 80034da:	4620      	mov	r0, r4
 80034dc:	9a04      	ldr	r2, [sp, #16]
 80034de:	68a1      	ldr	r1, [r4, #8]
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	f000 f9bb 	bl	800385c <_vfiprintf_r>
 80034e6:	b002      	add	sp, #8
 80034e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ec:	b004      	add	sp, #16
 80034ee:	4770      	bx	lr
 80034f0:	2000000c 	.word	0x2000000c

080034f4 <std>:
 80034f4:	2300      	movs	r3, #0
 80034f6:	b510      	push	{r4, lr}
 80034f8:	4604      	mov	r4, r0
 80034fa:	e9c0 3300 	strd	r3, r3, [r0]
 80034fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003502:	6083      	str	r3, [r0, #8]
 8003504:	8181      	strh	r1, [r0, #12]
 8003506:	6643      	str	r3, [r0, #100]	; 0x64
 8003508:	81c2      	strh	r2, [r0, #14]
 800350a:	6183      	str	r3, [r0, #24]
 800350c:	4619      	mov	r1, r3
 800350e:	2208      	movs	r2, #8
 8003510:	305c      	adds	r0, #92	; 0x5c
 8003512:	f7ff ffcf 	bl	80034b4 <memset>
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <std+0x38>)
 8003518:	6224      	str	r4, [r4, #32]
 800351a:	6263      	str	r3, [r4, #36]	; 0x24
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <std+0x3c>)
 800351e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <std+0x40>)
 8003522:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <std+0x44>)
 8003526:	6323      	str	r3, [r4, #48]	; 0x30
 8003528:	bd10      	pop	{r4, pc}
 800352a:	bf00      	nop
 800352c:	08003e09 	.word	0x08003e09
 8003530:	08003e2b 	.word	0x08003e2b
 8003534:	08003e63 	.word	0x08003e63
 8003538:	08003e87 	.word	0x08003e87

0800353c <_cleanup_r>:
 800353c:	4901      	ldr	r1, [pc, #4]	; (8003544 <_cleanup_r+0x8>)
 800353e:	f000 b8af 	b.w	80036a0 <_fwalk_reent>
 8003542:	bf00      	nop
 8003544:	08004159 	.word	0x08004159

08003548 <__sfmoreglue>:
 8003548:	2268      	movs	r2, #104	; 0x68
 800354a:	b570      	push	{r4, r5, r6, lr}
 800354c:	1e4d      	subs	r5, r1, #1
 800354e:	4355      	muls	r5, r2
 8003550:	460e      	mov	r6, r1
 8003552:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003556:	f000 f8e5 	bl	8003724 <_malloc_r>
 800355a:	4604      	mov	r4, r0
 800355c:	b140      	cbz	r0, 8003570 <__sfmoreglue+0x28>
 800355e:	2100      	movs	r1, #0
 8003560:	e9c0 1600 	strd	r1, r6, [r0]
 8003564:	300c      	adds	r0, #12
 8003566:	60a0      	str	r0, [r4, #8]
 8003568:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800356c:	f7ff ffa2 	bl	80034b4 <memset>
 8003570:	4620      	mov	r0, r4
 8003572:	bd70      	pop	{r4, r5, r6, pc}

08003574 <__sfp_lock_acquire>:
 8003574:	4801      	ldr	r0, [pc, #4]	; (800357c <__sfp_lock_acquire+0x8>)
 8003576:	f000 b8b3 	b.w	80036e0 <__retarget_lock_acquire_recursive>
 800357a:	bf00      	nop
 800357c:	2000013d 	.word	0x2000013d

08003580 <__sfp_lock_release>:
 8003580:	4801      	ldr	r0, [pc, #4]	; (8003588 <__sfp_lock_release+0x8>)
 8003582:	f000 b8ae 	b.w	80036e2 <__retarget_lock_release_recursive>
 8003586:	bf00      	nop
 8003588:	2000013d 	.word	0x2000013d

0800358c <__sinit_lock_acquire>:
 800358c:	4801      	ldr	r0, [pc, #4]	; (8003594 <__sinit_lock_acquire+0x8>)
 800358e:	f000 b8a7 	b.w	80036e0 <__retarget_lock_acquire_recursive>
 8003592:	bf00      	nop
 8003594:	2000013e 	.word	0x2000013e

08003598 <__sinit_lock_release>:
 8003598:	4801      	ldr	r0, [pc, #4]	; (80035a0 <__sinit_lock_release+0x8>)
 800359a:	f000 b8a2 	b.w	80036e2 <__retarget_lock_release_recursive>
 800359e:	bf00      	nop
 80035a0:	2000013e 	.word	0x2000013e

080035a4 <__sinit>:
 80035a4:	b510      	push	{r4, lr}
 80035a6:	4604      	mov	r4, r0
 80035a8:	f7ff fff0 	bl	800358c <__sinit_lock_acquire>
 80035ac:	69a3      	ldr	r3, [r4, #24]
 80035ae:	b11b      	cbz	r3, 80035b8 <__sinit+0x14>
 80035b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035b4:	f7ff bff0 	b.w	8003598 <__sinit_lock_release>
 80035b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035bc:	6523      	str	r3, [r4, #80]	; 0x50
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <__sinit+0x68>)
 80035c0:	4a13      	ldr	r2, [pc, #76]	; (8003610 <__sinit+0x6c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80035c6:	42a3      	cmp	r3, r4
 80035c8:	bf08      	it	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	4620      	mov	r0, r4
 80035ce:	bf08      	it	eq
 80035d0:	61a3      	streq	r3, [r4, #24]
 80035d2:	f000 f81f 	bl	8003614 <__sfp>
 80035d6:	6060      	str	r0, [r4, #4]
 80035d8:	4620      	mov	r0, r4
 80035da:	f000 f81b 	bl	8003614 <__sfp>
 80035de:	60a0      	str	r0, [r4, #8]
 80035e0:	4620      	mov	r0, r4
 80035e2:	f000 f817 	bl	8003614 <__sfp>
 80035e6:	2200      	movs	r2, #0
 80035e8:	2104      	movs	r1, #4
 80035ea:	60e0      	str	r0, [r4, #12]
 80035ec:	6860      	ldr	r0, [r4, #4]
 80035ee:	f7ff ff81 	bl	80034f4 <std>
 80035f2:	2201      	movs	r2, #1
 80035f4:	2109      	movs	r1, #9
 80035f6:	68a0      	ldr	r0, [r4, #8]
 80035f8:	f7ff ff7c 	bl	80034f4 <std>
 80035fc:	2202      	movs	r2, #2
 80035fe:	2112      	movs	r1, #18
 8003600:	68e0      	ldr	r0, [r4, #12]
 8003602:	f7ff ff77 	bl	80034f4 <std>
 8003606:	2301      	movs	r3, #1
 8003608:	61a3      	str	r3, [r4, #24]
 800360a:	e7d1      	b.n	80035b0 <__sinit+0xc>
 800360c:	08004438 	.word	0x08004438
 8003610:	0800353d 	.word	0x0800353d

08003614 <__sfp>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	4607      	mov	r7, r0
 8003618:	f7ff ffac 	bl	8003574 <__sfp_lock_acquire>
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <__sfp+0x84>)
 800361e:	681e      	ldr	r6, [r3, #0]
 8003620:	69b3      	ldr	r3, [r6, #24]
 8003622:	b913      	cbnz	r3, 800362a <__sfp+0x16>
 8003624:	4630      	mov	r0, r6
 8003626:	f7ff ffbd 	bl	80035a4 <__sinit>
 800362a:	3648      	adds	r6, #72	; 0x48
 800362c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003630:	3b01      	subs	r3, #1
 8003632:	d503      	bpl.n	800363c <__sfp+0x28>
 8003634:	6833      	ldr	r3, [r6, #0]
 8003636:	b30b      	cbz	r3, 800367c <__sfp+0x68>
 8003638:	6836      	ldr	r6, [r6, #0]
 800363a:	e7f7      	b.n	800362c <__sfp+0x18>
 800363c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003640:	b9d5      	cbnz	r5, 8003678 <__sfp+0x64>
 8003642:	4b16      	ldr	r3, [pc, #88]	; (800369c <__sfp+0x88>)
 8003644:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003648:	60e3      	str	r3, [r4, #12]
 800364a:	6665      	str	r5, [r4, #100]	; 0x64
 800364c:	f000 f847 	bl	80036de <__retarget_lock_init_recursive>
 8003650:	f7ff ff96 	bl	8003580 <__sfp_lock_release>
 8003654:	2208      	movs	r2, #8
 8003656:	4629      	mov	r1, r5
 8003658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800365c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003660:	6025      	str	r5, [r4, #0]
 8003662:	61a5      	str	r5, [r4, #24]
 8003664:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003668:	f7ff ff24 	bl	80034b4 <memset>
 800366c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003670:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003674:	4620      	mov	r0, r4
 8003676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003678:	3468      	adds	r4, #104	; 0x68
 800367a:	e7d9      	b.n	8003630 <__sfp+0x1c>
 800367c:	2104      	movs	r1, #4
 800367e:	4638      	mov	r0, r7
 8003680:	f7ff ff62 	bl	8003548 <__sfmoreglue>
 8003684:	4604      	mov	r4, r0
 8003686:	6030      	str	r0, [r6, #0]
 8003688:	2800      	cmp	r0, #0
 800368a:	d1d5      	bne.n	8003638 <__sfp+0x24>
 800368c:	f7ff ff78 	bl	8003580 <__sfp_lock_release>
 8003690:	230c      	movs	r3, #12
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	e7ee      	b.n	8003674 <__sfp+0x60>
 8003696:	bf00      	nop
 8003698:	08004438 	.word	0x08004438
 800369c:	ffff0001 	.word	0xffff0001

080036a0 <_fwalk_reent>:
 80036a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036a4:	4606      	mov	r6, r0
 80036a6:	4688      	mov	r8, r1
 80036a8:	2700      	movs	r7, #0
 80036aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036b2:	f1b9 0901 	subs.w	r9, r9, #1
 80036b6:	d505      	bpl.n	80036c4 <_fwalk_reent+0x24>
 80036b8:	6824      	ldr	r4, [r4, #0]
 80036ba:	2c00      	cmp	r4, #0
 80036bc:	d1f7      	bne.n	80036ae <_fwalk_reent+0xe>
 80036be:	4638      	mov	r0, r7
 80036c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036c4:	89ab      	ldrh	r3, [r5, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d907      	bls.n	80036da <_fwalk_reent+0x3a>
 80036ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036ce:	3301      	adds	r3, #1
 80036d0:	d003      	beq.n	80036da <_fwalk_reent+0x3a>
 80036d2:	4629      	mov	r1, r5
 80036d4:	4630      	mov	r0, r6
 80036d6:	47c0      	blx	r8
 80036d8:	4307      	orrs	r7, r0
 80036da:	3568      	adds	r5, #104	; 0x68
 80036dc:	e7e9      	b.n	80036b2 <_fwalk_reent+0x12>

080036de <__retarget_lock_init_recursive>:
 80036de:	4770      	bx	lr

080036e0 <__retarget_lock_acquire_recursive>:
 80036e0:	4770      	bx	lr

080036e2 <__retarget_lock_release_recursive>:
 80036e2:	4770      	bx	lr

080036e4 <sbrk_aligned>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4e0e      	ldr	r6, [pc, #56]	; (8003720 <sbrk_aligned+0x3c>)
 80036e8:	460c      	mov	r4, r1
 80036ea:	6831      	ldr	r1, [r6, #0]
 80036ec:	4605      	mov	r5, r0
 80036ee:	b911      	cbnz	r1, 80036f6 <sbrk_aligned+0x12>
 80036f0:	f000 fb7a 	bl	8003de8 <_sbrk_r>
 80036f4:	6030      	str	r0, [r6, #0]
 80036f6:	4621      	mov	r1, r4
 80036f8:	4628      	mov	r0, r5
 80036fa:	f000 fb75 	bl	8003de8 <_sbrk_r>
 80036fe:	1c43      	adds	r3, r0, #1
 8003700:	d00a      	beq.n	8003718 <sbrk_aligned+0x34>
 8003702:	1cc4      	adds	r4, r0, #3
 8003704:	f024 0403 	bic.w	r4, r4, #3
 8003708:	42a0      	cmp	r0, r4
 800370a:	d007      	beq.n	800371c <sbrk_aligned+0x38>
 800370c:	1a21      	subs	r1, r4, r0
 800370e:	4628      	mov	r0, r5
 8003710:	f000 fb6a 	bl	8003de8 <_sbrk_r>
 8003714:	3001      	adds	r0, #1
 8003716:	d101      	bne.n	800371c <sbrk_aligned+0x38>
 8003718:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800371c:	4620      	mov	r0, r4
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	20000144 	.word	0x20000144

08003724 <_malloc_r>:
 8003724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003728:	1ccd      	adds	r5, r1, #3
 800372a:	f025 0503 	bic.w	r5, r5, #3
 800372e:	3508      	adds	r5, #8
 8003730:	2d0c      	cmp	r5, #12
 8003732:	bf38      	it	cc
 8003734:	250c      	movcc	r5, #12
 8003736:	2d00      	cmp	r5, #0
 8003738:	4607      	mov	r7, r0
 800373a:	db01      	blt.n	8003740 <_malloc_r+0x1c>
 800373c:	42a9      	cmp	r1, r5
 800373e:	d905      	bls.n	800374c <_malloc_r+0x28>
 8003740:	230c      	movs	r3, #12
 8003742:	2600      	movs	r6, #0
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4630      	mov	r0, r6
 8003748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800374c:	4e2e      	ldr	r6, [pc, #184]	; (8003808 <_malloc_r+0xe4>)
 800374e:	f000 fdc5 	bl	80042dc <__malloc_lock>
 8003752:	6833      	ldr	r3, [r6, #0]
 8003754:	461c      	mov	r4, r3
 8003756:	bb34      	cbnz	r4, 80037a6 <_malloc_r+0x82>
 8003758:	4629      	mov	r1, r5
 800375a:	4638      	mov	r0, r7
 800375c:	f7ff ffc2 	bl	80036e4 <sbrk_aligned>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	4604      	mov	r4, r0
 8003764:	d14d      	bne.n	8003802 <_malloc_r+0xde>
 8003766:	6834      	ldr	r4, [r6, #0]
 8003768:	4626      	mov	r6, r4
 800376a:	2e00      	cmp	r6, #0
 800376c:	d140      	bne.n	80037f0 <_malloc_r+0xcc>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	4631      	mov	r1, r6
 8003772:	4638      	mov	r0, r7
 8003774:	eb04 0803 	add.w	r8, r4, r3
 8003778:	f000 fb36 	bl	8003de8 <_sbrk_r>
 800377c:	4580      	cmp	r8, r0
 800377e:	d13a      	bne.n	80037f6 <_malloc_r+0xd2>
 8003780:	6821      	ldr	r1, [r4, #0]
 8003782:	3503      	adds	r5, #3
 8003784:	1a6d      	subs	r5, r5, r1
 8003786:	f025 0503 	bic.w	r5, r5, #3
 800378a:	3508      	adds	r5, #8
 800378c:	2d0c      	cmp	r5, #12
 800378e:	bf38      	it	cc
 8003790:	250c      	movcc	r5, #12
 8003792:	4638      	mov	r0, r7
 8003794:	4629      	mov	r1, r5
 8003796:	f7ff ffa5 	bl	80036e4 <sbrk_aligned>
 800379a:	3001      	adds	r0, #1
 800379c:	d02b      	beq.n	80037f6 <_malloc_r+0xd2>
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	442b      	add	r3, r5
 80037a2:	6023      	str	r3, [r4, #0]
 80037a4:	e00e      	b.n	80037c4 <_malloc_r+0xa0>
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	1b52      	subs	r2, r2, r5
 80037aa:	d41e      	bmi.n	80037ea <_malloc_r+0xc6>
 80037ac:	2a0b      	cmp	r2, #11
 80037ae:	d916      	bls.n	80037de <_malloc_r+0xba>
 80037b0:	1961      	adds	r1, r4, r5
 80037b2:	42a3      	cmp	r3, r4
 80037b4:	6025      	str	r5, [r4, #0]
 80037b6:	bf18      	it	ne
 80037b8:	6059      	strne	r1, [r3, #4]
 80037ba:	6863      	ldr	r3, [r4, #4]
 80037bc:	bf08      	it	eq
 80037be:	6031      	streq	r1, [r6, #0]
 80037c0:	5162      	str	r2, [r4, r5]
 80037c2:	604b      	str	r3, [r1, #4]
 80037c4:	4638      	mov	r0, r7
 80037c6:	f104 060b 	add.w	r6, r4, #11
 80037ca:	f000 fd8d 	bl	80042e8 <__malloc_unlock>
 80037ce:	f026 0607 	bic.w	r6, r6, #7
 80037d2:	1d23      	adds	r3, r4, #4
 80037d4:	1af2      	subs	r2, r6, r3
 80037d6:	d0b6      	beq.n	8003746 <_malloc_r+0x22>
 80037d8:	1b9b      	subs	r3, r3, r6
 80037da:	50a3      	str	r3, [r4, r2]
 80037dc:	e7b3      	b.n	8003746 <_malloc_r+0x22>
 80037de:	6862      	ldr	r2, [r4, #4]
 80037e0:	42a3      	cmp	r3, r4
 80037e2:	bf0c      	ite	eq
 80037e4:	6032      	streq	r2, [r6, #0]
 80037e6:	605a      	strne	r2, [r3, #4]
 80037e8:	e7ec      	b.n	80037c4 <_malloc_r+0xa0>
 80037ea:	4623      	mov	r3, r4
 80037ec:	6864      	ldr	r4, [r4, #4]
 80037ee:	e7b2      	b.n	8003756 <_malloc_r+0x32>
 80037f0:	4634      	mov	r4, r6
 80037f2:	6876      	ldr	r6, [r6, #4]
 80037f4:	e7b9      	b.n	800376a <_malloc_r+0x46>
 80037f6:	230c      	movs	r3, #12
 80037f8:	4638      	mov	r0, r7
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	f000 fd74 	bl	80042e8 <__malloc_unlock>
 8003800:	e7a1      	b.n	8003746 <_malloc_r+0x22>
 8003802:	6025      	str	r5, [r4, #0]
 8003804:	e7de      	b.n	80037c4 <_malloc_r+0xa0>
 8003806:	bf00      	nop
 8003808:	20000140 	.word	0x20000140

0800380c <__sfputc_r>:
 800380c:	6893      	ldr	r3, [r2, #8]
 800380e:	b410      	push	{r4}
 8003810:	3b01      	subs	r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	6093      	str	r3, [r2, #8]
 8003816:	da07      	bge.n	8003828 <__sfputc_r+0x1c>
 8003818:	6994      	ldr	r4, [r2, #24]
 800381a:	42a3      	cmp	r3, r4
 800381c:	db01      	blt.n	8003822 <__sfputc_r+0x16>
 800381e:	290a      	cmp	r1, #10
 8003820:	d102      	bne.n	8003828 <__sfputc_r+0x1c>
 8003822:	bc10      	pop	{r4}
 8003824:	f000 bb34 	b.w	8003e90 <__swbuf_r>
 8003828:	6813      	ldr	r3, [r2, #0]
 800382a:	1c58      	adds	r0, r3, #1
 800382c:	6010      	str	r0, [r2, #0]
 800382e:	7019      	strb	r1, [r3, #0]
 8003830:	4608      	mov	r0, r1
 8003832:	bc10      	pop	{r4}
 8003834:	4770      	bx	lr

08003836 <__sfputs_r>:
 8003836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003838:	4606      	mov	r6, r0
 800383a:	460f      	mov	r7, r1
 800383c:	4614      	mov	r4, r2
 800383e:	18d5      	adds	r5, r2, r3
 8003840:	42ac      	cmp	r4, r5
 8003842:	d101      	bne.n	8003848 <__sfputs_r+0x12>
 8003844:	2000      	movs	r0, #0
 8003846:	e007      	b.n	8003858 <__sfputs_r+0x22>
 8003848:	463a      	mov	r2, r7
 800384a:	4630      	mov	r0, r6
 800384c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003850:	f7ff ffdc 	bl	800380c <__sfputc_r>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	d1f3      	bne.n	8003840 <__sfputs_r+0xa>
 8003858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800385c <_vfiprintf_r>:
 800385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003860:	460d      	mov	r5, r1
 8003862:	4614      	mov	r4, r2
 8003864:	4698      	mov	r8, r3
 8003866:	4606      	mov	r6, r0
 8003868:	b09d      	sub	sp, #116	; 0x74
 800386a:	b118      	cbz	r0, 8003874 <_vfiprintf_r+0x18>
 800386c:	6983      	ldr	r3, [r0, #24]
 800386e:	b90b      	cbnz	r3, 8003874 <_vfiprintf_r+0x18>
 8003870:	f7ff fe98 	bl	80035a4 <__sinit>
 8003874:	4b89      	ldr	r3, [pc, #548]	; (8003a9c <_vfiprintf_r+0x240>)
 8003876:	429d      	cmp	r5, r3
 8003878:	d11b      	bne.n	80038b2 <_vfiprintf_r+0x56>
 800387a:	6875      	ldr	r5, [r6, #4]
 800387c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800387e:	07d9      	lsls	r1, r3, #31
 8003880:	d405      	bmi.n	800388e <_vfiprintf_r+0x32>
 8003882:	89ab      	ldrh	r3, [r5, #12]
 8003884:	059a      	lsls	r2, r3, #22
 8003886:	d402      	bmi.n	800388e <_vfiprintf_r+0x32>
 8003888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800388a:	f7ff ff29 	bl	80036e0 <__retarget_lock_acquire_recursive>
 800388e:	89ab      	ldrh	r3, [r5, #12]
 8003890:	071b      	lsls	r3, r3, #28
 8003892:	d501      	bpl.n	8003898 <_vfiprintf_r+0x3c>
 8003894:	692b      	ldr	r3, [r5, #16]
 8003896:	b9eb      	cbnz	r3, 80038d4 <_vfiprintf_r+0x78>
 8003898:	4629      	mov	r1, r5
 800389a:	4630      	mov	r0, r6
 800389c:	f000 fb5c 	bl	8003f58 <__swsetup_r>
 80038a0:	b1c0      	cbz	r0, 80038d4 <_vfiprintf_r+0x78>
 80038a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038a4:	07dc      	lsls	r4, r3, #31
 80038a6:	d50e      	bpl.n	80038c6 <_vfiprintf_r+0x6a>
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ac:	b01d      	add	sp, #116	; 0x74
 80038ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b2:	4b7b      	ldr	r3, [pc, #492]	; (8003aa0 <_vfiprintf_r+0x244>)
 80038b4:	429d      	cmp	r5, r3
 80038b6:	d101      	bne.n	80038bc <_vfiprintf_r+0x60>
 80038b8:	68b5      	ldr	r5, [r6, #8]
 80038ba:	e7df      	b.n	800387c <_vfiprintf_r+0x20>
 80038bc:	4b79      	ldr	r3, [pc, #484]	; (8003aa4 <_vfiprintf_r+0x248>)
 80038be:	429d      	cmp	r5, r3
 80038c0:	bf08      	it	eq
 80038c2:	68f5      	ldreq	r5, [r6, #12]
 80038c4:	e7da      	b.n	800387c <_vfiprintf_r+0x20>
 80038c6:	89ab      	ldrh	r3, [r5, #12]
 80038c8:	0598      	lsls	r0, r3, #22
 80038ca:	d4ed      	bmi.n	80038a8 <_vfiprintf_r+0x4c>
 80038cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ce:	f7ff ff08 	bl	80036e2 <__retarget_lock_release_recursive>
 80038d2:	e7e9      	b.n	80038a8 <_vfiprintf_r+0x4c>
 80038d4:	2300      	movs	r3, #0
 80038d6:	9309      	str	r3, [sp, #36]	; 0x24
 80038d8:	2320      	movs	r3, #32
 80038da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038de:	2330      	movs	r3, #48	; 0x30
 80038e0:	f04f 0901 	mov.w	r9, #1
 80038e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80038e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003aa8 <_vfiprintf_r+0x24c>
 80038ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038f0:	4623      	mov	r3, r4
 80038f2:	469a      	mov	sl, r3
 80038f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038f8:	b10a      	cbz	r2, 80038fe <_vfiprintf_r+0xa2>
 80038fa:	2a25      	cmp	r2, #37	; 0x25
 80038fc:	d1f9      	bne.n	80038f2 <_vfiprintf_r+0x96>
 80038fe:	ebba 0b04 	subs.w	fp, sl, r4
 8003902:	d00b      	beq.n	800391c <_vfiprintf_r+0xc0>
 8003904:	465b      	mov	r3, fp
 8003906:	4622      	mov	r2, r4
 8003908:	4629      	mov	r1, r5
 800390a:	4630      	mov	r0, r6
 800390c:	f7ff ff93 	bl	8003836 <__sfputs_r>
 8003910:	3001      	adds	r0, #1
 8003912:	f000 80aa 	beq.w	8003a6a <_vfiprintf_r+0x20e>
 8003916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003918:	445a      	add	r2, fp
 800391a:	9209      	str	r2, [sp, #36]	; 0x24
 800391c:	f89a 3000 	ldrb.w	r3, [sl]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a2 	beq.w	8003a6a <_vfiprintf_r+0x20e>
 8003926:	2300      	movs	r3, #0
 8003928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800392c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003930:	f10a 0a01 	add.w	sl, sl, #1
 8003934:	9304      	str	r3, [sp, #16]
 8003936:	9307      	str	r3, [sp, #28]
 8003938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800393c:	931a      	str	r3, [sp, #104]	; 0x68
 800393e:	4654      	mov	r4, sl
 8003940:	2205      	movs	r2, #5
 8003942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003946:	4858      	ldr	r0, [pc, #352]	; (8003aa8 <_vfiprintf_r+0x24c>)
 8003948:	f000 fcba 	bl	80042c0 <memchr>
 800394c:	9a04      	ldr	r2, [sp, #16]
 800394e:	b9d8      	cbnz	r0, 8003988 <_vfiprintf_r+0x12c>
 8003950:	06d1      	lsls	r1, r2, #27
 8003952:	bf44      	itt	mi
 8003954:	2320      	movmi	r3, #32
 8003956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800395a:	0713      	lsls	r3, r2, #28
 800395c:	bf44      	itt	mi
 800395e:	232b      	movmi	r3, #43	; 0x2b
 8003960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003964:	f89a 3000 	ldrb.w	r3, [sl]
 8003968:	2b2a      	cmp	r3, #42	; 0x2a
 800396a:	d015      	beq.n	8003998 <_vfiprintf_r+0x13c>
 800396c:	4654      	mov	r4, sl
 800396e:	2000      	movs	r0, #0
 8003970:	f04f 0c0a 	mov.w	ip, #10
 8003974:	9a07      	ldr	r2, [sp, #28]
 8003976:	4621      	mov	r1, r4
 8003978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800397c:	3b30      	subs	r3, #48	; 0x30
 800397e:	2b09      	cmp	r3, #9
 8003980:	d94e      	bls.n	8003a20 <_vfiprintf_r+0x1c4>
 8003982:	b1b0      	cbz	r0, 80039b2 <_vfiprintf_r+0x156>
 8003984:	9207      	str	r2, [sp, #28]
 8003986:	e014      	b.n	80039b2 <_vfiprintf_r+0x156>
 8003988:	eba0 0308 	sub.w	r3, r0, r8
 800398c:	fa09 f303 	lsl.w	r3, r9, r3
 8003990:	4313      	orrs	r3, r2
 8003992:	46a2      	mov	sl, r4
 8003994:	9304      	str	r3, [sp, #16]
 8003996:	e7d2      	b.n	800393e <_vfiprintf_r+0xe2>
 8003998:	9b03      	ldr	r3, [sp, #12]
 800399a:	1d19      	adds	r1, r3, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	9103      	str	r1, [sp, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bfbb      	ittet	lt
 80039a4:	425b      	neglt	r3, r3
 80039a6:	f042 0202 	orrlt.w	r2, r2, #2
 80039aa:	9307      	strge	r3, [sp, #28]
 80039ac:	9307      	strlt	r3, [sp, #28]
 80039ae:	bfb8      	it	lt
 80039b0:	9204      	strlt	r2, [sp, #16]
 80039b2:	7823      	ldrb	r3, [r4, #0]
 80039b4:	2b2e      	cmp	r3, #46	; 0x2e
 80039b6:	d10c      	bne.n	80039d2 <_vfiprintf_r+0x176>
 80039b8:	7863      	ldrb	r3, [r4, #1]
 80039ba:	2b2a      	cmp	r3, #42	; 0x2a
 80039bc:	d135      	bne.n	8003a2a <_vfiprintf_r+0x1ce>
 80039be:	9b03      	ldr	r3, [sp, #12]
 80039c0:	3402      	adds	r4, #2
 80039c2:	1d1a      	adds	r2, r3, #4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	9203      	str	r2, [sp, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bfb8      	it	lt
 80039cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80039d0:	9305      	str	r3, [sp, #20]
 80039d2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003aac <_vfiprintf_r+0x250>
 80039d6:	2203      	movs	r2, #3
 80039d8:	4650      	mov	r0, sl
 80039da:	7821      	ldrb	r1, [r4, #0]
 80039dc:	f000 fc70 	bl	80042c0 <memchr>
 80039e0:	b140      	cbz	r0, 80039f4 <_vfiprintf_r+0x198>
 80039e2:	2340      	movs	r3, #64	; 0x40
 80039e4:	eba0 000a 	sub.w	r0, r0, sl
 80039e8:	fa03 f000 	lsl.w	r0, r3, r0
 80039ec:	9b04      	ldr	r3, [sp, #16]
 80039ee:	3401      	adds	r4, #1
 80039f0:	4303      	orrs	r3, r0
 80039f2:	9304      	str	r3, [sp, #16]
 80039f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f8:	2206      	movs	r2, #6
 80039fa:	482d      	ldr	r0, [pc, #180]	; (8003ab0 <_vfiprintf_r+0x254>)
 80039fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a00:	f000 fc5e 	bl	80042c0 <memchr>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d03f      	beq.n	8003a88 <_vfiprintf_r+0x22c>
 8003a08:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <_vfiprintf_r+0x258>)
 8003a0a:	bb1b      	cbnz	r3, 8003a54 <_vfiprintf_r+0x1f8>
 8003a0c:	9b03      	ldr	r3, [sp, #12]
 8003a0e:	3307      	adds	r3, #7
 8003a10:	f023 0307 	bic.w	r3, r3, #7
 8003a14:	3308      	adds	r3, #8
 8003a16:	9303      	str	r3, [sp, #12]
 8003a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a1a:	443b      	add	r3, r7
 8003a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a1e:	e767      	b.n	80038f0 <_vfiprintf_r+0x94>
 8003a20:	460c      	mov	r4, r1
 8003a22:	2001      	movs	r0, #1
 8003a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a28:	e7a5      	b.n	8003976 <_vfiprintf_r+0x11a>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f04f 0c0a 	mov.w	ip, #10
 8003a30:	4619      	mov	r1, r3
 8003a32:	3401      	adds	r4, #1
 8003a34:	9305      	str	r3, [sp, #20]
 8003a36:	4620      	mov	r0, r4
 8003a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a3c:	3a30      	subs	r2, #48	; 0x30
 8003a3e:	2a09      	cmp	r2, #9
 8003a40:	d903      	bls.n	8003a4a <_vfiprintf_r+0x1ee>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0c5      	beq.n	80039d2 <_vfiprintf_r+0x176>
 8003a46:	9105      	str	r1, [sp, #20]
 8003a48:	e7c3      	b.n	80039d2 <_vfiprintf_r+0x176>
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a52:	e7f0      	b.n	8003a36 <_vfiprintf_r+0x1da>
 8003a54:	ab03      	add	r3, sp, #12
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	462a      	mov	r2, r5
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <_vfiprintf_r+0x25c>)
 8003a5e:	a904      	add	r1, sp, #16
 8003a60:	f3af 8000 	nop.w
 8003a64:	4607      	mov	r7, r0
 8003a66:	1c78      	adds	r0, r7, #1
 8003a68:	d1d6      	bne.n	8003a18 <_vfiprintf_r+0x1bc>
 8003a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a6c:	07d9      	lsls	r1, r3, #31
 8003a6e:	d405      	bmi.n	8003a7c <_vfiprintf_r+0x220>
 8003a70:	89ab      	ldrh	r3, [r5, #12]
 8003a72:	059a      	lsls	r2, r3, #22
 8003a74:	d402      	bmi.n	8003a7c <_vfiprintf_r+0x220>
 8003a76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a78:	f7ff fe33 	bl	80036e2 <__retarget_lock_release_recursive>
 8003a7c:	89ab      	ldrh	r3, [r5, #12]
 8003a7e:	065b      	lsls	r3, r3, #25
 8003a80:	f53f af12 	bmi.w	80038a8 <_vfiprintf_r+0x4c>
 8003a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a86:	e711      	b.n	80038ac <_vfiprintf_r+0x50>
 8003a88:	ab03      	add	r3, sp, #12
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	462a      	mov	r2, r5
 8003a8e:	4630      	mov	r0, r6
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <_vfiprintf_r+0x25c>)
 8003a92:	a904      	add	r1, sp, #16
 8003a94:	f000 f882 	bl	8003b9c <_printf_i>
 8003a98:	e7e4      	b.n	8003a64 <_vfiprintf_r+0x208>
 8003a9a:	bf00      	nop
 8003a9c:	0800445c 	.word	0x0800445c
 8003aa0:	0800447c 	.word	0x0800447c
 8003aa4:	0800443c 	.word	0x0800443c
 8003aa8:	0800449c 	.word	0x0800449c
 8003aac:	080044a2 	.word	0x080044a2
 8003ab0:	080044a6 	.word	0x080044a6
 8003ab4:	00000000 	.word	0x00000000
 8003ab8:	08003837 	.word	0x08003837

08003abc <_printf_common>:
 8003abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac0:	4616      	mov	r6, r2
 8003ac2:	4699      	mov	r9, r3
 8003ac4:	688a      	ldr	r2, [r1, #8]
 8003ac6:	690b      	ldr	r3, [r1, #16]
 8003ac8:	4607      	mov	r7, r0
 8003aca:	4293      	cmp	r3, r2
 8003acc:	bfb8      	it	lt
 8003ace:	4613      	movlt	r3, r2
 8003ad0:	6033      	str	r3, [r6, #0]
 8003ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003adc:	b10a      	cbz	r2, 8003ae2 <_printf_common+0x26>
 8003ade:	3301      	adds	r3, #1
 8003ae0:	6033      	str	r3, [r6, #0]
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	0699      	lsls	r1, r3, #26
 8003ae6:	bf42      	ittt	mi
 8003ae8:	6833      	ldrmi	r3, [r6, #0]
 8003aea:	3302      	addmi	r3, #2
 8003aec:	6033      	strmi	r3, [r6, #0]
 8003aee:	6825      	ldr	r5, [r4, #0]
 8003af0:	f015 0506 	ands.w	r5, r5, #6
 8003af4:	d106      	bne.n	8003b04 <_printf_common+0x48>
 8003af6:	f104 0a19 	add.w	sl, r4, #25
 8003afa:	68e3      	ldr	r3, [r4, #12]
 8003afc:	6832      	ldr	r2, [r6, #0]
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	42ab      	cmp	r3, r5
 8003b02:	dc28      	bgt.n	8003b56 <_printf_common+0x9a>
 8003b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b08:	1e13      	subs	r3, r2, #0
 8003b0a:	6822      	ldr	r2, [r4, #0]
 8003b0c:	bf18      	it	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	0692      	lsls	r2, r2, #26
 8003b12:	d42d      	bmi.n	8003b70 <_printf_common+0xb4>
 8003b14:	4649      	mov	r1, r9
 8003b16:	4638      	mov	r0, r7
 8003b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b1c:	47c0      	blx	r8
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d020      	beq.n	8003b64 <_printf_common+0xa8>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	68e5      	ldr	r5, [r4, #12]
 8003b26:	f003 0306 	and.w	r3, r3, #6
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	bf18      	it	ne
 8003b2e:	2500      	movne	r5, #0
 8003b30:	6832      	ldr	r2, [r6, #0]
 8003b32:	f04f 0600 	mov.w	r6, #0
 8003b36:	68a3      	ldr	r3, [r4, #8]
 8003b38:	bf08      	it	eq
 8003b3a:	1aad      	subeq	r5, r5, r2
 8003b3c:	6922      	ldr	r2, [r4, #16]
 8003b3e:	bf08      	it	eq
 8003b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bfc4      	itt	gt
 8003b48:	1a9b      	subgt	r3, r3, r2
 8003b4a:	18ed      	addgt	r5, r5, r3
 8003b4c:	341a      	adds	r4, #26
 8003b4e:	42b5      	cmp	r5, r6
 8003b50:	d11a      	bne.n	8003b88 <_printf_common+0xcc>
 8003b52:	2000      	movs	r0, #0
 8003b54:	e008      	b.n	8003b68 <_printf_common+0xac>
 8003b56:	2301      	movs	r3, #1
 8003b58:	4652      	mov	r2, sl
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	4638      	mov	r0, r7
 8003b5e:	47c0      	blx	r8
 8003b60:	3001      	adds	r0, #1
 8003b62:	d103      	bne.n	8003b6c <_printf_common+0xb0>
 8003b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b6c:	3501      	adds	r5, #1
 8003b6e:	e7c4      	b.n	8003afa <_printf_common+0x3e>
 8003b70:	2030      	movs	r0, #48	; 0x30
 8003b72:	18e1      	adds	r1, r4, r3
 8003b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b7e:	4422      	add	r2, r4
 8003b80:	3302      	adds	r3, #2
 8003b82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b86:	e7c5      	b.n	8003b14 <_printf_common+0x58>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	4649      	mov	r1, r9
 8003b8e:	4638      	mov	r0, r7
 8003b90:	47c0      	blx	r8
 8003b92:	3001      	adds	r0, #1
 8003b94:	d0e6      	beq.n	8003b64 <_printf_common+0xa8>
 8003b96:	3601      	adds	r6, #1
 8003b98:	e7d9      	b.n	8003b4e <_printf_common+0x92>
	...

08003b9c <_printf_i>:
 8003b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba0:	7e0f      	ldrb	r7, [r1, #24]
 8003ba2:	4691      	mov	r9, r2
 8003ba4:	2f78      	cmp	r7, #120	; 0x78
 8003ba6:	4680      	mov	r8, r0
 8003ba8:	460c      	mov	r4, r1
 8003baa:	469a      	mov	sl, r3
 8003bac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bb2:	d807      	bhi.n	8003bc4 <_printf_i+0x28>
 8003bb4:	2f62      	cmp	r7, #98	; 0x62
 8003bb6:	d80a      	bhi.n	8003bce <_printf_i+0x32>
 8003bb8:	2f00      	cmp	r7, #0
 8003bba:	f000 80d9 	beq.w	8003d70 <_printf_i+0x1d4>
 8003bbe:	2f58      	cmp	r7, #88	; 0x58
 8003bc0:	f000 80a4 	beq.w	8003d0c <_printf_i+0x170>
 8003bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bcc:	e03a      	b.n	8003c44 <_printf_i+0xa8>
 8003bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bd2:	2b15      	cmp	r3, #21
 8003bd4:	d8f6      	bhi.n	8003bc4 <_printf_i+0x28>
 8003bd6:	a101      	add	r1, pc, #4	; (adr r1, 8003bdc <_printf_i+0x40>)
 8003bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bdc:	08003c35 	.word	0x08003c35
 8003be0:	08003c49 	.word	0x08003c49
 8003be4:	08003bc5 	.word	0x08003bc5
 8003be8:	08003bc5 	.word	0x08003bc5
 8003bec:	08003bc5 	.word	0x08003bc5
 8003bf0:	08003bc5 	.word	0x08003bc5
 8003bf4:	08003c49 	.word	0x08003c49
 8003bf8:	08003bc5 	.word	0x08003bc5
 8003bfc:	08003bc5 	.word	0x08003bc5
 8003c00:	08003bc5 	.word	0x08003bc5
 8003c04:	08003bc5 	.word	0x08003bc5
 8003c08:	08003d57 	.word	0x08003d57
 8003c0c:	08003c79 	.word	0x08003c79
 8003c10:	08003d39 	.word	0x08003d39
 8003c14:	08003bc5 	.word	0x08003bc5
 8003c18:	08003bc5 	.word	0x08003bc5
 8003c1c:	08003d79 	.word	0x08003d79
 8003c20:	08003bc5 	.word	0x08003bc5
 8003c24:	08003c79 	.word	0x08003c79
 8003c28:	08003bc5 	.word	0x08003bc5
 8003c2c:	08003bc5 	.word	0x08003bc5
 8003c30:	08003d41 	.word	0x08003d41
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	1d1a      	adds	r2, r3, #4
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	602a      	str	r2, [r5, #0]
 8003c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0a4      	b.n	8003d92 <_printf_i+0x1f6>
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	6829      	ldr	r1, [r5, #0]
 8003c4c:	0606      	lsls	r6, r0, #24
 8003c4e:	f101 0304 	add.w	r3, r1, #4
 8003c52:	d50a      	bpl.n	8003c6a <_printf_i+0xce>
 8003c54:	680e      	ldr	r6, [r1, #0]
 8003c56:	602b      	str	r3, [r5, #0]
 8003c58:	2e00      	cmp	r6, #0
 8003c5a:	da03      	bge.n	8003c64 <_printf_i+0xc8>
 8003c5c:	232d      	movs	r3, #45	; 0x2d
 8003c5e:	4276      	negs	r6, r6
 8003c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c64:	230a      	movs	r3, #10
 8003c66:	485e      	ldr	r0, [pc, #376]	; (8003de0 <_printf_i+0x244>)
 8003c68:	e019      	b.n	8003c9e <_printf_i+0x102>
 8003c6a:	680e      	ldr	r6, [r1, #0]
 8003c6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	bf18      	it	ne
 8003c74:	b236      	sxthne	r6, r6
 8003c76:	e7ef      	b.n	8003c58 <_printf_i+0xbc>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	6820      	ldr	r0, [r4, #0]
 8003c7c:	1d19      	adds	r1, r3, #4
 8003c7e:	6029      	str	r1, [r5, #0]
 8003c80:	0601      	lsls	r1, r0, #24
 8003c82:	d501      	bpl.n	8003c88 <_printf_i+0xec>
 8003c84:	681e      	ldr	r6, [r3, #0]
 8003c86:	e002      	b.n	8003c8e <_printf_i+0xf2>
 8003c88:	0646      	lsls	r6, r0, #25
 8003c8a:	d5fb      	bpl.n	8003c84 <_printf_i+0xe8>
 8003c8c:	881e      	ldrh	r6, [r3, #0]
 8003c8e:	2f6f      	cmp	r7, #111	; 0x6f
 8003c90:	bf0c      	ite	eq
 8003c92:	2308      	moveq	r3, #8
 8003c94:	230a      	movne	r3, #10
 8003c96:	4852      	ldr	r0, [pc, #328]	; (8003de0 <_printf_i+0x244>)
 8003c98:	2100      	movs	r1, #0
 8003c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c9e:	6865      	ldr	r5, [r4, #4]
 8003ca0:	2d00      	cmp	r5, #0
 8003ca2:	bfa8      	it	ge
 8003ca4:	6821      	ldrge	r1, [r4, #0]
 8003ca6:	60a5      	str	r5, [r4, #8]
 8003ca8:	bfa4      	itt	ge
 8003caa:	f021 0104 	bicge.w	r1, r1, #4
 8003cae:	6021      	strge	r1, [r4, #0]
 8003cb0:	b90e      	cbnz	r6, 8003cb6 <_printf_i+0x11a>
 8003cb2:	2d00      	cmp	r5, #0
 8003cb4:	d04d      	beq.n	8003d52 <_printf_i+0x1b6>
 8003cb6:	4615      	mov	r5, r2
 8003cb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cbc:	fb03 6711 	mls	r7, r3, r1, r6
 8003cc0:	5dc7      	ldrb	r7, [r0, r7]
 8003cc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cc6:	4637      	mov	r7, r6
 8003cc8:	42bb      	cmp	r3, r7
 8003cca:	460e      	mov	r6, r1
 8003ccc:	d9f4      	bls.n	8003cb8 <_printf_i+0x11c>
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d10b      	bne.n	8003cea <_printf_i+0x14e>
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	07de      	lsls	r6, r3, #31
 8003cd6:	d508      	bpl.n	8003cea <_printf_i+0x14e>
 8003cd8:	6923      	ldr	r3, [r4, #16]
 8003cda:	6861      	ldr	r1, [r4, #4]
 8003cdc:	4299      	cmp	r1, r3
 8003cde:	bfde      	ittt	le
 8003ce0:	2330      	movle	r3, #48	; 0x30
 8003ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ce6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003cea:	1b52      	subs	r2, r2, r5
 8003cec:	6122      	str	r2, [r4, #16]
 8003cee:	464b      	mov	r3, r9
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	f8cd a000 	str.w	sl, [sp]
 8003cf8:	aa03      	add	r2, sp, #12
 8003cfa:	f7ff fedf 	bl	8003abc <_printf_common>
 8003cfe:	3001      	adds	r0, #1
 8003d00:	d14c      	bne.n	8003d9c <_printf_i+0x200>
 8003d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d06:	b004      	add	sp, #16
 8003d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0c:	4834      	ldr	r0, [pc, #208]	; (8003de0 <_printf_i+0x244>)
 8003d0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d12:	6829      	ldr	r1, [r5, #0]
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d1a:	6029      	str	r1, [r5, #0]
 8003d1c:	061d      	lsls	r5, r3, #24
 8003d1e:	d514      	bpl.n	8003d4a <_printf_i+0x1ae>
 8003d20:	07df      	lsls	r7, r3, #31
 8003d22:	bf44      	itt	mi
 8003d24:	f043 0320 	orrmi.w	r3, r3, #32
 8003d28:	6023      	strmi	r3, [r4, #0]
 8003d2a:	b91e      	cbnz	r6, 8003d34 <_printf_i+0x198>
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	f023 0320 	bic.w	r3, r3, #32
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	2310      	movs	r3, #16
 8003d36:	e7af      	b.n	8003c98 <_printf_i+0xfc>
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	f043 0320 	orr.w	r3, r3, #32
 8003d3e:	6023      	str	r3, [r4, #0]
 8003d40:	2378      	movs	r3, #120	; 0x78
 8003d42:	4828      	ldr	r0, [pc, #160]	; (8003de4 <_printf_i+0x248>)
 8003d44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d48:	e7e3      	b.n	8003d12 <_printf_i+0x176>
 8003d4a:	0659      	lsls	r1, r3, #25
 8003d4c:	bf48      	it	mi
 8003d4e:	b2b6      	uxthmi	r6, r6
 8003d50:	e7e6      	b.n	8003d20 <_printf_i+0x184>
 8003d52:	4615      	mov	r5, r2
 8003d54:	e7bb      	b.n	8003cce <_printf_i+0x132>
 8003d56:	682b      	ldr	r3, [r5, #0]
 8003d58:	6826      	ldr	r6, [r4, #0]
 8003d5a:	1d18      	adds	r0, r3, #4
 8003d5c:	6961      	ldr	r1, [r4, #20]
 8003d5e:	6028      	str	r0, [r5, #0]
 8003d60:	0635      	lsls	r5, r6, #24
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	d501      	bpl.n	8003d6a <_printf_i+0x1ce>
 8003d66:	6019      	str	r1, [r3, #0]
 8003d68:	e002      	b.n	8003d70 <_printf_i+0x1d4>
 8003d6a:	0670      	lsls	r0, r6, #25
 8003d6c:	d5fb      	bpl.n	8003d66 <_printf_i+0x1ca>
 8003d6e:	8019      	strh	r1, [r3, #0]
 8003d70:	2300      	movs	r3, #0
 8003d72:	4615      	mov	r5, r2
 8003d74:	6123      	str	r3, [r4, #16]
 8003d76:	e7ba      	b.n	8003cee <_printf_i+0x152>
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	1d1a      	adds	r2, r3, #4
 8003d7e:	602a      	str	r2, [r5, #0]
 8003d80:	681d      	ldr	r5, [r3, #0]
 8003d82:	6862      	ldr	r2, [r4, #4]
 8003d84:	4628      	mov	r0, r5
 8003d86:	f000 fa9b 	bl	80042c0 <memchr>
 8003d8a:	b108      	cbz	r0, 8003d90 <_printf_i+0x1f4>
 8003d8c:	1b40      	subs	r0, r0, r5
 8003d8e:	6060      	str	r0, [r4, #4]
 8003d90:	6863      	ldr	r3, [r4, #4]
 8003d92:	6123      	str	r3, [r4, #16]
 8003d94:	2300      	movs	r3, #0
 8003d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d9a:	e7a8      	b.n	8003cee <_printf_i+0x152>
 8003d9c:	462a      	mov	r2, r5
 8003d9e:	4649      	mov	r1, r9
 8003da0:	4640      	mov	r0, r8
 8003da2:	6923      	ldr	r3, [r4, #16]
 8003da4:	47d0      	blx	sl
 8003da6:	3001      	adds	r0, #1
 8003da8:	d0ab      	beq.n	8003d02 <_printf_i+0x166>
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	079b      	lsls	r3, r3, #30
 8003dae:	d413      	bmi.n	8003dd8 <_printf_i+0x23c>
 8003db0:	68e0      	ldr	r0, [r4, #12]
 8003db2:	9b03      	ldr	r3, [sp, #12]
 8003db4:	4298      	cmp	r0, r3
 8003db6:	bfb8      	it	lt
 8003db8:	4618      	movlt	r0, r3
 8003dba:	e7a4      	b.n	8003d06 <_printf_i+0x16a>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	4632      	mov	r2, r6
 8003dc0:	4649      	mov	r1, r9
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	47d0      	blx	sl
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d09b      	beq.n	8003d02 <_printf_i+0x166>
 8003dca:	3501      	adds	r5, #1
 8003dcc:	68e3      	ldr	r3, [r4, #12]
 8003dce:	9903      	ldr	r1, [sp, #12]
 8003dd0:	1a5b      	subs	r3, r3, r1
 8003dd2:	42ab      	cmp	r3, r5
 8003dd4:	dcf2      	bgt.n	8003dbc <_printf_i+0x220>
 8003dd6:	e7eb      	b.n	8003db0 <_printf_i+0x214>
 8003dd8:	2500      	movs	r5, #0
 8003dda:	f104 0619 	add.w	r6, r4, #25
 8003dde:	e7f5      	b.n	8003dcc <_printf_i+0x230>
 8003de0:	080044ad 	.word	0x080044ad
 8003de4:	080044be 	.word	0x080044be

08003de8 <_sbrk_r>:
 8003de8:	b538      	push	{r3, r4, r5, lr}
 8003dea:	2300      	movs	r3, #0
 8003dec:	4d05      	ldr	r5, [pc, #20]	; (8003e04 <_sbrk_r+0x1c>)
 8003dee:	4604      	mov	r4, r0
 8003df0:	4608      	mov	r0, r1
 8003df2:	602b      	str	r3, [r5, #0]
 8003df4:	f7fc fbf8 	bl	80005e8 <_sbrk>
 8003df8:	1c43      	adds	r3, r0, #1
 8003dfa:	d102      	bne.n	8003e02 <_sbrk_r+0x1a>
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	b103      	cbz	r3, 8003e02 <_sbrk_r+0x1a>
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	bd38      	pop	{r3, r4, r5, pc}
 8003e04:	20000148 	.word	0x20000148

08003e08 <__sread>:
 8003e08:	b510      	push	{r4, lr}
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e10:	f000 fab8 	bl	8004384 <_read_r>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	bfab      	itete	ge
 8003e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e1c:	181b      	addge	r3, r3, r0
 8003e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e22:	bfac      	ite	ge
 8003e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e26:	81a3      	strhlt	r3, [r4, #12]
 8003e28:	bd10      	pop	{r4, pc}

08003e2a <__swrite>:
 8003e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e2e:	461f      	mov	r7, r3
 8003e30:	898b      	ldrh	r3, [r1, #12]
 8003e32:	4605      	mov	r5, r0
 8003e34:	05db      	lsls	r3, r3, #23
 8003e36:	460c      	mov	r4, r1
 8003e38:	4616      	mov	r6, r2
 8003e3a:	d505      	bpl.n	8003e48 <__swrite+0x1e>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e44:	f000 f9c4 	bl	80041d0 <_lseek_r>
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	4632      	mov	r2, r6
 8003e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	4628      	mov	r0, r5
 8003e54:	463b      	mov	r3, r7
 8003e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5e:	f000 b869 	b.w	8003f34 <_write_r>

08003e62 <__sseek>:
 8003e62:	b510      	push	{r4, lr}
 8003e64:	460c      	mov	r4, r1
 8003e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6a:	f000 f9b1 	bl	80041d0 <_lseek_r>
 8003e6e:	1c43      	adds	r3, r0, #1
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	bf15      	itete	ne
 8003e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e7e:	81a3      	strheq	r3, [r4, #12]
 8003e80:	bf18      	it	ne
 8003e82:	81a3      	strhne	r3, [r4, #12]
 8003e84:	bd10      	pop	{r4, pc}

08003e86 <__sclose>:
 8003e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e8a:	f000 b8d3 	b.w	8004034 <_close_r>
	...

08003e90 <__swbuf_r>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	460e      	mov	r6, r1
 8003e94:	4614      	mov	r4, r2
 8003e96:	4605      	mov	r5, r0
 8003e98:	b118      	cbz	r0, 8003ea2 <__swbuf_r+0x12>
 8003e9a:	6983      	ldr	r3, [r0, #24]
 8003e9c:	b90b      	cbnz	r3, 8003ea2 <__swbuf_r+0x12>
 8003e9e:	f7ff fb81 	bl	80035a4 <__sinit>
 8003ea2:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <__swbuf_r+0x98>)
 8003ea4:	429c      	cmp	r4, r3
 8003ea6:	d12b      	bne.n	8003f00 <__swbuf_r+0x70>
 8003ea8:	686c      	ldr	r4, [r5, #4]
 8003eaa:	69a3      	ldr	r3, [r4, #24]
 8003eac:	60a3      	str	r3, [r4, #8]
 8003eae:	89a3      	ldrh	r3, [r4, #12]
 8003eb0:	071a      	lsls	r2, r3, #28
 8003eb2:	d52f      	bpl.n	8003f14 <__swbuf_r+0x84>
 8003eb4:	6923      	ldr	r3, [r4, #16]
 8003eb6:	b36b      	cbz	r3, 8003f14 <__swbuf_r+0x84>
 8003eb8:	6923      	ldr	r3, [r4, #16]
 8003eba:	6820      	ldr	r0, [r4, #0]
 8003ebc:	b2f6      	uxtb	r6, r6
 8003ebe:	1ac0      	subs	r0, r0, r3
 8003ec0:	6963      	ldr	r3, [r4, #20]
 8003ec2:	4637      	mov	r7, r6
 8003ec4:	4283      	cmp	r3, r0
 8003ec6:	dc04      	bgt.n	8003ed2 <__swbuf_r+0x42>
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4628      	mov	r0, r5
 8003ecc:	f000 f944 	bl	8004158 <_fflush_r>
 8003ed0:	bb30      	cbnz	r0, 8003f20 <__swbuf_r+0x90>
 8003ed2:	68a3      	ldr	r3, [r4, #8]
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	60a3      	str	r3, [r4, #8]
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	6022      	str	r2, [r4, #0]
 8003ee0:	701e      	strb	r6, [r3, #0]
 8003ee2:	6963      	ldr	r3, [r4, #20]
 8003ee4:	4283      	cmp	r3, r0
 8003ee6:	d004      	beq.n	8003ef2 <__swbuf_r+0x62>
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	07db      	lsls	r3, r3, #31
 8003eec:	d506      	bpl.n	8003efc <__swbuf_r+0x6c>
 8003eee:	2e0a      	cmp	r6, #10
 8003ef0:	d104      	bne.n	8003efc <__swbuf_r+0x6c>
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	f000 f92f 	bl	8004158 <_fflush_r>
 8003efa:	b988      	cbnz	r0, 8003f20 <__swbuf_r+0x90>
 8003efc:	4638      	mov	r0, r7
 8003efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f00:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <__swbuf_r+0x9c>)
 8003f02:	429c      	cmp	r4, r3
 8003f04:	d101      	bne.n	8003f0a <__swbuf_r+0x7a>
 8003f06:	68ac      	ldr	r4, [r5, #8]
 8003f08:	e7cf      	b.n	8003eaa <__swbuf_r+0x1a>
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <__swbuf_r+0xa0>)
 8003f0c:	429c      	cmp	r4, r3
 8003f0e:	bf08      	it	eq
 8003f10:	68ec      	ldreq	r4, [r5, #12]
 8003f12:	e7ca      	b.n	8003eaa <__swbuf_r+0x1a>
 8003f14:	4621      	mov	r1, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 f81e 	bl	8003f58 <__swsetup_r>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d0cb      	beq.n	8003eb8 <__swbuf_r+0x28>
 8003f20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f24:	e7ea      	b.n	8003efc <__swbuf_r+0x6c>
 8003f26:	bf00      	nop
 8003f28:	0800445c 	.word	0x0800445c
 8003f2c:	0800447c 	.word	0x0800447c
 8003f30:	0800443c 	.word	0x0800443c

08003f34 <_write_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4604      	mov	r4, r0
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	4d05      	ldr	r5, [pc, #20]	; (8003f54 <_write_r+0x20>)
 8003f40:	602a      	str	r2, [r5, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f7fc f902 	bl	800014c <_write>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_write_r+0x1e>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_write_r+0x1e>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	20000148 	.word	0x20000148

08003f58 <__swsetup_r>:
 8003f58:	4b32      	ldr	r3, [pc, #200]	; (8004024 <__swsetup_r+0xcc>)
 8003f5a:	b570      	push	{r4, r5, r6, lr}
 8003f5c:	681d      	ldr	r5, [r3, #0]
 8003f5e:	4606      	mov	r6, r0
 8003f60:	460c      	mov	r4, r1
 8003f62:	b125      	cbz	r5, 8003f6e <__swsetup_r+0x16>
 8003f64:	69ab      	ldr	r3, [r5, #24]
 8003f66:	b913      	cbnz	r3, 8003f6e <__swsetup_r+0x16>
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f7ff fb1b 	bl	80035a4 <__sinit>
 8003f6e:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <__swsetup_r+0xd0>)
 8003f70:	429c      	cmp	r4, r3
 8003f72:	d10f      	bne.n	8003f94 <__swsetup_r+0x3c>
 8003f74:	686c      	ldr	r4, [r5, #4]
 8003f76:	89a3      	ldrh	r3, [r4, #12]
 8003f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f7c:	0719      	lsls	r1, r3, #28
 8003f7e:	d42c      	bmi.n	8003fda <__swsetup_r+0x82>
 8003f80:	06dd      	lsls	r5, r3, #27
 8003f82:	d411      	bmi.n	8003fa8 <__swsetup_r+0x50>
 8003f84:	2309      	movs	r3, #9
 8003f86:	6033      	str	r3, [r6, #0]
 8003f88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f90:	81a3      	strh	r3, [r4, #12]
 8003f92:	e03e      	b.n	8004012 <__swsetup_r+0xba>
 8003f94:	4b25      	ldr	r3, [pc, #148]	; (800402c <__swsetup_r+0xd4>)
 8003f96:	429c      	cmp	r4, r3
 8003f98:	d101      	bne.n	8003f9e <__swsetup_r+0x46>
 8003f9a:	68ac      	ldr	r4, [r5, #8]
 8003f9c:	e7eb      	b.n	8003f76 <__swsetup_r+0x1e>
 8003f9e:	4b24      	ldr	r3, [pc, #144]	; (8004030 <__swsetup_r+0xd8>)
 8003fa0:	429c      	cmp	r4, r3
 8003fa2:	bf08      	it	eq
 8003fa4:	68ec      	ldreq	r4, [r5, #12]
 8003fa6:	e7e6      	b.n	8003f76 <__swsetup_r+0x1e>
 8003fa8:	0758      	lsls	r0, r3, #29
 8003faa:	d512      	bpl.n	8003fd2 <__swsetup_r+0x7a>
 8003fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fae:	b141      	cbz	r1, 8003fc2 <__swsetup_r+0x6a>
 8003fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fb4:	4299      	cmp	r1, r3
 8003fb6:	d002      	beq.n	8003fbe <__swsetup_r+0x66>
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 f99b 	bl	80042f4 <_free_r>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6363      	str	r3, [r4, #52]	; 0x34
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fc8:	81a3      	strh	r3, [r4, #12]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6063      	str	r3, [r4, #4]
 8003fce:	6923      	ldr	r3, [r4, #16]
 8003fd0:	6023      	str	r3, [r4, #0]
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	f043 0308 	orr.w	r3, r3, #8
 8003fd8:	81a3      	strh	r3, [r4, #12]
 8003fda:	6923      	ldr	r3, [r4, #16]
 8003fdc:	b94b      	cbnz	r3, 8003ff2 <__swsetup_r+0x9a>
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe8:	d003      	beq.n	8003ff2 <__swsetup_r+0x9a>
 8003fea:	4621      	mov	r1, r4
 8003fec:	4630      	mov	r0, r6
 8003fee:	f000 f927 	bl	8004240 <__smakebuf_r>
 8003ff2:	89a0      	ldrh	r0, [r4, #12]
 8003ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ff8:	f010 0301 	ands.w	r3, r0, #1
 8003ffc:	d00a      	beq.n	8004014 <__swsetup_r+0xbc>
 8003ffe:	2300      	movs	r3, #0
 8004000:	60a3      	str	r3, [r4, #8]
 8004002:	6963      	ldr	r3, [r4, #20]
 8004004:	425b      	negs	r3, r3
 8004006:	61a3      	str	r3, [r4, #24]
 8004008:	6923      	ldr	r3, [r4, #16]
 800400a:	b943      	cbnz	r3, 800401e <__swsetup_r+0xc6>
 800400c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004010:	d1ba      	bne.n	8003f88 <__swsetup_r+0x30>
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	0781      	lsls	r1, r0, #30
 8004016:	bf58      	it	pl
 8004018:	6963      	ldrpl	r3, [r4, #20]
 800401a:	60a3      	str	r3, [r4, #8]
 800401c:	e7f4      	b.n	8004008 <__swsetup_r+0xb0>
 800401e:	2000      	movs	r0, #0
 8004020:	e7f7      	b.n	8004012 <__swsetup_r+0xba>
 8004022:	bf00      	nop
 8004024:	2000000c 	.word	0x2000000c
 8004028:	0800445c 	.word	0x0800445c
 800402c:	0800447c 	.word	0x0800447c
 8004030:	0800443c 	.word	0x0800443c

08004034 <_close_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	2300      	movs	r3, #0
 8004038:	4d05      	ldr	r5, [pc, #20]	; (8004050 <_close_r+0x1c>)
 800403a:	4604      	mov	r4, r0
 800403c:	4608      	mov	r0, r1
 800403e:	602b      	str	r3, [r5, #0]
 8004040:	f7fc faa1 	bl	8000586 <_close>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d102      	bne.n	800404e <_close_r+0x1a>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	b103      	cbz	r3, 800404e <_close_r+0x1a>
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	20000148 	.word	0x20000148

08004054 <__sflush_r>:
 8004054:	898a      	ldrh	r2, [r1, #12]
 8004056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004058:	4605      	mov	r5, r0
 800405a:	0710      	lsls	r0, r2, #28
 800405c:	460c      	mov	r4, r1
 800405e:	d457      	bmi.n	8004110 <__sflush_r+0xbc>
 8004060:	684b      	ldr	r3, [r1, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	dc04      	bgt.n	8004070 <__sflush_r+0x1c>
 8004066:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	dc01      	bgt.n	8004070 <__sflush_r+0x1c>
 800406c:	2000      	movs	r0, #0
 800406e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004072:	2e00      	cmp	r6, #0
 8004074:	d0fa      	beq.n	800406c <__sflush_r+0x18>
 8004076:	2300      	movs	r3, #0
 8004078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800407c:	682f      	ldr	r7, [r5, #0]
 800407e:	602b      	str	r3, [r5, #0]
 8004080:	d032      	beq.n	80040e8 <__sflush_r+0x94>
 8004082:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	075a      	lsls	r2, r3, #29
 8004088:	d505      	bpl.n	8004096 <__sflush_r+0x42>
 800408a:	6863      	ldr	r3, [r4, #4]
 800408c:	1ac0      	subs	r0, r0, r3
 800408e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004090:	b10b      	cbz	r3, 8004096 <__sflush_r+0x42>
 8004092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004094:	1ac0      	subs	r0, r0, r3
 8004096:	2300      	movs	r3, #0
 8004098:	4602      	mov	r2, r0
 800409a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800409c:	4628      	mov	r0, r5
 800409e:	6a21      	ldr	r1, [r4, #32]
 80040a0:	47b0      	blx	r6
 80040a2:	1c43      	adds	r3, r0, #1
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	d106      	bne.n	80040b6 <__sflush_r+0x62>
 80040a8:	6829      	ldr	r1, [r5, #0]
 80040aa:	291d      	cmp	r1, #29
 80040ac:	d82c      	bhi.n	8004108 <__sflush_r+0xb4>
 80040ae:	4a29      	ldr	r2, [pc, #164]	; (8004154 <__sflush_r+0x100>)
 80040b0:	40ca      	lsrs	r2, r1
 80040b2:	07d6      	lsls	r6, r2, #31
 80040b4:	d528      	bpl.n	8004108 <__sflush_r+0xb4>
 80040b6:	2200      	movs	r2, #0
 80040b8:	6062      	str	r2, [r4, #4]
 80040ba:	6922      	ldr	r2, [r4, #16]
 80040bc:	04d9      	lsls	r1, r3, #19
 80040be:	6022      	str	r2, [r4, #0]
 80040c0:	d504      	bpl.n	80040cc <__sflush_r+0x78>
 80040c2:	1c42      	adds	r2, r0, #1
 80040c4:	d101      	bne.n	80040ca <__sflush_r+0x76>
 80040c6:	682b      	ldr	r3, [r5, #0]
 80040c8:	b903      	cbnz	r3, 80040cc <__sflush_r+0x78>
 80040ca:	6560      	str	r0, [r4, #84]	; 0x54
 80040cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ce:	602f      	str	r7, [r5, #0]
 80040d0:	2900      	cmp	r1, #0
 80040d2:	d0cb      	beq.n	800406c <__sflush_r+0x18>
 80040d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040d8:	4299      	cmp	r1, r3
 80040da:	d002      	beq.n	80040e2 <__sflush_r+0x8e>
 80040dc:	4628      	mov	r0, r5
 80040de:	f000 f909 	bl	80042f4 <_free_r>
 80040e2:	2000      	movs	r0, #0
 80040e4:	6360      	str	r0, [r4, #52]	; 0x34
 80040e6:	e7c2      	b.n	800406e <__sflush_r+0x1a>
 80040e8:	6a21      	ldr	r1, [r4, #32]
 80040ea:	2301      	movs	r3, #1
 80040ec:	4628      	mov	r0, r5
 80040ee:	47b0      	blx	r6
 80040f0:	1c41      	adds	r1, r0, #1
 80040f2:	d1c7      	bne.n	8004084 <__sflush_r+0x30>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0c4      	beq.n	8004084 <__sflush_r+0x30>
 80040fa:	2b1d      	cmp	r3, #29
 80040fc:	d001      	beq.n	8004102 <__sflush_r+0xae>
 80040fe:	2b16      	cmp	r3, #22
 8004100:	d101      	bne.n	8004106 <__sflush_r+0xb2>
 8004102:	602f      	str	r7, [r5, #0]
 8004104:	e7b2      	b.n	800406c <__sflush_r+0x18>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800410c:	81a3      	strh	r3, [r4, #12]
 800410e:	e7ae      	b.n	800406e <__sflush_r+0x1a>
 8004110:	690f      	ldr	r7, [r1, #16]
 8004112:	2f00      	cmp	r7, #0
 8004114:	d0aa      	beq.n	800406c <__sflush_r+0x18>
 8004116:	0793      	lsls	r3, r2, #30
 8004118:	bf18      	it	ne
 800411a:	2300      	movne	r3, #0
 800411c:	680e      	ldr	r6, [r1, #0]
 800411e:	bf08      	it	eq
 8004120:	694b      	ldreq	r3, [r1, #20]
 8004122:	1bf6      	subs	r6, r6, r7
 8004124:	600f      	str	r7, [r1, #0]
 8004126:	608b      	str	r3, [r1, #8]
 8004128:	2e00      	cmp	r6, #0
 800412a:	dd9f      	ble.n	800406c <__sflush_r+0x18>
 800412c:	4633      	mov	r3, r6
 800412e:	463a      	mov	r2, r7
 8004130:	4628      	mov	r0, r5
 8004132:	6a21      	ldr	r1, [r4, #32]
 8004134:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004138:	47e0      	blx	ip
 800413a:	2800      	cmp	r0, #0
 800413c:	dc06      	bgt.n	800414c <__sflush_r+0xf8>
 800413e:	89a3      	ldrh	r3, [r4, #12]
 8004140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004148:	81a3      	strh	r3, [r4, #12]
 800414a:	e790      	b.n	800406e <__sflush_r+0x1a>
 800414c:	4407      	add	r7, r0
 800414e:	1a36      	subs	r6, r6, r0
 8004150:	e7ea      	b.n	8004128 <__sflush_r+0xd4>
 8004152:	bf00      	nop
 8004154:	20400001 	.word	0x20400001

08004158 <_fflush_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	690b      	ldr	r3, [r1, #16]
 800415c:	4605      	mov	r5, r0
 800415e:	460c      	mov	r4, r1
 8004160:	b913      	cbnz	r3, 8004168 <_fflush_r+0x10>
 8004162:	2500      	movs	r5, #0
 8004164:	4628      	mov	r0, r5
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	b118      	cbz	r0, 8004172 <_fflush_r+0x1a>
 800416a:	6983      	ldr	r3, [r0, #24]
 800416c:	b90b      	cbnz	r3, 8004172 <_fflush_r+0x1a>
 800416e:	f7ff fa19 	bl	80035a4 <__sinit>
 8004172:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <_fflush_r+0x6c>)
 8004174:	429c      	cmp	r4, r3
 8004176:	d11b      	bne.n	80041b0 <_fflush_r+0x58>
 8004178:	686c      	ldr	r4, [r5, #4]
 800417a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0ef      	beq.n	8004162 <_fflush_r+0xa>
 8004182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004184:	07d0      	lsls	r0, r2, #31
 8004186:	d404      	bmi.n	8004192 <_fflush_r+0x3a>
 8004188:	0599      	lsls	r1, r3, #22
 800418a:	d402      	bmi.n	8004192 <_fflush_r+0x3a>
 800418c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800418e:	f7ff faa7 	bl	80036e0 <__retarget_lock_acquire_recursive>
 8004192:	4628      	mov	r0, r5
 8004194:	4621      	mov	r1, r4
 8004196:	f7ff ff5d 	bl	8004054 <__sflush_r>
 800419a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800419c:	4605      	mov	r5, r0
 800419e:	07da      	lsls	r2, r3, #31
 80041a0:	d4e0      	bmi.n	8004164 <_fflush_r+0xc>
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	059b      	lsls	r3, r3, #22
 80041a6:	d4dd      	bmi.n	8004164 <_fflush_r+0xc>
 80041a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041aa:	f7ff fa9a 	bl	80036e2 <__retarget_lock_release_recursive>
 80041ae:	e7d9      	b.n	8004164 <_fflush_r+0xc>
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <_fflush_r+0x70>)
 80041b2:	429c      	cmp	r4, r3
 80041b4:	d101      	bne.n	80041ba <_fflush_r+0x62>
 80041b6:	68ac      	ldr	r4, [r5, #8]
 80041b8:	e7df      	b.n	800417a <_fflush_r+0x22>
 80041ba:	4b04      	ldr	r3, [pc, #16]	; (80041cc <_fflush_r+0x74>)
 80041bc:	429c      	cmp	r4, r3
 80041be:	bf08      	it	eq
 80041c0:	68ec      	ldreq	r4, [r5, #12]
 80041c2:	e7da      	b.n	800417a <_fflush_r+0x22>
 80041c4:	0800445c 	.word	0x0800445c
 80041c8:	0800447c 	.word	0x0800447c
 80041cc:	0800443c 	.word	0x0800443c

080041d0 <_lseek_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	2200      	movs	r2, #0
 80041da:	4d05      	ldr	r5, [pc, #20]	; (80041f0 <_lseek_r+0x20>)
 80041dc:	602a      	str	r2, [r5, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	f7fc f9f5 	bl	80005ce <_lseek>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d102      	bne.n	80041ee <_lseek_r+0x1e>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	b103      	cbz	r3, 80041ee <_lseek_r+0x1e>
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	20000148 	.word	0x20000148

080041f4 <__swhatbuf_r>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	460e      	mov	r6, r1
 80041f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041fc:	4614      	mov	r4, r2
 80041fe:	2900      	cmp	r1, #0
 8004200:	461d      	mov	r5, r3
 8004202:	b096      	sub	sp, #88	; 0x58
 8004204:	da08      	bge.n	8004218 <__swhatbuf_r+0x24>
 8004206:	2200      	movs	r2, #0
 8004208:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800420c:	602a      	str	r2, [r5, #0]
 800420e:	061a      	lsls	r2, r3, #24
 8004210:	d410      	bmi.n	8004234 <__swhatbuf_r+0x40>
 8004212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004216:	e00e      	b.n	8004236 <__swhatbuf_r+0x42>
 8004218:	466a      	mov	r2, sp
 800421a:	f000 f8c5 	bl	80043a8 <_fstat_r>
 800421e:	2800      	cmp	r0, #0
 8004220:	dbf1      	blt.n	8004206 <__swhatbuf_r+0x12>
 8004222:	9a01      	ldr	r2, [sp, #4]
 8004224:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004228:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800422c:	425a      	negs	r2, r3
 800422e:	415a      	adcs	r2, r3
 8004230:	602a      	str	r2, [r5, #0]
 8004232:	e7ee      	b.n	8004212 <__swhatbuf_r+0x1e>
 8004234:	2340      	movs	r3, #64	; 0x40
 8004236:	2000      	movs	r0, #0
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	b016      	add	sp, #88	; 0x58
 800423c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004240 <__smakebuf_r>:
 8004240:	898b      	ldrh	r3, [r1, #12]
 8004242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004244:	079d      	lsls	r5, r3, #30
 8004246:	4606      	mov	r6, r0
 8004248:	460c      	mov	r4, r1
 800424a:	d507      	bpl.n	800425c <__smakebuf_r+0x1c>
 800424c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	6123      	str	r3, [r4, #16]
 8004254:	2301      	movs	r3, #1
 8004256:	6163      	str	r3, [r4, #20]
 8004258:	b002      	add	sp, #8
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	466a      	mov	r2, sp
 800425e:	ab01      	add	r3, sp, #4
 8004260:	f7ff ffc8 	bl	80041f4 <__swhatbuf_r>
 8004264:	9900      	ldr	r1, [sp, #0]
 8004266:	4605      	mov	r5, r0
 8004268:	4630      	mov	r0, r6
 800426a:	f7ff fa5b 	bl	8003724 <_malloc_r>
 800426e:	b948      	cbnz	r0, 8004284 <__smakebuf_r+0x44>
 8004270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004274:	059a      	lsls	r2, r3, #22
 8004276:	d4ef      	bmi.n	8004258 <__smakebuf_r+0x18>
 8004278:	f023 0303 	bic.w	r3, r3, #3
 800427c:	f043 0302 	orr.w	r3, r3, #2
 8004280:	81a3      	strh	r3, [r4, #12]
 8004282:	e7e3      	b.n	800424c <__smakebuf_r+0xc>
 8004284:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <__smakebuf_r+0x7c>)
 8004286:	62b3      	str	r3, [r6, #40]	; 0x28
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	6020      	str	r0, [r4, #0]
 800428c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004290:	81a3      	strh	r3, [r4, #12]
 8004292:	9b00      	ldr	r3, [sp, #0]
 8004294:	6120      	str	r0, [r4, #16]
 8004296:	6163      	str	r3, [r4, #20]
 8004298:	9b01      	ldr	r3, [sp, #4]
 800429a:	b15b      	cbz	r3, 80042b4 <__smakebuf_r+0x74>
 800429c:	4630      	mov	r0, r6
 800429e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042a2:	f000 f893 	bl	80043cc <_isatty_r>
 80042a6:	b128      	cbz	r0, 80042b4 <__smakebuf_r+0x74>
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	f023 0303 	bic.w	r3, r3, #3
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	89a0      	ldrh	r0, [r4, #12]
 80042b6:	4305      	orrs	r5, r0
 80042b8:	81a5      	strh	r5, [r4, #12]
 80042ba:	e7cd      	b.n	8004258 <__smakebuf_r+0x18>
 80042bc:	0800353d 	.word	0x0800353d

080042c0 <memchr>:
 80042c0:	4603      	mov	r3, r0
 80042c2:	b510      	push	{r4, lr}
 80042c4:	b2c9      	uxtb	r1, r1
 80042c6:	4402      	add	r2, r0
 80042c8:	4293      	cmp	r3, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	d101      	bne.n	80042d2 <memchr+0x12>
 80042ce:	2000      	movs	r0, #0
 80042d0:	e003      	b.n	80042da <memchr+0x1a>
 80042d2:	7804      	ldrb	r4, [r0, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	428c      	cmp	r4, r1
 80042d8:	d1f6      	bne.n	80042c8 <memchr+0x8>
 80042da:	bd10      	pop	{r4, pc}

080042dc <__malloc_lock>:
 80042dc:	4801      	ldr	r0, [pc, #4]	; (80042e4 <__malloc_lock+0x8>)
 80042de:	f7ff b9ff 	b.w	80036e0 <__retarget_lock_acquire_recursive>
 80042e2:	bf00      	nop
 80042e4:	2000013c 	.word	0x2000013c

080042e8 <__malloc_unlock>:
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <__malloc_unlock+0x8>)
 80042ea:	f7ff b9fa 	b.w	80036e2 <__retarget_lock_release_recursive>
 80042ee:	bf00      	nop
 80042f0:	2000013c 	.word	0x2000013c

080042f4 <_free_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4605      	mov	r5, r0
 80042f8:	2900      	cmp	r1, #0
 80042fa:	d040      	beq.n	800437e <_free_r+0x8a>
 80042fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004300:	1f0c      	subs	r4, r1, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	bfb8      	it	lt
 8004306:	18e4      	addlt	r4, r4, r3
 8004308:	f7ff ffe8 	bl	80042dc <__malloc_lock>
 800430c:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <_free_r+0x8c>)
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	b933      	cbnz	r3, 8004320 <_free_r+0x2c>
 8004312:	6063      	str	r3, [r4, #4]
 8004314:	6014      	str	r4, [r2, #0]
 8004316:	4628      	mov	r0, r5
 8004318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800431c:	f7ff bfe4 	b.w	80042e8 <__malloc_unlock>
 8004320:	42a3      	cmp	r3, r4
 8004322:	d908      	bls.n	8004336 <_free_r+0x42>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	1821      	adds	r1, r4, r0
 8004328:	428b      	cmp	r3, r1
 800432a:	bf01      	itttt	eq
 800432c:	6819      	ldreq	r1, [r3, #0]
 800432e:	685b      	ldreq	r3, [r3, #4]
 8004330:	1809      	addeq	r1, r1, r0
 8004332:	6021      	streq	r1, [r4, #0]
 8004334:	e7ed      	b.n	8004312 <_free_r+0x1e>
 8004336:	461a      	mov	r2, r3
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	b10b      	cbz	r3, 8004340 <_free_r+0x4c>
 800433c:	42a3      	cmp	r3, r4
 800433e:	d9fa      	bls.n	8004336 <_free_r+0x42>
 8004340:	6811      	ldr	r1, [r2, #0]
 8004342:	1850      	adds	r0, r2, r1
 8004344:	42a0      	cmp	r0, r4
 8004346:	d10b      	bne.n	8004360 <_free_r+0x6c>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	4401      	add	r1, r0
 800434c:	1850      	adds	r0, r2, r1
 800434e:	4283      	cmp	r3, r0
 8004350:	6011      	str	r1, [r2, #0]
 8004352:	d1e0      	bne.n	8004316 <_free_r+0x22>
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4401      	add	r1, r0
 800435a:	6011      	str	r1, [r2, #0]
 800435c:	6053      	str	r3, [r2, #4]
 800435e:	e7da      	b.n	8004316 <_free_r+0x22>
 8004360:	d902      	bls.n	8004368 <_free_r+0x74>
 8004362:	230c      	movs	r3, #12
 8004364:	602b      	str	r3, [r5, #0]
 8004366:	e7d6      	b.n	8004316 <_free_r+0x22>
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	1821      	adds	r1, r4, r0
 800436c:	428b      	cmp	r3, r1
 800436e:	bf01      	itttt	eq
 8004370:	6819      	ldreq	r1, [r3, #0]
 8004372:	685b      	ldreq	r3, [r3, #4]
 8004374:	1809      	addeq	r1, r1, r0
 8004376:	6021      	streq	r1, [r4, #0]
 8004378:	6063      	str	r3, [r4, #4]
 800437a:	6054      	str	r4, [r2, #4]
 800437c:	e7cb      	b.n	8004316 <_free_r+0x22>
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	20000140 	.word	0x20000140

08004384 <_read_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	2200      	movs	r2, #0
 800438e:	4d05      	ldr	r5, [pc, #20]	; (80043a4 <_read_r+0x20>)
 8004390:	602a      	str	r2, [r5, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	f7fc f8da 	bl	800054c <_read>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_read_r+0x1e>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_read_r+0x1e>
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	20000148 	.word	0x20000148

080043a8 <_fstat_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	2300      	movs	r3, #0
 80043ac:	4d06      	ldr	r5, [pc, #24]	; (80043c8 <_fstat_r+0x20>)
 80043ae:	4604      	mov	r4, r0
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	602b      	str	r3, [r5, #0]
 80043b6:	f7fc f8f1 	bl	800059c <_fstat>
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	d102      	bne.n	80043c4 <_fstat_r+0x1c>
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	b103      	cbz	r3, 80043c4 <_fstat_r+0x1c>
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	bd38      	pop	{r3, r4, r5, pc}
 80043c6:	bf00      	nop
 80043c8:	20000148 	.word	0x20000148

080043cc <_isatty_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	2300      	movs	r3, #0
 80043d0:	4d05      	ldr	r5, [pc, #20]	; (80043e8 <_isatty_r+0x1c>)
 80043d2:	4604      	mov	r4, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	f7fc f8ef 	bl	80005ba <_isatty>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_isatty_r+0x1a>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_isatty_r+0x1a>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20000148 	.word	0x20000148

080043ec <_init>:
 80043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ee:	bf00      	nop
 80043f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f2:	bc08      	pop	{r3}
 80043f4:	469e      	mov	lr, r3
 80043f6:	4770      	bx	lr

080043f8 <_fini>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	bf00      	nop
 80043fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fe:	bc08      	pop	{r3}
 8004400:	469e      	mov	lr, r3
 8004402:	4770      	bx	lr
