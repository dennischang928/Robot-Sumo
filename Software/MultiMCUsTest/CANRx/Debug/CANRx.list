
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080030ec  080030ec  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031c4  080031c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080031c4  080031c4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031c4  080031c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c8  080031c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  0800323c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800323c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ec3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001820  00000000  00000000  00028f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0002a780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  0002af98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b14  00000000  00000000  0002b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000900c  00000000  00000000  0004322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f95  00000000  00000000  0004c238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d21cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002800  00000000  00000000  000d2220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080030d4 	.word	0x080030d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080030d4 	.word	0x080030d4

0800014c <_write>:
static void	MX_GPIO_Init(void);
static void	MX_USART1_UART_Init(void);
static void	MX_CAN_Init(void);
/* USER CODE BEGIN PFP */
int	_write(int file, char *data, int len)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	// arbitrary timeout 1000
	HAL_StatusTypeDef status =
		HAL_UART_Transmit(&huart1, (uint8_t *)data, len, 1000);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000160:	68b9      	ldr	r1, [r7, #8]
 8000162:	4807      	ldr	r0, [pc, #28]	; (8000180 <_write+0x34>)
 8000164:	f001 fe70 	bl	8001e48 <HAL_UART_Transmit>
 8000168:	4603      	mov	r3, r0
 800016a:	75fb      	strb	r3, [r7, #23]

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 800016c:	7dfb      	ldrb	r3, [r7, #23]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d101      	bne.n	8000176 <_write+0x2a>
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	e000      	b.n	8000178 <_write+0x2c>
 8000176:	2300      	movs	r3, #0
}
 8000178:	4618      	mov	r0, r3
 800017a:	3718      	adds	r7, #24
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	200000b4 	.word	0x200000b4

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int	main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals,
		Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000188:	f000 fa7e 	bl	8000688 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800018c:	f000 f81e 	bl	80001cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000190:	f000 f8ba 	bl	8000308 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000194:	f000 f88e 	bl	80002b4 <MX_USART1_UART_Init>
	MX_CAN_Init();
 8000198:	f000 f854 	bl	8000244 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan); //Initialize CAN Bus
 800019c:	4807      	ldr	r0, [pc, #28]	; (80001bc <main+0x38>)
 800019e:	f000 fbd0 	bl	8000942 <HAL_CAN_Start>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0);
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80001a2:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <main+0x3c>)
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <main+0x40>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <main+0x38>)
 80001aa:	f000 fc0e 	bl	80009ca <HAL_CAN_GetRxMessage>
		printf("DataRecieved: %x\n\r", RxData[0]);
 80001ae:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <main+0x3c>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4619      	mov	r1, r3
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <main+0x44>)
 80001b6:	f001 fff9 	bl	80021ac <iprintf>
	{
 80001ba:	e7f2      	b.n	80001a2 <main+0x1e>
 80001bc:	2000008c 	.word	0x2000008c
 80001c0:	20000114 	.word	0x20000114
 80001c4:	200000fc 	.word	0x200000fc
 80001c8:	080030ec 	.word	0x080030ec

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void	SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b090      	sub	sp, #64	; 0x40
 80001d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 ffde 	bl	800219c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f2:	2301      	movs	r3, #1
 80001f4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f6:	2310      	movs	r3, #16
 80001f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001fa:	2300      	movs	r3, #0
 80001fc:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	4618      	mov	r0, r3
 8000204:	f001 f9c0 	bl	8001588 <HAL_RCC_OscConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x46>
	{
		Error_Handler();
 800020e:	f000 f891 	bl	8000334 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000212:	230f      	movs	r3, #15
 8000214:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000216:	2300      	movs	r3, #0
 8000218:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f001 fc2e 	bl	8001a8c <HAL_RCC_ClockConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000236:	f000 f87d 	bl	8000334 <Error_Handler>
	}
}
 800023a:	bf00      	nop
 800023c:	3740      	adds	r7, #64	; 0x40
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void	MX_CAN_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <MX_CAN_Init+0x68>)
 800024a:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <MX_CAN_Init+0x6c>)
 800024c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 15;
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <MX_CAN_Init+0x68>)
 8000250:	220f      	movs	r2, #15
 8000252:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <MX_CAN_Init+0x68>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <MX_CAN_Init+0x68>)
 800025c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000260:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000262:	4b12      	ldr	r3, [pc, #72]	; (80002ac <MX_CAN_Init+0x68>)
 8000264:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000268:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_CAN_Init+0x68>)
 800026c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000270:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_CAN_Init+0x68>)
 8000274:	2200      	movs	r2, #0
 8000276:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_CAN_Init+0x68>)
 800027a:	2200      	movs	r2, #0
 800027c:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <MX_CAN_Init+0x68>)
 8000280:	2200      	movs	r2, #0
 8000282:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_CAN_Init+0x68>)
 8000286:	2200      	movs	r2, #0
 8000288:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <MX_CAN_Init+0x68>)
 800028c:	2200      	movs	r2, #0
 800028e:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_CAN_Init+0x68>)
 8000292:	2200      	movs	r2, #0
 8000294:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_CAN_Init+0x68>)
 8000298:	f000 fa58 	bl	800074c <HAL_CAN_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_CAN_Init+0x62>
	{
		Error_Handler();
 80002a2:	f000 f847 	bl	8000334 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000008c 	.word	0x2000008c
 80002b0:	40006400 	.word	0x40006400

080002b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void	MX_USART1_UART_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <MX_USART1_UART_Init+0x50>)
 80002bc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002da:	220c      	movs	r2, #12
 80002dc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ec:	f001 fd5c 	bl	8001da8 <HAL_UART_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80002f6:	f000 f81d 	bl	8000334 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	200000b4 	.word	0x200000b4
 8000304:	40013800 	.word	0x40013800

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void	MX_GPIO_Init(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <MX_GPIO_Init+0x28>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a07      	ldr	r2, [pc, #28]	; (8000330 <MX_GPIO_Init+0x28>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6193      	str	r3, [r2, #24]
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <MX_GPIO_Init+0x28>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0304 	and.w	r3, r3, #4
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40021000 	.word	0x40021000

08000334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void	Error_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000338:	b672      	cpsid	i
}
 800033a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800033c:	e7fe      	b.n	800033c <Error_Handler+0x8>
	...

08000340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <HAL_MspInit+0x40>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <HAL_MspInit+0x40>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <HAL_MspInit+0x40>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <HAL_MspInit+0x40>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	4a07      	ldr	r2, [pc, #28]	; (8000380 <HAL_MspInit+0x40>)
 8000364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000368:	61d3      	str	r3, [r2, #28]
 800036a:	4b05      	ldr	r3, [pc, #20]	; (8000380 <HAL_MspInit+0x40>)
 800036c:	69db      	ldr	r3, [r3, #28]
 800036e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000

08000384 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a20      	ldr	r2, [pc, #128]	; (8000420 <HAL_CAN_MspInit+0x9c>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d139      	bne.n	8000418 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80003a4:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <HAL_CAN_MspInit+0xa0>)
 80003a6:	69db      	ldr	r3, [r3, #28]
 80003a8:	4a1e      	ldr	r2, [pc, #120]	; (8000424 <HAL_CAN_MspInit+0xa0>)
 80003aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ae:	61d3      	str	r3, [r2, #28]
 80003b0:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <HAL_CAN_MspInit+0xa0>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b19      	ldr	r3, [pc, #100]	; (8000424 <HAL_CAN_MspInit+0xa0>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a18      	ldr	r2, [pc, #96]	; (8000424 <HAL_CAN_MspInit+0xa0>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <HAL_CAN_MspInit+0xa0>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	4619      	mov	r1, r3
 80003e8:	480f      	ldr	r0, [pc, #60]	; (8000428 <HAL_CAN_MspInit+0xa4>)
 80003ea:	f000 ff49 	bl	8001280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003f4:	2302      	movs	r3, #2
 80003f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f8:	2303      	movs	r3, #3
 80003fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	4619      	mov	r1, r3
 8000402:	4809      	ldr	r0, [pc, #36]	; (8000428 <HAL_CAN_MspInit+0xa4>)
 8000404:	f000 ff3c 	bl	8001280 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	2100      	movs	r1, #0
 800040c:	2015      	movs	r0, #21
 800040e:	f000 ff00 	bl	8001212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000412:	2015      	movs	r0, #21
 8000414:	f000 ff19 	bl	800124a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000418:	bf00      	nop
 800041a:	3720      	adds	r7, #32
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40006400 	.word	0x40006400
 8000424:	40021000 	.word	0x40021000
 8000428:	40010800 	.word	0x40010800

0800042c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <HAL_UART_MspInit+0x8c>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d131      	bne.n	80004b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <HAL_UART_MspInit+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <HAL_UART_MspInit+0x90>)
 8000452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <HAL_UART_MspInit+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <HAL_UART_MspInit+0x90>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a14      	ldr	r2, [pc, #80]	; (80004bc <HAL_UART_MspInit+0x90>)
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <HAL_UART_MspInit+0x90>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800047c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000480:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000482:	2302      	movs	r3, #2
 8000484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	480b      	ldr	r0, [pc, #44]	; (80004c0 <HAL_UART_MspInit+0x94>)
 8000492:	f000 fef5 	bl	8001280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <HAL_UART_MspInit+0x94>)
 80004ac:	f000 fee8 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40013800 	.word	0x40013800
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <NMI_Handler+0x4>

080004ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <MemManage_Handler+0x4>

080004d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <BusFault_Handler+0x4>

080004dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <UsageFault_Handler+0x4>

080004e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050a:	f000 f903 	bl	8000714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <CAN1_RX1_IRQHandler+0x10>)
 800051a:	f000 fb77 	bl	8000c0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	2000008c 	.word	0x2000008c

08000528 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	e00a      	b.n	8000550 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800053a:	f3af 8000 	nop.w
 800053e:	4601      	mov	r1, r0
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	60ba      	str	r2, [r7, #8]
 8000546:	b2ca      	uxtb	r2, r1
 8000548:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	3301      	adds	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	429a      	cmp	r2, r3
 8000556:	dbf0      	blt.n	800053a <_read+0x12>
  }

  return len;
 8000558:	687b      	ldr	r3, [r7, #4]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000588:	605a      	str	r2, [r3, #4]
  return 0;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <_isatty>:

int _isatty(int file)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b085      	sub	sp, #20
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
	...

080005c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <_sbrk+0x5c>)
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <_sbrk+0x60>)
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <_sbrk+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <_sbrk+0x64>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <_sbrk+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d207      	bcs.n	8000604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f4:	f001 fda8 	bl	8002148 <__errno>
 80005f8:	4603      	mov	r3, r0
 80005fa:	220c      	movs	r2, #12
 80005fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000602:	e009      	b.n	8000618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	4a05      	ldr	r2, [pc, #20]	; (8000628 <_sbrk+0x64>)
 8000614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000616:	68fb      	ldr	r3, [r7, #12]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20005000 	.word	0x20005000
 8000624:	00000400 	.word	0x00000400
 8000628:	2000011c 	.word	0x2000011c
 800062c:	20000138 	.word	0x20000138

08000630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800063c:	f7ff fff8 	bl	8000630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000642:	490c      	ldr	r1, [pc, #48]	; (8000674 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000648:	e002      	b.n	8000650 <LoopCopyDataInit>

0800064a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000658:	4c09      	ldr	r4, [pc, #36]	; (8000680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800065c:	e001      	b.n	8000662 <LoopFillZerobss>

0800065e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000660:	3204      	adds	r2, #4

08000662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000664:	d3fb      	bcc.n	800065e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000666:	f001 fd75 	bl	8002154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f7ff fd8b 	bl	8000184 <main>
  bx lr
 800066e:	4770      	bx	lr
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000678:	080031cc 	.word	0x080031cc
  ldr r2, =_sbss
 800067c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000680:	20000134 	.word	0x20000134

08000684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_2_IRQHandler>
	...

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_Init+0x28>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_Init+0x28>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 fdaf 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069e:	200f      	movs	r0, #15
 80006a0:	f000 f808 	bl	80006b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a4:	f7ff fe4c 	bl	8000340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40022000 	.word	0x40022000

080006b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_InitTick+0x54>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_InitTick+0x58>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fdc7 	bl	8001266 <HAL_SYSTICK_Config>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e00e      	b.n	8000700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	d80a      	bhi.n	80006fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e8:	2200      	movs	r2, #0
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006f0:	f000 fd8f 	bl	8001212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <HAL_InitTick+0x5c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e000      	b.n	8000700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000000 	.word	0x20000000
 800070c:	20000008 	.word	0x20000008
 8000710:	20000004 	.word	0x20000004

08000714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_IncTick+0x1c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_IncTick+0x20>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4413      	add	r3, r2
 8000724:	4a03      	ldr	r2, [pc, #12]	; (8000734 <HAL_IncTick+0x20>)
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	20000008 	.word	0x20000008
 8000734:	20000120 	.word	0x20000120

08000738 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return uwTick;
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <HAL_GetTick+0x10>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000120 	.word	0x20000120

0800074c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e0ed      	b.n	800093a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d102      	bne.n	8000770 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fe0a 	bl	8000384 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f042 0201 	orr.w	r2, r2, #1
 800077e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000780:	f7ff ffda 	bl	8000738 <HAL_GetTick>
 8000784:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000786:	e012      	b.n	80007ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000788:	f7ff ffd6 	bl	8000738 <HAL_GetTick>
 800078c:	4602      	mov	r2, r0
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	2b0a      	cmp	r3, #10
 8000794:	d90b      	bls.n	80007ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2205      	movs	r2, #5
 80007a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e0c5      	b.n	800093a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0e5      	beq.n	8000788 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f022 0202 	bic.w	r2, r2, #2
 80007ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007cc:	f7ff ffb4 	bl	8000738 <HAL_GetTick>
 80007d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007d2:	e012      	b.n	80007fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007d4:	f7ff ffb0 	bl	8000738 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	2b0a      	cmp	r3, #10
 80007e0:	d90b      	bls.n	80007fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2205      	movs	r2, #5
 80007f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e09f      	b.n	800093a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1e5      	bne.n	80007d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7e1b      	ldrb	r3, [r3, #24]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d108      	bne.n	8000822 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	e007      	b.n	8000832 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000830:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7e5b      	ldrb	r3, [r3, #25]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d108      	bne.n	800084c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e007      	b.n	800085c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800085a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7e9b      	ldrb	r3, [r3, #26]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d108      	bne.n	8000876 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f042 0220 	orr.w	r2, r2, #32
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	e007      	b.n	8000886 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f022 0220 	bic.w	r2, r2, #32
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7edb      	ldrb	r3, [r3, #27]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d108      	bne.n	80008a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f022 0210 	bic.w	r2, r2, #16
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	e007      	b.n	80008b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f042 0210 	orr.w	r2, r2, #16
 80008ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7f1b      	ldrb	r3, [r3, #28]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d108      	bne.n	80008ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f042 0208 	orr.w	r2, r2, #8
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	e007      	b.n	80008da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f022 0208 	bic.w	r2, r2, #8
 80008d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7f5b      	ldrb	r3, [r3, #29]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d108      	bne.n	80008f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f042 0204 	orr.w	r2, r2, #4
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	e007      	b.n	8000904 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f022 0204 	bic.w	r2, r2, #4
 8000902:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	431a      	orrs	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	431a      	orrs	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	ea42 0103 	orr.w	r1, r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	1e5a      	subs	r2, r3, #1
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	430a      	orrs	r2, r1
 8000928:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2201      	movs	r2, #1
 8000934:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b01      	cmp	r3, #1
 8000954:	d12e      	bne.n	80009b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2202      	movs	r2, #2
 800095a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0201 	bic.w	r2, r2, #1
 800096c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800096e:	f7ff fee3 	bl	8000738 <HAL_GetTick>
 8000972:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000974:	e012      	b.n	800099c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000976:	f7ff fedf 	bl	8000738 <HAL_GetTick>
 800097a:	4602      	mov	r2, r0
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	2b0a      	cmp	r3, #10
 8000982:	d90b      	bls.n	800099c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000988:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2205      	movs	r2, #5
 8000994:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e012      	b.n	80009c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1e5      	bne.n	8000976 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	e006      	b.n	80009c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
  }
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80009ca:	b480      	push	{r7}
 80009cc:	b087      	sub	sp, #28
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009de:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d003      	beq.n	80009ee <HAL_CAN_GetRxMessage+0x24>
 80009e6:	7dfb      	ldrb	r3, [r7, #23]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	f040 8103 	bne.w	8000bf4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10e      	bne.n	8000a12 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	f003 0303 	and.w	r3, r3, #3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d116      	bne.n	8000a30 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e0f7      	b.n	8000c02 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d107      	bne.n	8000a30 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e0e8      	b.n	8000c02 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	331b      	adds	r3, #27
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	4413      	add	r3, r2
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0204 	and.w	r2, r3, #4
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10c      	bne.n	8000a68 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	331b      	adds	r3, #27
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	4413      	add	r3, r2
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	0d5b      	lsrs	r3, r3, #21
 8000a5e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	e00b      	b.n	8000a80 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	331b      	adds	r3, #27
 8000a70:	011b      	lsls	r3, r3, #4
 8000a72:	4413      	add	r3, r2
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	331b      	adds	r3, #27
 8000a88:	011b      	lsls	r3, r3, #4
 8000a8a:	4413      	add	r3, r2
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0202 	and.w	r2, r3, #2
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	331b      	adds	r3, #27
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	4413      	add	r3, r2
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	e00b      	b.n	8000ace <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	331b      	adds	r3, #27
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	4413      	add	r3, r2
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 020f 	and.w	r2, r3, #15
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	331b      	adds	r3, #27
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	4413      	add	r3, r2
 8000ada:	3304      	adds	r3, #4
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	331b      	adds	r3, #27
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	4413      	add	r3, r2
 8000af2:	3304      	adds	r3, #4
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	0c1b      	lsrs	r3, r3, #16
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	011b      	lsls	r3, r3, #4
 8000b06:	4413      	add	r3, r2
 8000b08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	4413      	add	r3, r2
 8000b1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	0a1a      	lsrs	r2, r3, #8
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	4413      	add	r3, r2
 8000b38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	0c1a      	lsrs	r2, r3, #16
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	3302      	adds	r3, #2
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	011b      	lsls	r3, r3, #4
 8000b50:	4413      	add	r3, r2
 8000b52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	0e1a      	lsrs	r2, r3, #24
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	3303      	adds	r3, #3
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	011b      	lsls	r3, r3, #4
 8000b6a:	4413      	add	r3, r2
 8000b6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	3304      	adds	r3, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	4413      	add	r3, r2
 8000b84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	0a1a      	lsrs	r2, r3, #8
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	3305      	adds	r3, #5
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	0c1a      	lsrs	r2, r3, #16
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	3306      	adds	r3, #6
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	011b      	lsls	r3, r3, #4
 8000bb6:	4413      	add	r3, r2
 8000bb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	0e1a      	lsrs	r2, r3, #24
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	3307      	adds	r3, #7
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d108      	bne.n	8000be0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f042 0220 	orr.w	r2, r2, #32
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	e007      	b.n	8000bf0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0220 	orr.w	r2, r2, #32
 8000bee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e006      	b.n	8000c02 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
  }
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	371c      	adds	r7, #28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d07c      	beq.n	8000d4c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d023      	beq.n	8000ca4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2201      	movs	r2, #1
 8000c62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 f983 	bl	8000f7a <HAL_CAN_TxMailbox0CompleteCallback>
 8000c74:	e016      	b.n	8000ca4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d004      	beq.n	8000c8a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
 8000c88:	e00c      	b.n	8000ca4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d004      	beq.n	8000c9e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c9c:	e002      	b.n	8000ca4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 f986 	bl	8000fb0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d024      	beq.n	8000cf8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 f962 	bl	8000f8c <HAL_CAN_TxMailbox1CompleteCallback>
 8000cc8:	e016      	b.n	8000cf8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d004      	beq.n	8000cde <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
 8000cdc:	e00c      	b.n	8000cf8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d004      	beq.n	8000cf2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf0:	e002      	b.n	8000cf8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f965 	bl	8000fc2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d024      	beq.n	8000d4c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f941 	bl	8000f9e <HAL_CAN_TxMailbox2CompleteCallback>
 8000d1c:	e016      	b.n	8000d4c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d004      	beq.n	8000d32 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d30:	e00c      	b.n	8000d4c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d004      	beq.n	8000d46 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
 8000d44:	e002      	b.n	8000d4c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 f944 	bl	8000fd4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00c      	beq.n	8000d70 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d007      	beq.n	8000d70 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00b      	beq.n	8000d92 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2208      	movs	r2, #8
 8000d8a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 f933 	bl	8000ff8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000d92:	6a3b      	ldr	r3, [r7, #32]
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d009      	beq.n	8000db0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 f91b 	bl	8000fe6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00c      	beq.n	8000dd4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d007      	beq.n	8000dd4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
 8000dd6:	f003 0320 	and.w	r3, r3, #32
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00b      	beq.n	8000df6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d006      	beq.n	8000df6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2208      	movs	r2, #8
 8000dee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 f913 	bl	800101c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d009      	beq.n	8000e14 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f8fb 	bl	800100a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00b      	beq.n	8000e36 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f8fc 	bl	800102e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000e36:	6a3b      	ldr	r3, [r7, #32]
 8000e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00b      	beq.n	8000e58 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d006      	beq.n	8000e58 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2208      	movs	r2, #8
 8000e50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f8f4 	bl	8001040 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000e58:	6a3b      	ldr	r3, [r7, #32]
 8000e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d07b      	beq.n	8000f5a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d072      	beq.n	8000f52 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d008      	beq.n	8000e88 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d008      	beq.n	8000ea4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d008      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d043      	beq.n	8000f52 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d03e      	beq.n	8000f52 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000eda:	2b60      	cmp	r3, #96	; 0x60
 8000edc:	d02b      	beq.n	8000f36 <HAL_CAN_IRQHandler+0x32a>
 8000ede:	2b60      	cmp	r3, #96	; 0x60
 8000ee0:	d82e      	bhi.n	8000f40 <HAL_CAN_IRQHandler+0x334>
 8000ee2:	2b50      	cmp	r3, #80	; 0x50
 8000ee4:	d022      	beq.n	8000f2c <HAL_CAN_IRQHandler+0x320>
 8000ee6:	2b50      	cmp	r3, #80	; 0x50
 8000ee8:	d82a      	bhi.n	8000f40 <HAL_CAN_IRQHandler+0x334>
 8000eea:	2b40      	cmp	r3, #64	; 0x40
 8000eec:	d019      	beq.n	8000f22 <HAL_CAN_IRQHandler+0x316>
 8000eee:	2b40      	cmp	r3, #64	; 0x40
 8000ef0:	d826      	bhi.n	8000f40 <HAL_CAN_IRQHandler+0x334>
 8000ef2:	2b30      	cmp	r3, #48	; 0x30
 8000ef4:	d010      	beq.n	8000f18 <HAL_CAN_IRQHandler+0x30c>
 8000ef6:	2b30      	cmp	r3, #48	; 0x30
 8000ef8:	d822      	bhi.n	8000f40 <HAL_CAN_IRQHandler+0x334>
 8000efa:	2b10      	cmp	r3, #16
 8000efc:	d002      	beq.n	8000f04 <HAL_CAN_IRQHandler+0x2f8>
 8000efe:	2b20      	cmp	r3, #32
 8000f00:	d005      	beq.n	8000f0e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000f02:	e01d      	b.n	8000f40 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f0c:	e019      	b.n	8000f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	f043 0310 	orr.w	r3, r3, #16
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f16:	e014      	b.n	8000f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	f043 0320 	orr.w	r3, r3, #32
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f20:	e00f      	b.n	8000f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f2a:	e00a      	b.n	8000f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f34:	e005      	b.n	8000f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f3e:	e000      	b.n	8000f42 <HAL_CAN_IRQHandler+0x336>
            break;
 8000f40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	699a      	ldr	r2, [r3, #24]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2204      	movs	r2, #4
 8000f58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d008      	beq.n	8000f72 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f870 	bl	8001052 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db0b      	blt.n	80010f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 021f 	and.w	r2, r3, #31
 80010e0:	4906      	ldr	r1, [pc, #24]	; (80010fc <__NVIC_EnableIRQ+0x34>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	2001      	movs	r0, #1
 80010ea:	fa00 f202 	lsl.w	r2, r0, r2
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100

08001100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	db0a      	blt.n	800112a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	490c      	ldr	r1, [pc, #48]	; (800114c <__NVIC_SetPriority+0x4c>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001128:	e00a      	b.n	8001140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <__NVIC_SetPriority+0x50>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3b04      	subs	r3, #4
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	440b      	add	r3, r1
 800113e:	761a      	strb	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f1c3 0307 	rsb	r3, r3, #7
 800116e:	2b04      	cmp	r3, #4
 8001170:	bf28      	it	cs
 8001172:	2304      	movcs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3304      	adds	r3, #4
 800117a:	2b06      	cmp	r3, #6
 800117c:	d902      	bls.n	8001184 <NVIC_EncodePriority+0x30>
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3b03      	subs	r3, #3
 8001182:	e000      	b.n	8001186 <NVIC_EncodePriority+0x32>
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	4313      	orrs	r3, r2
         );
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c8:	d301      	bcc.n	80011ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <SysTick_Config+0x40>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d6:	210f      	movs	r1, #15
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011dc:	f7ff ff90 	bl	8001100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <SysTick_Config+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <SysTick_Config+0x40>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	e000e010 	.word	0xe000e010

080011fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff2d 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001224:	f7ff ff42 	bl	80010ac <__NVIC_GetPriorityGrouping>
 8001228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff90 	bl	8001154 <NVIC_EncodePriority>
 8001234:	4602      	mov	r2, r0
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff5f 	bl	8001100 <__NVIC_SetPriority>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff35 	bl	80010c8 <__NVIC_EnableIRQ>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffa2 	bl	80011b8 <SysTick_Config>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b08b      	sub	sp, #44	; 0x2c
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	e169      	b.n	8001568 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001294:	2201      	movs	r2, #1
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	f040 8158 	bne.w	8001562 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a9a      	ldr	r2, [pc, #616]	; (8001520 <HAL_GPIO_Init+0x2a0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d05e      	beq.n	800137a <HAL_GPIO_Init+0xfa>
 80012bc:	4a98      	ldr	r2, [pc, #608]	; (8001520 <HAL_GPIO_Init+0x2a0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d875      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012c2:	4a98      	ldr	r2, [pc, #608]	; (8001524 <HAL_GPIO_Init+0x2a4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d058      	beq.n	800137a <HAL_GPIO_Init+0xfa>
 80012c8:	4a96      	ldr	r2, [pc, #600]	; (8001524 <HAL_GPIO_Init+0x2a4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d86f      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012ce:	4a96      	ldr	r2, [pc, #600]	; (8001528 <HAL_GPIO_Init+0x2a8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d052      	beq.n	800137a <HAL_GPIO_Init+0xfa>
 80012d4:	4a94      	ldr	r2, [pc, #592]	; (8001528 <HAL_GPIO_Init+0x2a8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d869      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012da:	4a94      	ldr	r2, [pc, #592]	; (800152c <HAL_GPIO_Init+0x2ac>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d04c      	beq.n	800137a <HAL_GPIO_Init+0xfa>
 80012e0:	4a92      	ldr	r2, [pc, #584]	; (800152c <HAL_GPIO_Init+0x2ac>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d863      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012e6:	4a92      	ldr	r2, [pc, #584]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d046      	beq.n	800137a <HAL_GPIO_Init+0xfa>
 80012ec:	4a90      	ldr	r2, [pc, #576]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d85d      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012f2:	2b12      	cmp	r3, #18
 80012f4:	d82a      	bhi.n	800134c <HAL_GPIO_Init+0xcc>
 80012f6:	2b12      	cmp	r3, #18
 80012f8:	d859      	bhi.n	80013ae <HAL_GPIO_Init+0x12e>
 80012fa:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <HAL_GPIO_Init+0x80>)
 80012fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001300:	0800137b 	.word	0x0800137b
 8001304:	08001355 	.word	0x08001355
 8001308:	08001367 	.word	0x08001367
 800130c:	080013a9 	.word	0x080013a9
 8001310:	080013af 	.word	0x080013af
 8001314:	080013af 	.word	0x080013af
 8001318:	080013af 	.word	0x080013af
 800131c:	080013af 	.word	0x080013af
 8001320:	080013af 	.word	0x080013af
 8001324:	080013af 	.word	0x080013af
 8001328:	080013af 	.word	0x080013af
 800132c:	080013af 	.word	0x080013af
 8001330:	080013af 	.word	0x080013af
 8001334:	080013af 	.word	0x080013af
 8001338:	080013af 	.word	0x080013af
 800133c:	080013af 	.word	0x080013af
 8001340:	080013af 	.word	0x080013af
 8001344:	0800135d 	.word	0x0800135d
 8001348:	08001371 	.word	0x08001371
 800134c:	4a79      	ldr	r2, [pc, #484]	; (8001534 <HAL_GPIO_Init+0x2b4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001352:	e02c      	b.n	80013ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	623b      	str	r3, [r7, #32]
          break;
 800135a:	e029      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	3304      	adds	r3, #4
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e024      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	3308      	adds	r3, #8
 800136c:	623b      	str	r3, [r7, #32]
          break;
 800136e:	e01f      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	330c      	adds	r3, #12
 8001376:	623b      	str	r3, [r7, #32]
          break;
 8001378:	e01a      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001382:	2304      	movs	r3, #4
 8001384:	623b      	str	r3, [r7, #32]
          break;
 8001386:	e013      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d105      	bne.n	800139c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001390:	2308      	movs	r3, #8
 8001392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	611a      	str	r2, [r3, #16]
          break;
 800139a:	e009      	b.n	80013b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800139c:	2308      	movs	r3, #8
 800139e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	615a      	str	r2, [r3, #20]
          break;
 80013a6:	e003      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x130>
          break;
 80013ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2bff      	cmp	r3, #255	; 0xff
 80013b4:	d801      	bhi.n	80013ba <HAL_GPIO_Init+0x13a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	e001      	b.n	80013be <HAL_GPIO_Init+0x13e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3304      	adds	r3, #4
 80013be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2bff      	cmp	r3, #255	; 0xff
 80013c4:	d802      	bhi.n	80013cc <HAL_GPIO_Init+0x14c>
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	e002      	b.n	80013d2 <HAL_GPIO_Init+0x152>
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	3b08      	subs	r3, #8
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	210f      	movs	r1, #15
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	401a      	ands	r2, r3
 80013e4:	6a39      	ldr	r1, [r7, #32]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	431a      	orrs	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80b1 	beq.w	8001562 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <HAL_GPIO_Init+0x2b8>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a4c      	ldr	r2, [pc, #304]	; (8001538 <HAL_GPIO_Init+0x2b8>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_GPIO_Init+0x2b8>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001418:	4a48      	ldr	r2, [pc, #288]	; (800153c <HAL_GPIO_Init+0x2bc>)
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a40      	ldr	r2, [pc, #256]	; (8001540 <HAL_GPIO_Init+0x2c0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d013      	beq.n	800146c <HAL_GPIO_Init+0x1ec>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a3f      	ldr	r2, [pc, #252]	; (8001544 <HAL_GPIO_Init+0x2c4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d00d      	beq.n	8001468 <HAL_GPIO_Init+0x1e8>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3e      	ldr	r2, [pc, #248]	; (8001548 <HAL_GPIO_Init+0x2c8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d007      	beq.n	8001464 <HAL_GPIO_Init+0x1e4>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a3d      	ldr	r2, [pc, #244]	; (800154c <HAL_GPIO_Init+0x2cc>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_GPIO_Init+0x1e0>
 800145c:	2303      	movs	r3, #3
 800145e:	e006      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001460:	2304      	movs	r3, #4
 8001462:	e004      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001464:	2302      	movs	r3, #2
 8001466:	e002      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 800146c:	2300      	movs	r3, #0
 800146e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4093      	lsls	r3, r2
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800147e:	492f      	ldr	r1, [pc, #188]	; (800153c <HAL_GPIO_Init+0x2bc>)
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d006      	beq.n	80014a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	492c      	ldr	r1, [pc, #176]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4928      	ldr	r1, [pc, #160]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c0:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	4922      	ldr	r1, [pc, #136]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60cb      	str	r3, [r1, #12]
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	491e      	ldr	r1, [pc, #120]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014d8:	4013      	ands	r3, r2
 80014da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4918      	ldr	r1, [pc, #96]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4914      	ldr	r1, [pc, #80]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 8001500:	4013      	ands	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d021      	beq.n	8001554 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	490e      	ldr	r1, [pc, #56]	; (8001550 <HAL_GPIO_Init+0x2d0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	600b      	str	r3, [r1, #0]
 800151c:	e021      	b.n	8001562 <HAL_GPIO_Init+0x2e2>
 800151e:	bf00      	nop
 8001520:	10320000 	.word	0x10320000
 8001524:	10310000 	.word	0x10310000
 8001528:	10220000 	.word	0x10220000
 800152c:	10210000 	.word	0x10210000
 8001530:	10120000 	.word	0x10120000
 8001534:	10110000 	.word	0x10110000
 8001538:	40021000 	.word	0x40021000
 800153c:	40010000 	.word	0x40010000
 8001540:	40010800 	.word	0x40010800
 8001544:	40010c00 	.word	0x40010c00
 8001548:	40011000 	.word	0x40011000
 800154c:	40011400 	.word	0x40011400
 8001550:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_GPIO_Init+0x304>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	43db      	mvns	r3, r3
 800155c:	4909      	ldr	r1, [pc, #36]	; (8001584 <HAL_GPIO_Init+0x304>)
 800155e:	4013      	ands	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	3301      	adds	r3, #1
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	f47f ae8e 	bne.w	8001294 <HAL_GPIO_Init+0x14>
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	372c      	adds	r7, #44	; 0x2c
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e272      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8087 	beq.w	80016b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a8:	4b92      	ldr	r3, [pc, #584]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d00c      	beq.n	80015ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b4:	4b8f      	ldr	r3, [pc, #572]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d112      	bne.n	80015e6 <HAL_RCC_OscConfig+0x5e>
 80015c0:	4b8c      	ldr	r3, [pc, #560]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d10b      	bne.n	80015e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ce:	4b89      	ldr	r3, [pc, #548]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d06c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x12c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d168      	bne.n	80016b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e24c      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x76>
 80015f0:	4b80      	ldr	r3, [pc, #512]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a7f      	ldr	r2, [pc, #508]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e02e      	b.n	800165c <HAL_RCC_OscConfig+0xd4>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x98>
 8001606:	4b7b      	ldr	r3, [pc, #492]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a7a      	ldr	r2, [pc, #488]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800160c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b78      	ldr	r3, [pc, #480]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a77      	ldr	r2, [pc, #476]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e01d      	b.n	800165c <HAL_RCC_OscConfig+0xd4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0xbc>
 800162a:	4b72      	ldr	r3, [pc, #456]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a71      	ldr	r2, [pc, #452]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b6f      	ldr	r3, [pc, #444]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6e      	ldr	r2, [pc, #440]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xd4>
 8001644:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a6a      	ldr	r2, [pc, #424]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b68      	ldr	r3, [pc, #416]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a67      	ldr	r2, [pc, #412]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff f868 	bl	8000738 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff f864 	bl	8000738 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e200      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0xe4>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff f854 	bl	8000738 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff f850 	bl	8000738 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1ec      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x10c>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d063      	beq.n	800178a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016c2:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ce:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d11c      	bne.n	8001714 <HAL_RCC_OscConfig+0x18c>
 80016da:	4b46      	ldr	r3, [pc, #280]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d116      	bne.n	8001714 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_RCC_OscConfig+0x176>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e1c0      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4939      	ldr	r1, [pc, #228]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	e03a      	b.n	800178a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800171c:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <HAL_RCC_OscConfig+0x270>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff f809 	bl	8000738 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff f805 	bl	8000738 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e1a1      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4927      	ldr	r1, [pc, #156]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
 800175c:	e015      	b.n	800178a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_RCC_OscConfig+0x270>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7fe ffe8 	bl	8000738 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176c:	f7fe ffe4 	bl	8000738 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e180      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d03a      	beq.n	800180c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d019      	beq.n	80017d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_RCC_OscConfig+0x274>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7fe ffc8 	bl	8000738 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ac:	f7fe ffc4 	bl	8000738 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e160      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f000 face 	bl	8001d6c <RCC_Delay>
 80017d0:	e01c      	b.n	800180c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_RCC_OscConfig+0x274>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7fe ffae 	bl	8000738 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017de:	e00f      	b.n	8001800 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7fe ffaa 	bl	8000738 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d908      	bls.n	8001800 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e146      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	42420000 	.word	0x42420000
 80017fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	4b92      	ldr	r3, [pc, #584]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1e9      	bne.n	80017e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80a6 	beq.w	8001966 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181e:	4b8b      	ldr	r3, [pc, #556]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a87      	ldr	r2, [pc, #540]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b85      	ldr	r3, [pc, #532]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b82      	ldr	r3, [pc, #520]	; (8001a50 <HAL_RCC_OscConfig+0x4c8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b7f      	ldr	r3, [pc, #508]	; (8001a50 <HAL_RCC_OscConfig+0x4c8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a7e      	ldr	r2, [pc, #504]	; (8001a50 <HAL_RCC_OscConfig+0x4c8>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7fe ff6b 	bl	8000738 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7fe ff67 	bl	8000738 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b64      	cmp	r3, #100	; 0x64
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e103      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b75      	ldr	r3, [pc, #468]	; (8001a50 <HAL_RCC_OscConfig+0x4c8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x312>
 800188c:	4b6f      	ldr	r3, [pc, #444]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a6e      	ldr	r2, [pc, #440]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	e02d      	b.n	80018f6 <HAL_RCC_OscConfig+0x36e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x334>
 80018a2:	4b6a      	ldr	r3, [pc, #424]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a69      	ldr	r2, [pc, #420]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6213      	str	r3, [r2, #32]
 80018ae:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a66      	ldr	r2, [pc, #408]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	f023 0304 	bic.w	r3, r3, #4
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	e01c      	b.n	80018f6 <HAL_RCC_OscConfig+0x36e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d10c      	bne.n	80018de <HAL_RCC_OscConfig+0x356>
 80018c4:	4b61      	ldr	r3, [pc, #388]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a60      	ldr	r2, [pc, #384]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	4b5e      	ldr	r3, [pc, #376]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a5d      	ldr	r2, [pc, #372]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	e00b      	b.n	80018f6 <HAL_RCC_OscConfig+0x36e>
 80018de:	4b5b      	ldr	r3, [pc, #364]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a5a      	ldr	r2, [pc, #360]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6213      	str	r3, [r2, #32]
 80018ea:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a57      	ldr	r2, [pc, #348]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d015      	beq.n	800192a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fe:	f7fe ff1b 	bl	8000738 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001904:	e00a      	b.n	800191c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7fe ff17 	bl	8000738 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f241 3288 	movw	r2, #5000	; 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e0b1      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	4b4b      	ldr	r3, [pc, #300]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ee      	beq.n	8001906 <HAL_RCC_OscConfig+0x37e>
 8001928:	e014      	b.n	8001954 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7fe ff05 	bl	8000738 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7fe ff01 	bl	8000738 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e09b      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ee      	bne.n	8001932 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d105      	bne.n	8001966 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195a:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a3b      	ldr	r2, [pc, #236]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 8001960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001964:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8087 	beq.w	8001a7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001970:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d061      	beq.n	8001a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d146      	bne.n	8001a12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001984:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <HAL_RCC_OscConfig+0x4cc>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7fe fed5 	bl	8000738 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7fe fed1 	bl	8000738 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e06d      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b8:	d108      	bne.n	80019cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	4921      	ldr	r1, [pc, #132]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a19      	ldr	r1, [r3, #32]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	430b      	orrs	r3, r1
 80019de:	491b      	ldr	r1, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x4cc>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7fe fea5 	bl	8000738 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f2:	f7fe fea1 	bl	8000738 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e03d      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x46a>
 8001a10:	e035      	b.n	8001a7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_RCC_OscConfig+0x4cc>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7fe fe8e 	bl	8000738 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7fe fe8a 	bl	8000738 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e026      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x498>
 8001a3e:	e01e      	b.n	8001a7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e019      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40007000 	.word	0x40007000
 8001a54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_OscConfig+0x500>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000

08001a8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0d0      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b6a      	ldr	r3, [pc, #424]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d910      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 0207 	bic.w	r2, r3, #7
 8001ab6:	4965      	ldr	r1, [pc, #404]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0b8      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae8:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001af2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a52      	ldr	r2, [pc, #328]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0c:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	494d      	ldr	r1, [pc, #308]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d040      	beq.n	8001bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d115      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e07f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e073      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e06b      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6a:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4936      	ldr	r1, [pc, #216]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b7c:	f7fe fddc 	bl	8000738 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7fe fdd8 	bl	8000738 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e053      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 020c 	and.w	r2, r3, #12
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1eb      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d210      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 0207 	bic.w	r2, r3, #7
 8001bc2:	4922      	ldr	r1, [pc, #136]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e032      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4916      	ldr	r1, [pc, #88]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	490e      	ldr	r1, [pc, #56]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c1a:	f000 f821 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	490a      	ldr	r1, [pc, #40]	; (8001c54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2c:	5ccb      	ldrb	r3, [r1, r3]
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1cc>)
 8001c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1d0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fd3a 	bl	80006b4 <HAL_InitTick>

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40022000 	.word	0x40022000
 8001c50:	40021000 	.word	0x40021000
 8001c54:	08003100 	.word	0x08003100
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d002      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x30>
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x36>
 8001c8e:	e027      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c92:	613b      	str	r3, [r7, #16]
      break;
 8001c94:	e027      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	0c9b      	lsrs	r3, r3, #18
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ca0:	5cd3      	ldrb	r3, [r2, r3]
 8001ca2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d010      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	0c5b      	lsrs	r3, r3, #17
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc2:	fb03 f202 	mul.w	r2, r3, r2
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e004      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cd4:	fb02 f303 	mul.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	613b      	str	r3, [r7, #16]
      break;
 8001cde:	e002      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ce2:	613b      	str	r3, [r7, #16]
      break;
 8001ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce6:	693b      	ldr	r3, [r7, #16]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	007a1200 	.word	0x007a1200
 8001cfc:	08003118 	.word	0x08003118
 8001d00:	08003128 	.word	0x08003128
 8001d04:	003d0900 	.word	0x003d0900

08001d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d0c:	4b02      	ldr	r3, [pc, #8]	; (8001d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	20000000 	.word	0x20000000

08001d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d20:	f7ff fff2 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08003110 	.word	0x08003110

08001d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d48:	f7ff ffde 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	0adb      	lsrs	r3, r3, #11
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4903      	ldr	r1, [pc, #12]	; (8001d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08003110 	.word	0x08003110

08001d6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <RCC_Delay+0x34>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <RCC_Delay+0x38>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	0a5b      	lsrs	r3, r3, #9
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d88:	bf00      	nop
  }
  while (Delay --);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1e5a      	subs	r2, r3, #1
 8001d8e:	60fa      	str	r2, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f9      	bne.n	8001d88 <RCC_Delay+0x1c>
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	20000000 	.word	0x20000000
 8001da4:	10624dd3 	.word	0x10624dd3

08001da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e042      	b.n	8001e40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe fb2c 	bl	800042c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2224      	movs	r2, #36	; 0x24
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f91d 	bl	800202c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d16d      	bne.n	8001f44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_UART_Transmit+0x2c>
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e066      	b.n	8001f46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2221      	movs	r2, #33	; 0x21
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e86:	f7fe fc57 	bl	8000738 <HAL_GetTick>
 8001e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	88fa      	ldrh	r2, [r7, #6]
 8001e90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	88fa      	ldrh	r2, [r7, #6]
 8001e96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea0:	d108      	bne.n	8001eb4 <HAL_UART_Transmit+0x6c>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d104      	bne.n	8001eb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	e003      	b.n	8001ebc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ebc:	e02a      	b.n	8001f14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f840 	bl	8001f4e <UART_WaitOnFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e036      	b.n	8001f46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10b      	bne.n	8001ef6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e007      	b.n	8001f06 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	3301      	adds	r3, #1
 8001f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1cf      	bne.n	8001ebe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2200      	movs	r2, #0
 8001f26:	2140      	movs	r1, #64	; 0x40
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f810 	bl	8001f4e <UART_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e006      	b.n	8001f46 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
  }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b090      	sub	sp, #64	; 0x40
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f5e:	e050      	b.n	8002002 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f66:	d04c      	beq.n	8002002 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <UART_WaitOnFlagUntilTimeout+0x30>
 8001f6e:	f7fe fbe3 	bl	8000738 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d241      	bcs.n	8002002 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	330c      	adds	r3, #12
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f88:	e853 3f00 	ldrex	r3, [r3]
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	330c      	adds	r3, #12
 8001f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f9e:	637a      	str	r2, [r7, #52]	; 0x34
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa6:	e841 2300 	strex	r3, r2, [r1]
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1e5      	bne.n	8001f7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3314      	adds	r3, #20
 8001fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	e853 3f00 	ldrex	r3, [r3]
 8001fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3314      	adds	r3, #20
 8001fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fd2:	623a      	str	r2, [r7, #32]
 8001fd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd6:	69f9      	ldr	r1, [r7, #28]
 8001fd8:	6a3a      	ldr	r2, [r7, #32]
 8001fda:	e841 2300 	strex	r3, r2, [r1]
 8001fde:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1e5      	bne.n	8001fb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e00f      	b.n	8002022 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4013      	ands	r3, r2
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	429a      	cmp	r2, r3
 8002010:	bf0c      	ite	eq
 8002012:	2301      	moveq	r3, #1
 8002014:	2300      	movne	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	429a      	cmp	r2, r3
 800201e:	d09f      	beq.n	8001f60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3740      	adds	r7, #64	; 0x40
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002066:	f023 030c 	bic.w	r3, r3, #12
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	430b      	orrs	r3, r1
 8002072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <UART_SetConfig+0x114>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d103      	bne.n	800209c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002094:	f7ff fe56 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	e002      	b.n	80020a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800209c:	f7ff fe3e 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 80020a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	009a      	lsls	r2, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	4a22      	ldr	r2, [pc, #136]	; (8002144 <UART_SetConfig+0x118>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	0119      	lsls	r1, r3, #4
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	009a      	lsls	r2, r3, #2
 80020cc:	441a      	add	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <UART_SetConfig+0x118>)
 80020da:	fba3 0302 	umull	r0, r3, r3, r2
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2064      	movs	r0, #100	; 0x64
 80020e2:	fb00 f303 	mul.w	r3, r0, r3
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	3332      	adds	r3, #50	; 0x32
 80020ec:	4a15      	ldr	r2, [pc, #84]	; (8002144 <UART_SetConfig+0x118>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f8:	4419      	add	r1, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	009a      	lsls	r2, r3, #2
 8002104:	441a      	add	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <UART_SetConfig+0x118>)
 8002112:	fba3 0302 	umull	r0, r3, r3, r2
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2064      	movs	r0, #100	; 0x64
 800211a:	fb00 f303 	mul.w	r3, r0, r3
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	3332      	adds	r3, #50	; 0x32
 8002124:	4a07      	ldr	r2, [pc, #28]	; (8002144 <UART_SetConfig+0x118>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	f003 020f 	and.w	r2, r3, #15
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	440a      	add	r2, r1
 8002136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40013800 	.word	0x40013800
 8002144:	51eb851f 	.word	0x51eb851f

08002148 <__errno>:
 8002148:	4b01      	ldr	r3, [pc, #4]	; (8002150 <__errno+0x8>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	2000000c 	.word	0x2000000c

08002154 <__libc_init_array>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	2600      	movs	r6, #0
 8002158:	4d0c      	ldr	r5, [pc, #48]	; (800218c <__libc_init_array+0x38>)
 800215a:	4c0d      	ldr	r4, [pc, #52]	; (8002190 <__libc_init_array+0x3c>)
 800215c:	1b64      	subs	r4, r4, r5
 800215e:	10a4      	asrs	r4, r4, #2
 8002160:	42a6      	cmp	r6, r4
 8002162:	d109      	bne.n	8002178 <__libc_init_array+0x24>
 8002164:	f000 ffb6 	bl	80030d4 <_init>
 8002168:	2600      	movs	r6, #0
 800216a:	4d0a      	ldr	r5, [pc, #40]	; (8002194 <__libc_init_array+0x40>)
 800216c:	4c0a      	ldr	r4, [pc, #40]	; (8002198 <__libc_init_array+0x44>)
 800216e:	1b64      	subs	r4, r4, r5
 8002170:	10a4      	asrs	r4, r4, #2
 8002172:	42a6      	cmp	r6, r4
 8002174:	d105      	bne.n	8002182 <__libc_init_array+0x2e>
 8002176:	bd70      	pop	{r4, r5, r6, pc}
 8002178:	f855 3b04 	ldr.w	r3, [r5], #4
 800217c:	4798      	blx	r3
 800217e:	3601      	adds	r6, #1
 8002180:	e7ee      	b.n	8002160 <__libc_init_array+0xc>
 8002182:	f855 3b04 	ldr.w	r3, [r5], #4
 8002186:	4798      	blx	r3
 8002188:	3601      	adds	r6, #1
 800218a:	e7f2      	b.n	8002172 <__libc_init_array+0x1e>
 800218c:	080031c4 	.word	0x080031c4
 8002190:	080031c4 	.word	0x080031c4
 8002194:	080031c4 	.word	0x080031c4
 8002198:	080031c8 	.word	0x080031c8

0800219c <memset>:
 800219c:	4603      	mov	r3, r0
 800219e:	4402      	add	r2, r0
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d100      	bne.n	80021a6 <memset+0xa>
 80021a4:	4770      	bx	lr
 80021a6:	f803 1b01 	strb.w	r1, [r3], #1
 80021aa:	e7f9      	b.n	80021a0 <memset+0x4>

080021ac <iprintf>:
 80021ac:	b40f      	push	{r0, r1, r2, r3}
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <iprintf+0x2c>)
 80021b0:	b513      	push	{r0, r1, r4, lr}
 80021b2:	681c      	ldr	r4, [r3, #0]
 80021b4:	b124      	cbz	r4, 80021c0 <iprintf+0x14>
 80021b6:	69a3      	ldr	r3, [r4, #24]
 80021b8:	b913      	cbnz	r3, 80021c0 <iprintf+0x14>
 80021ba:	4620      	mov	r0, r4
 80021bc:	f000 f866 	bl	800228c <__sinit>
 80021c0:	ab05      	add	r3, sp, #20
 80021c2:	4620      	mov	r0, r4
 80021c4:	9a04      	ldr	r2, [sp, #16]
 80021c6:	68a1      	ldr	r1, [r4, #8]
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	f000 f9bb 	bl	8002544 <_vfiprintf_r>
 80021ce:	b002      	add	sp, #8
 80021d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021d4:	b004      	add	sp, #16
 80021d6:	4770      	bx	lr
 80021d8:	2000000c 	.word	0x2000000c

080021dc <std>:
 80021dc:	2300      	movs	r3, #0
 80021de:	b510      	push	{r4, lr}
 80021e0:	4604      	mov	r4, r0
 80021e2:	e9c0 3300 	strd	r3, r3, [r0]
 80021e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021ea:	6083      	str	r3, [r0, #8]
 80021ec:	8181      	strh	r1, [r0, #12]
 80021ee:	6643      	str	r3, [r0, #100]	; 0x64
 80021f0:	81c2      	strh	r2, [r0, #14]
 80021f2:	6183      	str	r3, [r0, #24]
 80021f4:	4619      	mov	r1, r3
 80021f6:	2208      	movs	r2, #8
 80021f8:	305c      	adds	r0, #92	; 0x5c
 80021fa:	f7ff ffcf 	bl	800219c <memset>
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <std+0x38>)
 8002200:	6224      	str	r4, [r4, #32]
 8002202:	6263      	str	r3, [r4, #36]	; 0x24
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <std+0x3c>)
 8002206:	62a3      	str	r3, [r4, #40]	; 0x28
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <std+0x40>)
 800220a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <std+0x44>)
 800220e:	6323      	str	r3, [r4, #48]	; 0x30
 8002210:	bd10      	pop	{r4, pc}
 8002212:	bf00      	nop
 8002214:	08002af1 	.word	0x08002af1
 8002218:	08002b13 	.word	0x08002b13
 800221c:	08002b4b 	.word	0x08002b4b
 8002220:	08002b6f 	.word	0x08002b6f

08002224 <_cleanup_r>:
 8002224:	4901      	ldr	r1, [pc, #4]	; (800222c <_cleanup_r+0x8>)
 8002226:	f000 b8af 	b.w	8002388 <_fwalk_reent>
 800222a:	bf00      	nop
 800222c:	08002e41 	.word	0x08002e41

08002230 <__sfmoreglue>:
 8002230:	2268      	movs	r2, #104	; 0x68
 8002232:	b570      	push	{r4, r5, r6, lr}
 8002234:	1e4d      	subs	r5, r1, #1
 8002236:	4355      	muls	r5, r2
 8002238:	460e      	mov	r6, r1
 800223a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800223e:	f000 f8e5 	bl	800240c <_malloc_r>
 8002242:	4604      	mov	r4, r0
 8002244:	b140      	cbz	r0, 8002258 <__sfmoreglue+0x28>
 8002246:	2100      	movs	r1, #0
 8002248:	e9c0 1600 	strd	r1, r6, [r0]
 800224c:	300c      	adds	r0, #12
 800224e:	60a0      	str	r0, [r4, #8]
 8002250:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002254:	f7ff ffa2 	bl	800219c <memset>
 8002258:	4620      	mov	r0, r4
 800225a:	bd70      	pop	{r4, r5, r6, pc}

0800225c <__sfp_lock_acquire>:
 800225c:	4801      	ldr	r0, [pc, #4]	; (8002264 <__sfp_lock_acquire+0x8>)
 800225e:	f000 b8b3 	b.w	80023c8 <__retarget_lock_acquire_recursive>
 8002262:	bf00      	nop
 8002264:	20000125 	.word	0x20000125

08002268 <__sfp_lock_release>:
 8002268:	4801      	ldr	r0, [pc, #4]	; (8002270 <__sfp_lock_release+0x8>)
 800226a:	f000 b8ae 	b.w	80023ca <__retarget_lock_release_recursive>
 800226e:	bf00      	nop
 8002270:	20000125 	.word	0x20000125

08002274 <__sinit_lock_acquire>:
 8002274:	4801      	ldr	r0, [pc, #4]	; (800227c <__sinit_lock_acquire+0x8>)
 8002276:	f000 b8a7 	b.w	80023c8 <__retarget_lock_acquire_recursive>
 800227a:	bf00      	nop
 800227c:	20000126 	.word	0x20000126

08002280 <__sinit_lock_release>:
 8002280:	4801      	ldr	r0, [pc, #4]	; (8002288 <__sinit_lock_release+0x8>)
 8002282:	f000 b8a2 	b.w	80023ca <__retarget_lock_release_recursive>
 8002286:	bf00      	nop
 8002288:	20000126 	.word	0x20000126

0800228c <__sinit>:
 800228c:	b510      	push	{r4, lr}
 800228e:	4604      	mov	r4, r0
 8002290:	f7ff fff0 	bl	8002274 <__sinit_lock_acquire>
 8002294:	69a3      	ldr	r3, [r4, #24]
 8002296:	b11b      	cbz	r3, 80022a0 <__sinit+0x14>
 8002298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800229c:	f7ff bff0 	b.w	8002280 <__sinit_lock_release>
 80022a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80022a4:	6523      	str	r3, [r4, #80]	; 0x50
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <__sinit+0x68>)
 80022a8:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <__sinit+0x6c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80022ae:	42a3      	cmp	r3, r4
 80022b0:	bf08      	it	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	4620      	mov	r0, r4
 80022b6:	bf08      	it	eq
 80022b8:	61a3      	streq	r3, [r4, #24]
 80022ba:	f000 f81f 	bl	80022fc <__sfp>
 80022be:	6060      	str	r0, [r4, #4]
 80022c0:	4620      	mov	r0, r4
 80022c2:	f000 f81b 	bl	80022fc <__sfp>
 80022c6:	60a0      	str	r0, [r4, #8]
 80022c8:	4620      	mov	r0, r4
 80022ca:	f000 f817 	bl	80022fc <__sfp>
 80022ce:	2200      	movs	r2, #0
 80022d0:	2104      	movs	r1, #4
 80022d2:	60e0      	str	r0, [r4, #12]
 80022d4:	6860      	ldr	r0, [r4, #4]
 80022d6:	f7ff ff81 	bl	80021dc <std>
 80022da:	2201      	movs	r2, #1
 80022dc:	2109      	movs	r1, #9
 80022de:	68a0      	ldr	r0, [r4, #8]
 80022e0:	f7ff ff7c 	bl	80021dc <std>
 80022e4:	2202      	movs	r2, #2
 80022e6:	2112      	movs	r1, #18
 80022e8:	68e0      	ldr	r0, [r4, #12]
 80022ea:	f7ff ff77 	bl	80021dc <std>
 80022ee:	2301      	movs	r3, #1
 80022f0:	61a3      	str	r3, [r4, #24]
 80022f2:	e7d1      	b.n	8002298 <__sinit+0xc>
 80022f4:	0800312c 	.word	0x0800312c
 80022f8:	08002225 	.word	0x08002225

080022fc <__sfp>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	4607      	mov	r7, r0
 8002300:	f7ff ffac 	bl	800225c <__sfp_lock_acquire>
 8002304:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <__sfp+0x84>)
 8002306:	681e      	ldr	r6, [r3, #0]
 8002308:	69b3      	ldr	r3, [r6, #24]
 800230a:	b913      	cbnz	r3, 8002312 <__sfp+0x16>
 800230c:	4630      	mov	r0, r6
 800230e:	f7ff ffbd 	bl	800228c <__sinit>
 8002312:	3648      	adds	r6, #72	; 0x48
 8002314:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002318:	3b01      	subs	r3, #1
 800231a:	d503      	bpl.n	8002324 <__sfp+0x28>
 800231c:	6833      	ldr	r3, [r6, #0]
 800231e:	b30b      	cbz	r3, 8002364 <__sfp+0x68>
 8002320:	6836      	ldr	r6, [r6, #0]
 8002322:	e7f7      	b.n	8002314 <__sfp+0x18>
 8002324:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002328:	b9d5      	cbnz	r5, 8002360 <__sfp+0x64>
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <__sfp+0x88>)
 800232c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002330:	60e3      	str	r3, [r4, #12]
 8002332:	6665      	str	r5, [r4, #100]	; 0x64
 8002334:	f000 f847 	bl	80023c6 <__retarget_lock_init_recursive>
 8002338:	f7ff ff96 	bl	8002268 <__sfp_lock_release>
 800233c:	2208      	movs	r2, #8
 800233e:	4629      	mov	r1, r5
 8002340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002348:	6025      	str	r5, [r4, #0]
 800234a:	61a5      	str	r5, [r4, #24]
 800234c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002350:	f7ff ff24 	bl	800219c <memset>
 8002354:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002358:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800235c:	4620      	mov	r0, r4
 800235e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002360:	3468      	adds	r4, #104	; 0x68
 8002362:	e7d9      	b.n	8002318 <__sfp+0x1c>
 8002364:	2104      	movs	r1, #4
 8002366:	4638      	mov	r0, r7
 8002368:	f7ff ff62 	bl	8002230 <__sfmoreglue>
 800236c:	4604      	mov	r4, r0
 800236e:	6030      	str	r0, [r6, #0]
 8002370:	2800      	cmp	r0, #0
 8002372:	d1d5      	bne.n	8002320 <__sfp+0x24>
 8002374:	f7ff ff78 	bl	8002268 <__sfp_lock_release>
 8002378:	230c      	movs	r3, #12
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	e7ee      	b.n	800235c <__sfp+0x60>
 800237e:	bf00      	nop
 8002380:	0800312c 	.word	0x0800312c
 8002384:	ffff0001 	.word	0xffff0001

08002388 <_fwalk_reent>:
 8002388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800238c:	4606      	mov	r6, r0
 800238e:	4688      	mov	r8, r1
 8002390:	2700      	movs	r7, #0
 8002392:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002396:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800239a:	f1b9 0901 	subs.w	r9, r9, #1
 800239e:	d505      	bpl.n	80023ac <_fwalk_reent+0x24>
 80023a0:	6824      	ldr	r4, [r4, #0]
 80023a2:	2c00      	cmp	r4, #0
 80023a4:	d1f7      	bne.n	8002396 <_fwalk_reent+0xe>
 80023a6:	4638      	mov	r0, r7
 80023a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023ac:	89ab      	ldrh	r3, [r5, #12]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d907      	bls.n	80023c2 <_fwalk_reent+0x3a>
 80023b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023b6:	3301      	adds	r3, #1
 80023b8:	d003      	beq.n	80023c2 <_fwalk_reent+0x3a>
 80023ba:	4629      	mov	r1, r5
 80023bc:	4630      	mov	r0, r6
 80023be:	47c0      	blx	r8
 80023c0:	4307      	orrs	r7, r0
 80023c2:	3568      	adds	r5, #104	; 0x68
 80023c4:	e7e9      	b.n	800239a <_fwalk_reent+0x12>

080023c6 <__retarget_lock_init_recursive>:
 80023c6:	4770      	bx	lr

080023c8 <__retarget_lock_acquire_recursive>:
 80023c8:	4770      	bx	lr

080023ca <__retarget_lock_release_recursive>:
 80023ca:	4770      	bx	lr

080023cc <sbrk_aligned>:
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	4e0e      	ldr	r6, [pc, #56]	; (8002408 <sbrk_aligned+0x3c>)
 80023d0:	460c      	mov	r4, r1
 80023d2:	6831      	ldr	r1, [r6, #0]
 80023d4:	4605      	mov	r5, r0
 80023d6:	b911      	cbnz	r1, 80023de <sbrk_aligned+0x12>
 80023d8:	f000 fb7a 	bl	8002ad0 <_sbrk_r>
 80023dc:	6030      	str	r0, [r6, #0]
 80023de:	4621      	mov	r1, r4
 80023e0:	4628      	mov	r0, r5
 80023e2:	f000 fb75 	bl	8002ad0 <_sbrk_r>
 80023e6:	1c43      	adds	r3, r0, #1
 80023e8:	d00a      	beq.n	8002400 <sbrk_aligned+0x34>
 80023ea:	1cc4      	adds	r4, r0, #3
 80023ec:	f024 0403 	bic.w	r4, r4, #3
 80023f0:	42a0      	cmp	r0, r4
 80023f2:	d007      	beq.n	8002404 <sbrk_aligned+0x38>
 80023f4:	1a21      	subs	r1, r4, r0
 80023f6:	4628      	mov	r0, r5
 80023f8:	f000 fb6a 	bl	8002ad0 <_sbrk_r>
 80023fc:	3001      	adds	r0, #1
 80023fe:	d101      	bne.n	8002404 <sbrk_aligned+0x38>
 8002400:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002404:	4620      	mov	r0, r4
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	2000012c 	.word	0x2000012c

0800240c <_malloc_r>:
 800240c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002410:	1ccd      	adds	r5, r1, #3
 8002412:	f025 0503 	bic.w	r5, r5, #3
 8002416:	3508      	adds	r5, #8
 8002418:	2d0c      	cmp	r5, #12
 800241a:	bf38      	it	cc
 800241c:	250c      	movcc	r5, #12
 800241e:	2d00      	cmp	r5, #0
 8002420:	4607      	mov	r7, r0
 8002422:	db01      	blt.n	8002428 <_malloc_r+0x1c>
 8002424:	42a9      	cmp	r1, r5
 8002426:	d905      	bls.n	8002434 <_malloc_r+0x28>
 8002428:	230c      	movs	r3, #12
 800242a:	2600      	movs	r6, #0
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4630      	mov	r0, r6
 8002430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002434:	4e2e      	ldr	r6, [pc, #184]	; (80024f0 <_malloc_r+0xe4>)
 8002436:	f000 fdc5 	bl	8002fc4 <__malloc_lock>
 800243a:	6833      	ldr	r3, [r6, #0]
 800243c:	461c      	mov	r4, r3
 800243e:	bb34      	cbnz	r4, 800248e <_malloc_r+0x82>
 8002440:	4629      	mov	r1, r5
 8002442:	4638      	mov	r0, r7
 8002444:	f7ff ffc2 	bl	80023cc <sbrk_aligned>
 8002448:	1c43      	adds	r3, r0, #1
 800244a:	4604      	mov	r4, r0
 800244c:	d14d      	bne.n	80024ea <_malloc_r+0xde>
 800244e:	6834      	ldr	r4, [r6, #0]
 8002450:	4626      	mov	r6, r4
 8002452:	2e00      	cmp	r6, #0
 8002454:	d140      	bne.n	80024d8 <_malloc_r+0xcc>
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	4631      	mov	r1, r6
 800245a:	4638      	mov	r0, r7
 800245c:	eb04 0803 	add.w	r8, r4, r3
 8002460:	f000 fb36 	bl	8002ad0 <_sbrk_r>
 8002464:	4580      	cmp	r8, r0
 8002466:	d13a      	bne.n	80024de <_malloc_r+0xd2>
 8002468:	6821      	ldr	r1, [r4, #0]
 800246a:	3503      	adds	r5, #3
 800246c:	1a6d      	subs	r5, r5, r1
 800246e:	f025 0503 	bic.w	r5, r5, #3
 8002472:	3508      	adds	r5, #8
 8002474:	2d0c      	cmp	r5, #12
 8002476:	bf38      	it	cc
 8002478:	250c      	movcc	r5, #12
 800247a:	4638      	mov	r0, r7
 800247c:	4629      	mov	r1, r5
 800247e:	f7ff ffa5 	bl	80023cc <sbrk_aligned>
 8002482:	3001      	adds	r0, #1
 8002484:	d02b      	beq.n	80024de <_malloc_r+0xd2>
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	442b      	add	r3, r5
 800248a:	6023      	str	r3, [r4, #0]
 800248c:	e00e      	b.n	80024ac <_malloc_r+0xa0>
 800248e:	6822      	ldr	r2, [r4, #0]
 8002490:	1b52      	subs	r2, r2, r5
 8002492:	d41e      	bmi.n	80024d2 <_malloc_r+0xc6>
 8002494:	2a0b      	cmp	r2, #11
 8002496:	d916      	bls.n	80024c6 <_malloc_r+0xba>
 8002498:	1961      	adds	r1, r4, r5
 800249a:	42a3      	cmp	r3, r4
 800249c:	6025      	str	r5, [r4, #0]
 800249e:	bf18      	it	ne
 80024a0:	6059      	strne	r1, [r3, #4]
 80024a2:	6863      	ldr	r3, [r4, #4]
 80024a4:	bf08      	it	eq
 80024a6:	6031      	streq	r1, [r6, #0]
 80024a8:	5162      	str	r2, [r4, r5]
 80024aa:	604b      	str	r3, [r1, #4]
 80024ac:	4638      	mov	r0, r7
 80024ae:	f104 060b 	add.w	r6, r4, #11
 80024b2:	f000 fd8d 	bl	8002fd0 <__malloc_unlock>
 80024b6:	f026 0607 	bic.w	r6, r6, #7
 80024ba:	1d23      	adds	r3, r4, #4
 80024bc:	1af2      	subs	r2, r6, r3
 80024be:	d0b6      	beq.n	800242e <_malloc_r+0x22>
 80024c0:	1b9b      	subs	r3, r3, r6
 80024c2:	50a3      	str	r3, [r4, r2]
 80024c4:	e7b3      	b.n	800242e <_malloc_r+0x22>
 80024c6:	6862      	ldr	r2, [r4, #4]
 80024c8:	42a3      	cmp	r3, r4
 80024ca:	bf0c      	ite	eq
 80024cc:	6032      	streq	r2, [r6, #0]
 80024ce:	605a      	strne	r2, [r3, #4]
 80024d0:	e7ec      	b.n	80024ac <_malloc_r+0xa0>
 80024d2:	4623      	mov	r3, r4
 80024d4:	6864      	ldr	r4, [r4, #4]
 80024d6:	e7b2      	b.n	800243e <_malloc_r+0x32>
 80024d8:	4634      	mov	r4, r6
 80024da:	6876      	ldr	r6, [r6, #4]
 80024dc:	e7b9      	b.n	8002452 <_malloc_r+0x46>
 80024de:	230c      	movs	r3, #12
 80024e0:	4638      	mov	r0, r7
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	f000 fd74 	bl	8002fd0 <__malloc_unlock>
 80024e8:	e7a1      	b.n	800242e <_malloc_r+0x22>
 80024ea:	6025      	str	r5, [r4, #0]
 80024ec:	e7de      	b.n	80024ac <_malloc_r+0xa0>
 80024ee:	bf00      	nop
 80024f0:	20000128 	.word	0x20000128

080024f4 <__sfputc_r>:
 80024f4:	6893      	ldr	r3, [r2, #8]
 80024f6:	b410      	push	{r4}
 80024f8:	3b01      	subs	r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	6093      	str	r3, [r2, #8]
 80024fe:	da07      	bge.n	8002510 <__sfputc_r+0x1c>
 8002500:	6994      	ldr	r4, [r2, #24]
 8002502:	42a3      	cmp	r3, r4
 8002504:	db01      	blt.n	800250a <__sfputc_r+0x16>
 8002506:	290a      	cmp	r1, #10
 8002508:	d102      	bne.n	8002510 <__sfputc_r+0x1c>
 800250a:	bc10      	pop	{r4}
 800250c:	f000 bb34 	b.w	8002b78 <__swbuf_r>
 8002510:	6813      	ldr	r3, [r2, #0]
 8002512:	1c58      	adds	r0, r3, #1
 8002514:	6010      	str	r0, [r2, #0]
 8002516:	7019      	strb	r1, [r3, #0]
 8002518:	4608      	mov	r0, r1
 800251a:	bc10      	pop	{r4}
 800251c:	4770      	bx	lr

0800251e <__sfputs_r>:
 800251e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002520:	4606      	mov	r6, r0
 8002522:	460f      	mov	r7, r1
 8002524:	4614      	mov	r4, r2
 8002526:	18d5      	adds	r5, r2, r3
 8002528:	42ac      	cmp	r4, r5
 800252a:	d101      	bne.n	8002530 <__sfputs_r+0x12>
 800252c:	2000      	movs	r0, #0
 800252e:	e007      	b.n	8002540 <__sfputs_r+0x22>
 8002530:	463a      	mov	r2, r7
 8002532:	4630      	mov	r0, r6
 8002534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002538:	f7ff ffdc 	bl	80024f4 <__sfputc_r>
 800253c:	1c43      	adds	r3, r0, #1
 800253e:	d1f3      	bne.n	8002528 <__sfputs_r+0xa>
 8002540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002544 <_vfiprintf_r>:
 8002544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002548:	460d      	mov	r5, r1
 800254a:	4614      	mov	r4, r2
 800254c:	4698      	mov	r8, r3
 800254e:	4606      	mov	r6, r0
 8002550:	b09d      	sub	sp, #116	; 0x74
 8002552:	b118      	cbz	r0, 800255c <_vfiprintf_r+0x18>
 8002554:	6983      	ldr	r3, [r0, #24]
 8002556:	b90b      	cbnz	r3, 800255c <_vfiprintf_r+0x18>
 8002558:	f7ff fe98 	bl	800228c <__sinit>
 800255c:	4b89      	ldr	r3, [pc, #548]	; (8002784 <_vfiprintf_r+0x240>)
 800255e:	429d      	cmp	r5, r3
 8002560:	d11b      	bne.n	800259a <_vfiprintf_r+0x56>
 8002562:	6875      	ldr	r5, [r6, #4]
 8002564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002566:	07d9      	lsls	r1, r3, #31
 8002568:	d405      	bmi.n	8002576 <_vfiprintf_r+0x32>
 800256a:	89ab      	ldrh	r3, [r5, #12]
 800256c:	059a      	lsls	r2, r3, #22
 800256e:	d402      	bmi.n	8002576 <_vfiprintf_r+0x32>
 8002570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002572:	f7ff ff29 	bl	80023c8 <__retarget_lock_acquire_recursive>
 8002576:	89ab      	ldrh	r3, [r5, #12]
 8002578:	071b      	lsls	r3, r3, #28
 800257a:	d501      	bpl.n	8002580 <_vfiprintf_r+0x3c>
 800257c:	692b      	ldr	r3, [r5, #16]
 800257e:	b9eb      	cbnz	r3, 80025bc <_vfiprintf_r+0x78>
 8002580:	4629      	mov	r1, r5
 8002582:	4630      	mov	r0, r6
 8002584:	f000 fb5c 	bl	8002c40 <__swsetup_r>
 8002588:	b1c0      	cbz	r0, 80025bc <_vfiprintf_r+0x78>
 800258a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800258c:	07dc      	lsls	r4, r3, #31
 800258e:	d50e      	bpl.n	80025ae <_vfiprintf_r+0x6a>
 8002590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002594:	b01d      	add	sp, #116	; 0x74
 8002596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800259a:	4b7b      	ldr	r3, [pc, #492]	; (8002788 <_vfiprintf_r+0x244>)
 800259c:	429d      	cmp	r5, r3
 800259e:	d101      	bne.n	80025a4 <_vfiprintf_r+0x60>
 80025a0:	68b5      	ldr	r5, [r6, #8]
 80025a2:	e7df      	b.n	8002564 <_vfiprintf_r+0x20>
 80025a4:	4b79      	ldr	r3, [pc, #484]	; (800278c <_vfiprintf_r+0x248>)
 80025a6:	429d      	cmp	r5, r3
 80025a8:	bf08      	it	eq
 80025aa:	68f5      	ldreq	r5, [r6, #12]
 80025ac:	e7da      	b.n	8002564 <_vfiprintf_r+0x20>
 80025ae:	89ab      	ldrh	r3, [r5, #12]
 80025b0:	0598      	lsls	r0, r3, #22
 80025b2:	d4ed      	bmi.n	8002590 <_vfiprintf_r+0x4c>
 80025b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025b6:	f7ff ff08 	bl	80023ca <__retarget_lock_release_recursive>
 80025ba:	e7e9      	b.n	8002590 <_vfiprintf_r+0x4c>
 80025bc:	2300      	movs	r3, #0
 80025be:	9309      	str	r3, [sp, #36]	; 0x24
 80025c0:	2320      	movs	r3, #32
 80025c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025c6:	2330      	movs	r3, #48	; 0x30
 80025c8:	f04f 0901 	mov.w	r9, #1
 80025cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80025d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002790 <_vfiprintf_r+0x24c>
 80025d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025d8:	4623      	mov	r3, r4
 80025da:	469a      	mov	sl, r3
 80025dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025e0:	b10a      	cbz	r2, 80025e6 <_vfiprintf_r+0xa2>
 80025e2:	2a25      	cmp	r2, #37	; 0x25
 80025e4:	d1f9      	bne.n	80025da <_vfiprintf_r+0x96>
 80025e6:	ebba 0b04 	subs.w	fp, sl, r4
 80025ea:	d00b      	beq.n	8002604 <_vfiprintf_r+0xc0>
 80025ec:	465b      	mov	r3, fp
 80025ee:	4622      	mov	r2, r4
 80025f0:	4629      	mov	r1, r5
 80025f2:	4630      	mov	r0, r6
 80025f4:	f7ff ff93 	bl	800251e <__sfputs_r>
 80025f8:	3001      	adds	r0, #1
 80025fa:	f000 80aa 	beq.w	8002752 <_vfiprintf_r+0x20e>
 80025fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002600:	445a      	add	r2, fp
 8002602:	9209      	str	r2, [sp, #36]	; 0x24
 8002604:	f89a 3000 	ldrb.w	r3, [sl]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a2 	beq.w	8002752 <_vfiprintf_r+0x20e>
 800260e:	2300      	movs	r3, #0
 8002610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002618:	f10a 0a01 	add.w	sl, sl, #1
 800261c:	9304      	str	r3, [sp, #16]
 800261e:	9307      	str	r3, [sp, #28]
 8002620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002624:	931a      	str	r3, [sp, #104]	; 0x68
 8002626:	4654      	mov	r4, sl
 8002628:	2205      	movs	r2, #5
 800262a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800262e:	4858      	ldr	r0, [pc, #352]	; (8002790 <_vfiprintf_r+0x24c>)
 8002630:	f000 fcba 	bl	8002fa8 <memchr>
 8002634:	9a04      	ldr	r2, [sp, #16]
 8002636:	b9d8      	cbnz	r0, 8002670 <_vfiprintf_r+0x12c>
 8002638:	06d1      	lsls	r1, r2, #27
 800263a:	bf44      	itt	mi
 800263c:	2320      	movmi	r3, #32
 800263e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002642:	0713      	lsls	r3, r2, #28
 8002644:	bf44      	itt	mi
 8002646:	232b      	movmi	r3, #43	; 0x2b
 8002648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800264c:	f89a 3000 	ldrb.w	r3, [sl]
 8002650:	2b2a      	cmp	r3, #42	; 0x2a
 8002652:	d015      	beq.n	8002680 <_vfiprintf_r+0x13c>
 8002654:	4654      	mov	r4, sl
 8002656:	2000      	movs	r0, #0
 8002658:	f04f 0c0a 	mov.w	ip, #10
 800265c:	9a07      	ldr	r2, [sp, #28]
 800265e:	4621      	mov	r1, r4
 8002660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002664:	3b30      	subs	r3, #48	; 0x30
 8002666:	2b09      	cmp	r3, #9
 8002668:	d94e      	bls.n	8002708 <_vfiprintf_r+0x1c4>
 800266a:	b1b0      	cbz	r0, 800269a <_vfiprintf_r+0x156>
 800266c:	9207      	str	r2, [sp, #28]
 800266e:	e014      	b.n	800269a <_vfiprintf_r+0x156>
 8002670:	eba0 0308 	sub.w	r3, r0, r8
 8002674:	fa09 f303 	lsl.w	r3, r9, r3
 8002678:	4313      	orrs	r3, r2
 800267a:	46a2      	mov	sl, r4
 800267c:	9304      	str	r3, [sp, #16]
 800267e:	e7d2      	b.n	8002626 <_vfiprintf_r+0xe2>
 8002680:	9b03      	ldr	r3, [sp, #12]
 8002682:	1d19      	adds	r1, r3, #4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	9103      	str	r1, [sp, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	bfbb      	ittet	lt
 800268c:	425b      	neglt	r3, r3
 800268e:	f042 0202 	orrlt.w	r2, r2, #2
 8002692:	9307      	strge	r3, [sp, #28]
 8002694:	9307      	strlt	r3, [sp, #28]
 8002696:	bfb8      	it	lt
 8002698:	9204      	strlt	r2, [sp, #16]
 800269a:	7823      	ldrb	r3, [r4, #0]
 800269c:	2b2e      	cmp	r3, #46	; 0x2e
 800269e:	d10c      	bne.n	80026ba <_vfiprintf_r+0x176>
 80026a0:	7863      	ldrb	r3, [r4, #1]
 80026a2:	2b2a      	cmp	r3, #42	; 0x2a
 80026a4:	d135      	bne.n	8002712 <_vfiprintf_r+0x1ce>
 80026a6:	9b03      	ldr	r3, [sp, #12]
 80026a8:	3402      	adds	r4, #2
 80026aa:	1d1a      	adds	r2, r3, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	9203      	str	r2, [sp, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bfb8      	it	lt
 80026b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80026b8:	9305      	str	r3, [sp, #20]
 80026ba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002794 <_vfiprintf_r+0x250>
 80026be:	2203      	movs	r2, #3
 80026c0:	4650      	mov	r0, sl
 80026c2:	7821      	ldrb	r1, [r4, #0]
 80026c4:	f000 fc70 	bl	8002fa8 <memchr>
 80026c8:	b140      	cbz	r0, 80026dc <_vfiprintf_r+0x198>
 80026ca:	2340      	movs	r3, #64	; 0x40
 80026cc:	eba0 000a 	sub.w	r0, r0, sl
 80026d0:	fa03 f000 	lsl.w	r0, r3, r0
 80026d4:	9b04      	ldr	r3, [sp, #16]
 80026d6:	3401      	adds	r4, #1
 80026d8:	4303      	orrs	r3, r0
 80026da:	9304      	str	r3, [sp, #16]
 80026dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026e0:	2206      	movs	r2, #6
 80026e2:	482d      	ldr	r0, [pc, #180]	; (8002798 <_vfiprintf_r+0x254>)
 80026e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026e8:	f000 fc5e 	bl	8002fa8 <memchr>
 80026ec:	2800      	cmp	r0, #0
 80026ee:	d03f      	beq.n	8002770 <_vfiprintf_r+0x22c>
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <_vfiprintf_r+0x258>)
 80026f2:	bb1b      	cbnz	r3, 800273c <_vfiprintf_r+0x1f8>
 80026f4:	9b03      	ldr	r3, [sp, #12]
 80026f6:	3307      	adds	r3, #7
 80026f8:	f023 0307 	bic.w	r3, r3, #7
 80026fc:	3308      	adds	r3, #8
 80026fe:	9303      	str	r3, [sp, #12]
 8002700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002702:	443b      	add	r3, r7
 8002704:	9309      	str	r3, [sp, #36]	; 0x24
 8002706:	e767      	b.n	80025d8 <_vfiprintf_r+0x94>
 8002708:	460c      	mov	r4, r1
 800270a:	2001      	movs	r0, #1
 800270c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002710:	e7a5      	b.n	800265e <_vfiprintf_r+0x11a>
 8002712:	2300      	movs	r3, #0
 8002714:	f04f 0c0a 	mov.w	ip, #10
 8002718:	4619      	mov	r1, r3
 800271a:	3401      	adds	r4, #1
 800271c:	9305      	str	r3, [sp, #20]
 800271e:	4620      	mov	r0, r4
 8002720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002724:	3a30      	subs	r2, #48	; 0x30
 8002726:	2a09      	cmp	r2, #9
 8002728:	d903      	bls.n	8002732 <_vfiprintf_r+0x1ee>
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0c5      	beq.n	80026ba <_vfiprintf_r+0x176>
 800272e:	9105      	str	r1, [sp, #20]
 8002730:	e7c3      	b.n	80026ba <_vfiprintf_r+0x176>
 8002732:	4604      	mov	r4, r0
 8002734:	2301      	movs	r3, #1
 8002736:	fb0c 2101 	mla	r1, ip, r1, r2
 800273a:	e7f0      	b.n	800271e <_vfiprintf_r+0x1da>
 800273c:	ab03      	add	r3, sp, #12
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	462a      	mov	r2, r5
 8002742:	4630      	mov	r0, r6
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <_vfiprintf_r+0x25c>)
 8002746:	a904      	add	r1, sp, #16
 8002748:	f3af 8000 	nop.w
 800274c:	4607      	mov	r7, r0
 800274e:	1c78      	adds	r0, r7, #1
 8002750:	d1d6      	bne.n	8002700 <_vfiprintf_r+0x1bc>
 8002752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002754:	07d9      	lsls	r1, r3, #31
 8002756:	d405      	bmi.n	8002764 <_vfiprintf_r+0x220>
 8002758:	89ab      	ldrh	r3, [r5, #12]
 800275a:	059a      	lsls	r2, r3, #22
 800275c:	d402      	bmi.n	8002764 <_vfiprintf_r+0x220>
 800275e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002760:	f7ff fe33 	bl	80023ca <__retarget_lock_release_recursive>
 8002764:	89ab      	ldrh	r3, [r5, #12]
 8002766:	065b      	lsls	r3, r3, #25
 8002768:	f53f af12 	bmi.w	8002590 <_vfiprintf_r+0x4c>
 800276c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800276e:	e711      	b.n	8002594 <_vfiprintf_r+0x50>
 8002770:	ab03      	add	r3, sp, #12
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	462a      	mov	r2, r5
 8002776:	4630      	mov	r0, r6
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <_vfiprintf_r+0x25c>)
 800277a:	a904      	add	r1, sp, #16
 800277c:	f000 f882 	bl	8002884 <_printf_i>
 8002780:	e7e4      	b.n	800274c <_vfiprintf_r+0x208>
 8002782:	bf00      	nop
 8002784:	08003150 	.word	0x08003150
 8002788:	08003170 	.word	0x08003170
 800278c:	08003130 	.word	0x08003130
 8002790:	08003190 	.word	0x08003190
 8002794:	08003196 	.word	0x08003196
 8002798:	0800319a 	.word	0x0800319a
 800279c:	00000000 	.word	0x00000000
 80027a0:	0800251f 	.word	0x0800251f

080027a4 <_printf_common>:
 80027a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a8:	4616      	mov	r6, r2
 80027aa:	4699      	mov	r9, r3
 80027ac:	688a      	ldr	r2, [r1, #8]
 80027ae:	690b      	ldr	r3, [r1, #16]
 80027b0:	4607      	mov	r7, r0
 80027b2:	4293      	cmp	r3, r2
 80027b4:	bfb8      	it	lt
 80027b6:	4613      	movlt	r3, r2
 80027b8:	6033      	str	r3, [r6, #0]
 80027ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027be:	460c      	mov	r4, r1
 80027c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027c4:	b10a      	cbz	r2, 80027ca <_printf_common+0x26>
 80027c6:	3301      	adds	r3, #1
 80027c8:	6033      	str	r3, [r6, #0]
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	0699      	lsls	r1, r3, #26
 80027ce:	bf42      	ittt	mi
 80027d0:	6833      	ldrmi	r3, [r6, #0]
 80027d2:	3302      	addmi	r3, #2
 80027d4:	6033      	strmi	r3, [r6, #0]
 80027d6:	6825      	ldr	r5, [r4, #0]
 80027d8:	f015 0506 	ands.w	r5, r5, #6
 80027dc:	d106      	bne.n	80027ec <_printf_common+0x48>
 80027de:	f104 0a19 	add.w	sl, r4, #25
 80027e2:	68e3      	ldr	r3, [r4, #12]
 80027e4:	6832      	ldr	r2, [r6, #0]
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	42ab      	cmp	r3, r5
 80027ea:	dc28      	bgt.n	800283e <_printf_common+0x9a>
 80027ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027f0:	1e13      	subs	r3, r2, #0
 80027f2:	6822      	ldr	r2, [r4, #0]
 80027f4:	bf18      	it	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	0692      	lsls	r2, r2, #26
 80027fa:	d42d      	bmi.n	8002858 <_printf_common+0xb4>
 80027fc:	4649      	mov	r1, r9
 80027fe:	4638      	mov	r0, r7
 8002800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002804:	47c0      	blx	r8
 8002806:	3001      	adds	r0, #1
 8002808:	d020      	beq.n	800284c <_printf_common+0xa8>
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	68e5      	ldr	r5, [r4, #12]
 800280e:	f003 0306 	and.w	r3, r3, #6
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf18      	it	ne
 8002816:	2500      	movne	r5, #0
 8002818:	6832      	ldr	r2, [r6, #0]
 800281a:	f04f 0600 	mov.w	r6, #0
 800281e:	68a3      	ldr	r3, [r4, #8]
 8002820:	bf08      	it	eq
 8002822:	1aad      	subeq	r5, r5, r2
 8002824:	6922      	ldr	r2, [r4, #16]
 8002826:	bf08      	it	eq
 8002828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800282c:	4293      	cmp	r3, r2
 800282e:	bfc4      	itt	gt
 8002830:	1a9b      	subgt	r3, r3, r2
 8002832:	18ed      	addgt	r5, r5, r3
 8002834:	341a      	adds	r4, #26
 8002836:	42b5      	cmp	r5, r6
 8002838:	d11a      	bne.n	8002870 <_printf_common+0xcc>
 800283a:	2000      	movs	r0, #0
 800283c:	e008      	b.n	8002850 <_printf_common+0xac>
 800283e:	2301      	movs	r3, #1
 8002840:	4652      	mov	r2, sl
 8002842:	4649      	mov	r1, r9
 8002844:	4638      	mov	r0, r7
 8002846:	47c0      	blx	r8
 8002848:	3001      	adds	r0, #1
 800284a:	d103      	bne.n	8002854 <_printf_common+0xb0>
 800284c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002854:	3501      	adds	r5, #1
 8002856:	e7c4      	b.n	80027e2 <_printf_common+0x3e>
 8002858:	2030      	movs	r0, #48	; 0x30
 800285a:	18e1      	adds	r1, r4, r3
 800285c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002866:	4422      	add	r2, r4
 8002868:	3302      	adds	r3, #2
 800286a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800286e:	e7c5      	b.n	80027fc <_printf_common+0x58>
 8002870:	2301      	movs	r3, #1
 8002872:	4622      	mov	r2, r4
 8002874:	4649      	mov	r1, r9
 8002876:	4638      	mov	r0, r7
 8002878:	47c0      	blx	r8
 800287a:	3001      	adds	r0, #1
 800287c:	d0e6      	beq.n	800284c <_printf_common+0xa8>
 800287e:	3601      	adds	r6, #1
 8002880:	e7d9      	b.n	8002836 <_printf_common+0x92>
	...

08002884 <_printf_i>:
 8002884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002888:	7e0f      	ldrb	r7, [r1, #24]
 800288a:	4691      	mov	r9, r2
 800288c:	2f78      	cmp	r7, #120	; 0x78
 800288e:	4680      	mov	r8, r0
 8002890:	460c      	mov	r4, r1
 8002892:	469a      	mov	sl, r3
 8002894:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800289a:	d807      	bhi.n	80028ac <_printf_i+0x28>
 800289c:	2f62      	cmp	r7, #98	; 0x62
 800289e:	d80a      	bhi.n	80028b6 <_printf_i+0x32>
 80028a0:	2f00      	cmp	r7, #0
 80028a2:	f000 80d9 	beq.w	8002a58 <_printf_i+0x1d4>
 80028a6:	2f58      	cmp	r7, #88	; 0x58
 80028a8:	f000 80a4 	beq.w	80029f4 <_printf_i+0x170>
 80028ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028b4:	e03a      	b.n	800292c <_printf_i+0xa8>
 80028b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028ba:	2b15      	cmp	r3, #21
 80028bc:	d8f6      	bhi.n	80028ac <_printf_i+0x28>
 80028be:	a101      	add	r1, pc, #4	; (adr r1, 80028c4 <_printf_i+0x40>)
 80028c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028c4:	0800291d 	.word	0x0800291d
 80028c8:	08002931 	.word	0x08002931
 80028cc:	080028ad 	.word	0x080028ad
 80028d0:	080028ad 	.word	0x080028ad
 80028d4:	080028ad 	.word	0x080028ad
 80028d8:	080028ad 	.word	0x080028ad
 80028dc:	08002931 	.word	0x08002931
 80028e0:	080028ad 	.word	0x080028ad
 80028e4:	080028ad 	.word	0x080028ad
 80028e8:	080028ad 	.word	0x080028ad
 80028ec:	080028ad 	.word	0x080028ad
 80028f0:	08002a3f 	.word	0x08002a3f
 80028f4:	08002961 	.word	0x08002961
 80028f8:	08002a21 	.word	0x08002a21
 80028fc:	080028ad 	.word	0x080028ad
 8002900:	080028ad 	.word	0x080028ad
 8002904:	08002a61 	.word	0x08002a61
 8002908:	080028ad 	.word	0x080028ad
 800290c:	08002961 	.word	0x08002961
 8002910:	080028ad 	.word	0x080028ad
 8002914:	080028ad 	.word	0x080028ad
 8002918:	08002a29 	.word	0x08002a29
 800291c:	682b      	ldr	r3, [r5, #0]
 800291e:	1d1a      	adds	r2, r3, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	602a      	str	r2, [r5, #0]
 8002924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800292c:	2301      	movs	r3, #1
 800292e:	e0a4      	b.n	8002a7a <_printf_i+0x1f6>
 8002930:	6820      	ldr	r0, [r4, #0]
 8002932:	6829      	ldr	r1, [r5, #0]
 8002934:	0606      	lsls	r6, r0, #24
 8002936:	f101 0304 	add.w	r3, r1, #4
 800293a:	d50a      	bpl.n	8002952 <_printf_i+0xce>
 800293c:	680e      	ldr	r6, [r1, #0]
 800293e:	602b      	str	r3, [r5, #0]
 8002940:	2e00      	cmp	r6, #0
 8002942:	da03      	bge.n	800294c <_printf_i+0xc8>
 8002944:	232d      	movs	r3, #45	; 0x2d
 8002946:	4276      	negs	r6, r6
 8002948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800294c:	230a      	movs	r3, #10
 800294e:	485e      	ldr	r0, [pc, #376]	; (8002ac8 <_printf_i+0x244>)
 8002950:	e019      	b.n	8002986 <_printf_i+0x102>
 8002952:	680e      	ldr	r6, [r1, #0]
 8002954:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002958:	602b      	str	r3, [r5, #0]
 800295a:	bf18      	it	ne
 800295c:	b236      	sxthne	r6, r6
 800295e:	e7ef      	b.n	8002940 <_printf_i+0xbc>
 8002960:	682b      	ldr	r3, [r5, #0]
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	1d19      	adds	r1, r3, #4
 8002966:	6029      	str	r1, [r5, #0]
 8002968:	0601      	lsls	r1, r0, #24
 800296a:	d501      	bpl.n	8002970 <_printf_i+0xec>
 800296c:	681e      	ldr	r6, [r3, #0]
 800296e:	e002      	b.n	8002976 <_printf_i+0xf2>
 8002970:	0646      	lsls	r6, r0, #25
 8002972:	d5fb      	bpl.n	800296c <_printf_i+0xe8>
 8002974:	881e      	ldrh	r6, [r3, #0]
 8002976:	2f6f      	cmp	r7, #111	; 0x6f
 8002978:	bf0c      	ite	eq
 800297a:	2308      	moveq	r3, #8
 800297c:	230a      	movne	r3, #10
 800297e:	4852      	ldr	r0, [pc, #328]	; (8002ac8 <_printf_i+0x244>)
 8002980:	2100      	movs	r1, #0
 8002982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002986:	6865      	ldr	r5, [r4, #4]
 8002988:	2d00      	cmp	r5, #0
 800298a:	bfa8      	it	ge
 800298c:	6821      	ldrge	r1, [r4, #0]
 800298e:	60a5      	str	r5, [r4, #8]
 8002990:	bfa4      	itt	ge
 8002992:	f021 0104 	bicge.w	r1, r1, #4
 8002996:	6021      	strge	r1, [r4, #0]
 8002998:	b90e      	cbnz	r6, 800299e <_printf_i+0x11a>
 800299a:	2d00      	cmp	r5, #0
 800299c:	d04d      	beq.n	8002a3a <_printf_i+0x1b6>
 800299e:	4615      	mov	r5, r2
 80029a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80029a4:	fb03 6711 	mls	r7, r3, r1, r6
 80029a8:	5dc7      	ldrb	r7, [r0, r7]
 80029aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029ae:	4637      	mov	r7, r6
 80029b0:	42bb      	cmp	r3, r7
 80029b2:	460e      	mov	r6, r1
 80029b4:	d9f4      	bls.n	80029a0 <_printf_i+0x11c>
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d10b      	bne.n	80029d2 <_printf_i+0x14e>
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	07de      	lsls	r6, r3, #31
 80029be:	d508      	bpl.n	80029d2 <_printf_i+0x14e>
 80029c0:	6923      	ldr	r3, [r4, #16]
 80029c2:	6861      	ldr	r1, [r4, #4]
 80029c4:	4299      	cmp	r1, r3
 80029c6:	bfde      	ittt	le
 80029c8:	2330      	movle	r3, #48	; 0x30
 80029ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80029d2:	1b52      	subs	r2, r2, r5
 80029d4:	6122      	str	r2, [r4, #16]
 80029d6:	464b      	mov	r3, r9
 80029d8:	4621      	mov	r1, r4
 80029da:	4640      	mov	r0, r8
 80029dc:	f8cd a000 	str.w	sl, [sp]
 80029e0:	aa03      	add	r2, sp, #12
 80029e2:	f7ff fedf 	bl	80027a4 <_printf_common>
 80029e6:	3001      	adds	r0, #1
 80029e8:	d14c      	bne.n	8002a84 <_printf_i+0x200>
 80029ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029ee:	b004      	add	sp, #16
 80029f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029f4:	4834      	ldr	r0, [pc, #208]	; (8002ac8 <_printf_i+0x244>)
 80029f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80029fa:	6829      	ldr	r1, [r5, #0]
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a02:	6029      	str	r1, [r5, #0]
 8002a04:	061d      	lsls	r5, r3, #24
 8002a06:	d514      	bpl.n	8002a32 <_printf_i+0x1ae>
 8002a08:	07df      	lsls	r7, r3, #31
 8002a0a:	bf44      	itt	mi
 8002a0c:	f043 0320 	orrmi.w	r3, r3, #32
 8002a10:	6023      	strmi	r3, [r4, #0]
 8002a12:	b91e      	cbnz	r6, 8002a1c <_printf_i+0x198>
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	f023 0320 	bic.w	r3, r3, #32
 8002a1a:	6023      	str	r3, [r4, #0]
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	e7af      	b.n	8002980 <_printf_i+0xfc>
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	f043 0320 	orr.w	r3, r3, #32
 8002a26:	6023      	str	r3, [r4, #0]
 8002a28:	2378      	movs	r3, #120	; 0x78
 8002a2a:	4828      	ldr	r0, [pc, #160]	; (8002acc <_printf_i+0x248>)
 8002a2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a30:	e7e3      	b.n	80029fa <_printf_i+0x176>
 8002a32:	0659      	lsls	r1, r3, #25
 8002a34:	bf48      	it	mi
 8002a36:	b2b6      	uxthmi	r6, r6
 8002a38:	e7e6      	b.n	8002a08 <_printf_i+0x184>
 8002a3a:	4615      	mov	r5, r2
 8002a3c:	e7bb      	b.n	80029b6 <_printf_i+0x132>
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	6826      	ldr	r6, [r4, #0]
 8002a42:	1d18      	adds	r0, r3, #4
 8002a44:	6961      	ldr	r1, [r4, #20]
 8002a46:	6028      	str	r0, [r5, #0]
 8002a48:	0635      	lsls	r5, r6, #24
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	d501      	bpl.n	8002a52 <_printf_i+0x1ce>
 8002a4e:	6019      	str	r1, [r3, #0]
 8002a50:	e002      	b.n	8002a58 <_printf_i+0x1d4>
 8002a52:	0670      	lsls	r0, r6, #25
 8002a54:	d5fb      	bpl.n	8002a4e <_printf_i+0x1ca>
 8002a56:	8019      	strh	r1, [r3, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	4615      	mov	r5, r2
 8002a5c:	6123      	str	r3, [r4, #16]
 8002a5e:	e7ba      	b.n	80029d6 <_printf_i+0x152>
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	2100      	movs	r1, #0
 8002a64:	1d1a      	adds	r2, r3, #4
 8002a66:	602a      	str	r2, [r5, #0]
 8002a68:	681d      	ldr	r5, [r3, #0]
 8002a6a:	6862      	ldr	r2, [r4, #4]
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	f000 fa9b 	bl	8002fa8 <memchr>
 8002a72:	b108      	cbz	r0, 8002a78 <_printf_i+0x1f4>
 8002a74:	1b40      	subs	r0, r0, r5
 8002a76:	6060      	str	r0, [r4, #4]
 8002a78:	6863      	ldr	r3, [r4, #4]
 8002a7a:	6123      	str	r3, [r4, #16]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a82:	e7a8      	b.n	80029d6 <_printf_i+0x152>
 8002a84:	462a      	mov	r2, r5
 8002a86:	4649      	mov	r1, r9
 8002a88:	4640      	mov	r0, r8
 8002a8a:	6923      	ldr	r3, [r4, #16]
 8002a8c:	47d0      	blx	sl
 8002a8e:	3001      	adds	r0, #1
 8002a90:	d0ab      	beq.n	80029ea <_printf_i+0x166>
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	079b      	lsls	r3, r3, #30
 8002a96:	d413      	bmi.n	8002ac0 <_printf_i+0x23c>
 8002a98:	68e0      	ldr	r0, [r4, #12]
 8002a9a:	9b03      	ldr	r3, [sp, #12]
 8002a9c:	4298      	cmp	r0, r3
 8002a9e:	bfb8      	it	lt
 8002aa0:	4618      	movlt	r0, r3
 8002aa2:	e7a4      	b.n	80029ee <_printf_i+0x16a>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	4632      	mov	r2, r6
 8002aa8:	4649      	mov	r1, r9
 8002aaa:	4640      	mov	r0, r8
 8002aac:	47d0      	blx	sl
 8002aae:	3001      	adds	r0, #1
 8002ab0:	d09b      	beq.n	80029ea <_printf_i+0x166>
 8002ab2:	3501      	adds	r5, #1
 8002ab4:	68e3      	ldr	r3, [r4, #12]
 8002ab6:	9903      	ldr	r1, [sp, #12]
 8002ab8:	1a5b      	subs	r3, r3, r1
 8002aba:	42ab      	cmp	r3, r5
 8002abc:	dcf2      	bgt.n	8002aa4 <_printf_i+0x220>
 8002abe:	e7eb      	b.n	8002a98 <_printf_i+0x214>
 8002ac0:	2500      	movs	r5, #0
 8002ac2:	f104 0619 	add.w	r6, r4, #25
 8002ac6:	e7f5      	b.n	8002ab4 <_printf_i+0x230>
 8002ac8:	080031a1 	.word	0x080031a1
 8002acc:	080031b2 	.word	0x080031b2

08002ad0 <_sbrk_r>:
 8002ad0:	b538      	push	{r3, r4, r5, lr}
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	4d05      	ldr	r5, [pc, #20]	; (8002aec <_sbrk_r+0x1c>)
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	4608      	mov	r0, r1
 8002ada:	602b      	str	r3, [r5, #0]
 8002adc:	f7fd fd72 	bl	80005c4 <_sbrk>
 8002ae0:	1c43      	adds	r3, r0, #1
 8002ae2:	d102      	bne.n	8002aea <_sbrk_r+0x1a>
 8002ae4:	682b      	ldr	r3, [r5, #0]
 8002ae6:	b103      	cbz	r3, 8002aea <_sbrk_r+0x1a>
 8002ae8:	6023      	str	r3, [r4, #0]
 8002aea:	bd38      	pop	{r3, r4, r5, pc}
 8002aec:	20000130 	.word	0x20000130

08002af0 <__sread>:
 8002af0:	b510      	push	{r4, lr}
 8002af2:	460c      	mov	r4, r1
 8002af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002af8:	f000 fab8 	bl	800306c <_read_r>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	bfab      	itete	ge
 8002b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b02:	89a3      	ldrhlt	r3, [r4, #12]
 8002b04:	181b      	addge	r3, r3, r0
 8002b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b0a:	bfac      	ite	ge
 8002b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b0e:	81a3      	strhlt	r3, [r4, #12]
 8002b10:	bd10      	pop	{r4, pc}

08002b12 <__swrite>:
 8002b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b16:	461f      	mov	r7, r3
 8002b18:	898b      	ldrh	r3, [r1, #12]
 8002b1a:	4605      	mov	r5, r0
 8002b1c:	05db      	lsls	r3, r3, #23
 8002b1e:	460c      	mov	r4, r1
 8002b20:	4616      	mov	r6, r2
 8002b22:	d505      	bpl.n	8002b30 <__swrite+0x1e>
 8002b24:	2302      	movs	r3, #2
 8002b26:	2200      	movs	r2, #0
 8002b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b2c:	f000 f9c4 	bl	8002eb8 <_lseek_r>
 8002b30:	89a3      	ldrh	r3, [r4, #12]
 8002b32:	4632      	mov	r2, r6
 8002b34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b38:	81a3      	strh	r3, [r4, #12]
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	463b      	mov	r3, r7
 8002b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b46:	f000 b869 	b.w	8002c1c <_write_r>

08002b4a <__sseek>:
 8002b4a:	b510      	push	{r4, lr}
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b52:	f000 f9b1 	bl	8002eb8 <_lseek_r>
 8002b56:	1c43      	adds	r3, r0, #1
 8002b58:	89a3      	ldrh	r3, [r4, #12]
 8002b5a:	bf15      	itete	ne
 8002b5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b66:	81a3      	strheq	r3, [r4, #12]
 8002b68:	bf18      	it	ne
 8002b6a:	81a3      	strhne	r3, [r4, #12]
 8002b6c:	bd10      	pop	{r4, pc}

08002b6e <__sclose>:
 8002b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b72:	f000 b8d3 	b.w	8002d1c <_close_r>
	...

08002b78 <__swbuf_r>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	460e      	mov	r6, r1
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	4605      	mov	r5, r0
 8002b80:	b118      	cbz	r0, 8002b8a <__swbuf_r+0x12>
 8002b82:	6983      	ldr	r3, [r0, #24]
 8002b84:	b90b      	cbnz	r3, 8002b8a <__swbuf_r+0x12>
 8002b86:	f7ff fb81 	bl	800228c <__sinit>
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <__swbuf_r+0x98>)
 8002b8c:	429c      	cmp	r4, r3
 8002b8e:	d12b      	bne.n	8002be8 <__swbuf_r+0x70>
 8002b90:	686c      	ldr	r4, [r5, #4]
 8002b92:	69a3      	ldr	r3, [r4, #24]
 8002b94:	60a3      	str	r3, [r4, #8]
 8002b96:	89a3      	ldrh	r3, [r4, #12]
 8002b98:	071a      	lsls	r2, r3, #28
 8002b9a:	d52f      	bpl.n	8002bfc <__swbuf_r+0x84>
 8002b9c:	6923      	ldr	r3, [r4, #16]
 8002b9e:	b36b      	cbz	r3, 8002bfc <__swbuf_r+0x84>
 8002ba0:	6923      	ldr	r3, [r4, #16]
 8002ba2:	6820      	ldr	r0, [r4, #0]
 8002ba4:	b2f6      	uxtb	r6, r6
 8002ba6:	1ac0      	subs	r0, r0, r3
 8002ba8:	6963      	ldr	r3, [r4, #20]
 8002baa:	4637      	mov	r7, r6
 8002bac:	4283      	cmp	r3, r0
 8002bae:	dc04      	bgt.n	8002bba <__swbuf_r+0x42>
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	f000 f944 	bl	8002e40 <_fflush_r>
 8002bb8:	bb30      	cbnz	r0, 8002c08 <__swbuf_r+0x90>
 8002bba:	68a3      	ldr	r3, [r4, #8]
 8002bbc:	3001      	adds	r0, #1
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	60a3      	str	r3, [r4, #8]
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	6022      	str	r2, [r4, #0]
 8002bc8:	701e      	strb	r6, [r3, #0]
 8002bca:	6963      	ldr	r3, [r4, #20]
 8002bcc:	4283      	cmp	r3, r0
 8002bce:	d004      	beq.n	8002bda <__swbuf_r+0x62>
 8002bd0:	89a3      	ldrh	r3, [r4, #12]
 8002bd2:	07db      	lsls	r3, r3, #31
 8002bd4:	d506      	bpl.n	8002be4 <__swbuf_r+0x6c>
 8002bd6:	2e0a      	cmp	r6, #10
 8002bd8:	d104      	bne.n	8002be4 <__swbuf_r+0x6c>
 8002bda:	4621      	mov	r1, r4
 8002bdc:	4628      	mov	r0, r5
 8002bde:	f000 f92f 	bl	8002e40 <_fflush_r>
 8002be2:	b988      	cbnz	r0, 8002c08 <__swbuf_r+0x90>
 8002be4:	4638      	mov	r0, r7
 8002be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <__swbuf_r+0x9c>)
 8002bea:	429c      	cmp	r4, r3
 8002bec:	d101      	bne.n	8002bf2 <__swbuf_r+0x7a>
 8002bee:	68ac      	ldr	r4, [r5, #8]
 8002bf0:	e7cf      	b.n	8002b92 <__swbuf_r+0x1a>
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <__swbuf_r+0xa0>)
 8002bf4:	429c      	cmp	r4, r3
 8002bf6:	bf08      	it	eq
 8002bf8:	68ec      	ldreq	r4, [r5, #12]
 8002bfa:	e7ca      	b.n	8002b92 <__swbuf_r+0x1a>
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	4628      	mov	r0, r5
 8002c00:	f000 f81e 	bl	8002c40 <__swsetup_r>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d0cb      	beq.n	8002ba0 <__swbuf_r+0x28>
 8002c08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002c0c:	e7ea      	b.n	8002be4 <__swbuf_r+0x6c>
 8002c0e:	bf00      	nop
 8002c10:	08003150 	.word	0x08003150
 8002c14:	08003170 	.word	0x08003170
 8002c18:	08003130 	.word	0x08003130

08002c1c <_write_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	4604      	mov	r4, r0
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	2200      	movs	r2, #0
 8002c26:	4d05      	ldr	r5, [pc, #20]	; (8002c3c <_write_r+0x20>)
 8002c28:	602a      	str	r2, [r5, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f7fd fa8e 	bl	800014c <_write>
 8002c30:	1c43      	adds	r3, r0, #1
 8002c32:	d102      	bne.n	8002c3a <_write_r+0x1e>
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	b103      	cbz	r3, 8002c3a <_write_r+0x1e>
 8002c38:	6023      	str	r3, [r4, #0]
 8002c3a:	bd38      	pop	{r3, r4, r5, pc}
 8002c3c:	20000130 	.word	0x20000130

08002c40 <__swsetup_r>:
 8002c40:	4b32      	ldr	r3, [pc, #200]	; (8002d0c <__swsetup_r+0xcc>)
 8002c42:	b570      	push	{r4, r5, r6, lr}
 8002c44:	681d      	ldr	r5, [r3, #0]
 8002c46:	4606      	mov	r6, r0
 8002c48:	460c      	mov	r4, r1
 8002c4a:	b125      	cbz	r5, 8002c56 <__swsetup_r+0x16>
 8002c4c:	69ab      	ldr	r3, [r5, #24]
 8002c4e:	b913      	cbnz	r3, 8002c56 <__swsetup_r+0x16>
 8002c50:	4628      	mov	r0, r5
 8002c52:	f7ff fb1b 	bl	800228c <__sinit>
 8002c56:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <__swsetup_r+0xd0>)
 8002c58:	429c      	cmp	r4, r3
 8002c5a:	d10f      	bne.n	8002c7c <__swsetup_r+0x3c>
 8002c5c:	686c      	ldr	r4, [r5, #4]
 8002c5e:	89a3      	ldrh	r3, [r4, #12]
 8002c60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c64:	0719      	lsls	r1, r3, #28
 8002c66:	d42c      	bmi.n	8002cc2 <__swsetup_r+0x82>
 8002c68:	06dd      	lsls	r5, r3, #27
 8002c6a:	d411      	bmi.n	8002c90 <__swsetup_r+0x50>
 8002c6c:	2309      	movs	r3, #9
 8002c6e:	6033      	str	r3, [r6, #0]
 8002c70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c78:	81a3      	strh	r3, [r4, #12]
 8002c7a:	e03e      	b.n	8002cfa <__swsetup_r+0xba>
 8002c7c:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <__swsetup_r+0xd4>)
 8002c7e:	429c      	cmp	r4, r3
 8002c80:	d101      	bne.n	8002c86 <__swsetup_r+0x46>
 8002c82:	68ac      	ldr	r4, [r5, #8]
 8002c84:	e7eb      	b.n	8002c5e <__swsetup_r+0x1e>
 8002c86:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <__swsetup_r+0xd8>)
 8002c88:	429c      	cmp	r4, r3
 8002c8a:	bf08      	it	eq
 8002c8c:	68ec      	ldreq	r4, [r5, #12]
 8002c8e:	e7e6      	b.n	8002c5e <__swsetup_r+0x1e>
 8002c90:	0758      	lsls	r0, r3, #29
 8002c92:	d512      	bpl.n	8002cba <__swsetup_r+0x7a>
 8002c94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c96:	b141      	cbz	r1, 8002caa <__swsetup_r+0x6a>
 8002c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c9c:	4299      	cmp	r1, r3
 8002c9e:	d002      	beq.n	8002ca6 <__swsetup_r+0x66>
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	f000 f99b 	bl	8002fdc <_free_r>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	6363      	str	r3, [r4, #52]	; 0x34
 8002caa:	89a3      	ldrh	r3, [r4, #12]
 8002cac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002cb0:	81a3      	strh	r3, [r4, #12]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	6063      	str	r3, [r4, #4]
 8002cb6:	6923      	ldr	r3, [r4, #16]
 8002cb8:	6023      	str	r3, [r4, #0]
 8002cba:	89a3      	ldrh	r3, [r4, #12]
 8002cbc:	f043 0308 	orr.w	r3, r3, #8
 8002cc0:	81a3      	strh	r3, [r4, #12]
 8002cc2:	6923      	ldr	r3, [r4, #16]
 8002cc4:	b94b      	cbnz	r3, 8002cda <__swsetup_r+0x9a>
 8002cc6:	89a3      	ldrh	r3, [r4, #12]
 8002cc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d003      	beq.n	8002cda <__swsetup_r+0x9a>
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	4630      	mov	r0, r6
 8002cd6:	f000 f927 	bl	8002f28 <__smakebuf_r>
 8002cda:	89a0      	ldrh	r0, [r4, #12]
 8002cdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ce0:	f010 0301 	ands.w	r3, r0, #1
 8002ce4:	d00a      	beq.n	8002cfc <__swsetup_r+0xbc>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60a3      	str	r3, [r4, #8]
 8002cea:	6963      	ldr	r3, [r4, #20]
 8002cec:	425b      	negs	r3, r3
 8002cee:	61a3      	str	r3, [r4, #24]
 8002cf0:	6923      	ldr	r3, [r4, #16]
 8002cf2:	b943      	cbnz	r3, 8002d06 <__swsetup_r+0xc6>
 8002cf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002cf8:	d1ba      	bne.n	8002c70 <__swsetup_r+0x30>
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
 8002cfc:	0781      	lsls	r1, r0, #30
 8002cfe:	bf58      	it	pl
 8002d00:	6963      	ldrpl	r3, [r4, #20]
 8002d02:	60a3      	str	r3, [r4, #8]
 8002d04:	e7f4      	b.n	8002cf0 <__swsetup_r+0xb0>
 8002d06:	2000      	movs	r0, #0
 8002d08:	e7f7      	b.n	8002cfa <__swsetup_r+0xba>
 8002d0a:	bf00      	nop
 8002d0c:	2000000c 	.word	0x2000000c
 8002d10:	08003150 	.word	0x08003150
 8002d14:	08003170 	.word	0x08003170
 8002d18:	08003130 	.word	0x08003130

08002d1c <_close_r>:
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	2300      	movs	r3, #0
 8002d20:	4d05      	ldr	r5, [pc, #20]	; (8002d38 <_close_r+0x1c>)
 8002d22:	4604      	mov	r4, r0
 8002d24:	4608      	mov	r0, r1
 8002d26:	602b      	str	r3, [r5, #0]
 8002d28:	f7fd fc1b 	bl	8000562 <_close>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d102      	bne.n	8002d36 <_close_r+0x1a>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	b103      	cbz	r3, 8002d36 <_close_r+0x1a>
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	20000130 	.word	0x20000130

08002d3c <__sflush_r>:
 8002d3c:	898a      	ldrh	r2, [r1, #12]
 8002d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d40:	4605      	mov	r5, r0
 8002d42:	0710      	lsls	r0, r2, #28
 8002d44:	460c      	mov	r4, r1
 8002d46:	d457      	bmi.n	8002df8 <__sflush_r+0xbc>
 8002d48:	684b      	ldr	r3, [r1, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	dc04      	bgt.n	8002d58 <__sflush_r+0x1c>
 8002d4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	dc01      	bgt.n	8002d58 <__sflush_r+0x1c>
 8002d54:	2000      	movs	r0, #0
 8002d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d5a:	2e00      	cmp	r6, #0
 8002d5c:	d0fa      	beq.n	8002d54 <__sflush_r+0x18>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d64:	682f      	ldr	r7, [r5, #0]
 8002d66:	602b      	str	r3, [r5, #0]
 8002d68:	d032      	beq.n	8002dd0 <__sflush_r+0x94>
 8002d6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d6c:	89a3      	ldrh	r3, [r4, #12]
 8002d6e:	075a      	lsls	r2, r3, #29
 8002d70:	d505      	bpl.n	8002d7e <__sflush_r+0x42>
 8002d72:	6863      	ldr	r3, [r4, #4]
 8002d74:	1ac0      	subs	r0, r0, r3
 8002d76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d78:	b10b      	cbz	r3, 8002d7e <__sflush_r+0x42>
 8002d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d7c:	1ac0      	subs	r0, r0, r3
 8002d7e:	2300      	movs	r3, #0
 8002d80:	4602      	mov	r2, r0
 8002d82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d84:	4628      	mov	r0, r5
 8002d86:	6a21      	ldr	r1, [r4, #32]
 8002d88:	47b0      	blx	r6
 8002d8a:	1c43      	adds	r3, r0, #1
 8002d8c:	89a3      	ldrh	r3, [r4, #12]
 8002d8e:	d106      	bne.n	8002d9e <__sflush_r+0x62>
 8002d90:	6829      	ldr	r1, [r5, #0]
 8002d92:	291d      	cmp	r1, #29
 8002d94:	d82c      	bhi.n	8002df0 <__sflush_r+0xb4>
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <__sflush_r+0x100>)
 8002d98:	40ca      	lsrs	r2, r1
 8002d9a:	07d6      	lsls	r6, r2, #31
 8002d9c:	d528      	bpl.n	8002df0 <__sflush_r+0xb4>
 8002d9e:	2200      	movs	r2, #0
 8002da0:	6062      	str	r2, [r4, #4]
 8002da2:	6922      	ldr	r2, [r4, #16]
 8002da4:	04d9      	lsls	r1, r3, #19
 8002da6:	6022      	str	r2, [r4, #0]
 8002da8:	d504      	bpl.n	8002db4 <__sflush_r+0x78>
 8002daa:	1c42      	adds	r2, r0, #1
 8002dac:	d101      	bne.n	8002db2 <__sflush_r+0x76>
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	b903      	cbnz	r3, 8002db4 <__sflush_r+0x78>
 8002db2:	6560      	str	r0, [r4, #84]	; 0x54
 8002db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002db6:	602f      	str	r7, [r5, #0]
 8002db8:	2900      	cmp	r1, #0
 8002dba:	d0cb      	beq.n	8002d54 <__sflush_r+0x18>
 8002dbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002dc0:	4299      	cmp	r1, r3
 8002dc2:	d002      	beq.n	8002dca <__sflush_r+0x8e>
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	f000 f909 	bl	8002fdc <_free_r>
 8002dca:	2000      	movs	r0, #0
 8002dcc:	6360      	str	r0, [r4, #52]	; 0x34
 8002dce:	e7c2      	b.n	8002d56 <__sflush_r+0x1a>
 8002dd0:	6a21      	ldr	r1, [r4, #32]
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	47b0      	blx	r6
 8002dd8:	1c41      	adds	r1, r0, #1
 8002dda:	d1c7      	bne.n	8002d6c <__sflush_r+0x30>
 8002ddc:	682b      	ldr	r3, [r5, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0c4      	beq.n	8002d6c <__sflush_r+0x30>
 8002de2:	2b1d      	cmp	r3, #29
 8002de4:	d001      	beq.n	8002dea <__sflush_r+0xae>
 8002de6:	2b16      	cmp	r3, #22
 8002de8:	d101      	bne.n	8002dee <__sflush_r+0xb2>
 8002dea:	602f      	str	r7, [r5, #0]
 8002dec:	e7b2      	b.n	8002d54 <__sflush_r+0x18>
 8002dee:	89a3      	ldrh	r3, [r4, #12]
 8002df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df4:	81a3      	strh	r3, [r4, #12]
 8002df6:	e7ae      	b.n	8002d56 <__sflush_r+0x1a>
 8002df8:	690f      	ldr	r7, [r1, #16]
 8002dfa:	2f00      	cmp	r7, #0
 8002dfc:	d0aa      	beq.n	8002d54 <__sflush_r+0x18>
 8002dfe:	0793      	lsls	r3, r2, #30
 8002e00:	bf18      	it	ne
 8002e02:	2300      	movne	r3, #0
 8002e04:	680e      	ldr	r6, [r1, #0]
 8002e06:	bf08      	it	eq
 8002e08:	694b      	ldreq	r3, [r1, #20]
 8002e0a:	1bf6      	subs	r6, r6, r7
 8002e0c:	600f      	str	r7, [r1, #0]
 8002e0e:	608b      	str	r3, [r1, #8]
 8002e10:	2e00      	cmp	r6, #0
 8002e12:	dd9f      	ble.n	8002d54 <__sflush_r+0x18>
 8002e14:	4633      	mov	r3, r6
 8002e16:	463a      	mov	r2, r7
 8002e18:	4628      	mov	r0, r5
 8002e1a:	6a21      	ldr	r1, [r4, #32]
 8002e1c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002e20:	47e0      	blx	ip
 8002e22:	2800      	cmp	r0, #0
 8002e24:	dc06      	bgt.n	8002e34 <__sflush_r+0xf8>
 8002e26:	89a3      	ldrh	r3, [r4, #12]
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e30:	81a3      	strh	r3, [r4, #12]
 8002e32:	e790      	b.n	8002d56 <__sflush_r+0x1a>
 8002e34:	4407      	add	r7, r0
 8002e36:	1a36      	subs	r6, r6, r0
 8002e38:	e7ea      	b.n	8002e10 <__sflush_r+0xd4>
 8002e3a:	bf00      	nop
 8002e3c:	20400001 	.word	0x20400001

08002e40 <_fflush_r>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	690b      	ldr	r3, [r1, #16]
 8002e44:	4605      	mov	r5, r0
 8002e46:	460c      	mov	r4, r1
 8002e48:	b913      	cbnz	r3, 8002e50 <_fflush_r+0x10>
 8002e4a:	2500      	movs	r5, #0
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
 8002e50:	b118      	cbz	r0, 8002e5a <_fflush_r+0x1a>
 8002e52:	6983      	ldr	r3, [r0, #24]
 8002e54:	b90b      	cbnz	r3, 8002e5a <_fflush_r+0x1a>
 8002e56:	f7ff fa19 	bl	800228c <__sinit>
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <_fflush_r+0x6c>)
 8002e5c:	429c      	cmp	r4, r3
 8002e5e:	d11b      	bne.n	8002e98 <_fflush_r+0x58>
 8002e60:	686c      	ldr	r4, [r5, #4]
 8002e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0ef      	beq.n	8002e4a <_fflush_r+0xa>
 8002e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e6c:	07d0      	lsls	r0, r2, #31
 8002e6e:	d404      	bmi.n	8002e7a <_fflush_r+0x3a>
 8002e70:	0599      	lsls	r1, r3, #22
 8002e72:	d402      	bmi.n	8002e7a <_fflush_r+0x3a>
 8002e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e76:	f7ff faa7 	bl	80023c8 <__retarget_lock_acquire_recursive>
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	f7ff ff5d 	bl	8002d3c <__sflush_r>
 8002e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e84:	4605      	mov	r5, r0
 8002e86:	07da      	lsls	r2, r3, #31
 8002e88:	d4e0      	bmi.n	8002e4c <_fflush_r+0xc>
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	059b      	lsls	r3, r3, #22
 8002e8e:	d4dd      	bmi.n	8002e4c <_fflush_r+0xc>
 8002e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e92:	f7ff fa9a 	bl	80023ca <__retarget_lock_release_recursive>
 8002e96:	e7d9      	b.n	8002e4c <_fflush_r+0xc>
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <_fflush_r+0x70>)
 8002e9a:	429c      	cmp	r4, r3
 8002e9c:	d101      	bne.n	8002ea2 <_fflush_r+0x62>
 8002e9e:	68ac      	ldr	r4, [r5, #8]
 8002ea0:	e7df      	b.n	8002e62 <_fflush_r+0x22>
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <_fflush_r+0x74>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	bf08      	it	eq
 8002ea8:	68ec      	ldreq	r4, [r5, #12]
 8002eaa:	e7da      	b.n	8002e62 <_fflush_r+0x22>
 8002eac:	08003150 	.word	0x08003150
 8002eb0:	08003170 	.word	0x08003170
 8002eb4:	08003130 	.word	0x08003130

08002eb8 <_lseek_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	4604      	mov	r4, r0
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4d05      	ldr	r5, [pc, #20]	; (8002ed8 <_lseek_r+0x20>)
 8002ec4:	602a      	str	r2, [r5, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f7fd fb6f 	bl	80005aa <_lseek>
 8002ecc:	1c43      	adds	r3, r0, #1
 8002ece:	d102      	bne.n	8002ed6 <_lseek_r+0x1e>
 8002ed0:	682b      	ldr	r3, [r5, #0]
 8002ed2:	b103      	cbz	r3, 8002ed6 <_lseek_r+0x1e>
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
 8002ed8:	20000130 	.word	0x20000130

08002edc <__swhatbuf_r>:
 8002edc:	b570      	push	{r4, r5, r6, lr}
 8002ede:	460e      	mov	r6, r1
 8002ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	2900      	cmp	r1, #0
 8002ee8:	461d      	mov	r5, r3
 8002eea:	b096      	sub	sp, #88	; 0x58
 8002eec:	da08      	bge.n	8002f00 <__swhatbuf_r+0x24>
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002ef4:	602a      	str	r2, [r5, #0]
 8002ef6:	061a      	lsls	r2, r3, #24
 8002ef8:	d410      	bmi.n	8002f1c <__swhatbuf_r+0x40>
 8002efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002efe:	e00e      	b.n	8002f1e <__swhatbuf_r+0x42>
 8002f00:	466a      	mov	r2, sp
 8002f02:	f000 f8c5 	bl	8003090 <_fstat_r>
 8002f06:	2800      	cmp	r0, #0
 8002f08:	dbf1      	blt.n	8002eee <__swhatbuf_r+0x12>
 8002f0a:	9a01      	ldr	r2, [sp, #4]
 8002f0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f14:	425a      	negs	r2, r3
 8002f16:	415a      	adcs	r2, r3
 8002f18:	602a      	str	r2, [r5, #0]
 8002f1a:	e7ee      	b.n	8002efa <__swhatbuf_r+0x1e>
 8002f1c:	2340      	movs	r3, #64	; 0x40
 8002f1e:	2000      	movs	r0, #0
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	b016      	add	sp, #88	; 0x58
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f28 <__smakebuf_r>:
 8002f28:	898b      	ldrh	r3, [r1, #12]
 8002f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f2c:	079d      	lsls	r5, r3, #30
 8002f2e:	4606      	mov	r6, r0
 8002f30:	460c      	mov	r4, r1
 8002f32:	d507      	bpl.n	8002f44 <__smakebuf_r+0x1c>
 8002f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	6123      	str	r3, [r4, #16]
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	6163      	str	r3, [r4, #20]
 8002f40:	b002      	add	sp, #8
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	466a      	mov	r2, sp
 8002f46:	ab01      	add	r3, sp, #4
 8002f48:	f7ff ffc8 	bl	8002edc <__swhatbuf_r>
 8002f4c:	9900      	ldr	r1, [sp, #0]
 8002f4e:	4605      	mov	r5, r0
 8002f50:	4630      	mov	r0, r6
 8002f52:	f7ff fa5b 	bl	800240c <_malloc_r>
 8002f56:	b948      	cbnz	r0, 8002f6c <__smakebuf_r+0x44>
 8002f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f5c:	059a      	lsls	r2, r3, #22
 8002f5e:	d4ef      	bmi.n	8002f40 <__smakebuf_r+0x18>
 8002f60:	f023 0303 	bic.w	r3, r3, #3
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	81a3      	strh	r3, [r4, #12]
 8002f6a:	e7e3      	b.n	8002f34 <__smakebuf_r+0xc>
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <__smakebuf_r+0x7c>)
 8002f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f70:	89a3      	ldrh	r3, [r4, #12]
 8002f72:	6020      	str	r0, [r4, #0]
 8002f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f78:	81a3      	strh	r3, [r4, #12]
 8002f7a:	9b00      	ldr	r3, [sp, #0]
 8002f7c:	6120      	str	r0, [r4, #16]
 8002f7e:	6163      	str	r3, [r4, #20]
 8002f80:	9b01      	ldr	r3, [sp, #4]
 8002f82:	b15b      	cbz	r3, 8002f9c <__smakebuf_r+0x74>
 8002f84:	4630      	mov	r0, r6
 8002f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f8a:	f000 f893 	bl	80030b4 <_isatty_r>
 8002f8e:	b128      	cbz	r0, 8002f9c <__smakebuf_r+0x74>
 8002f90:	89a3      	ldrh	r3, [r4, #12]
 8002f92:	f023 0303 	bic.w	r3, r3, #3
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	81a3      	strh	r3, [r4, #12]
 8002f9c:	89a0      	ldrh	r0, [r4, #12]
 8002f9e:	4305      	orrs	r5, r0
 8002fa0:	81a5      	strh	r5, [r4, #12]
 8002fa2:	e7cd      	b.n	8002f40 <__smakebuf_r+0x18>
 8002fa4:	08002225 	.word	0x08002225

08002fa8 <memchr>:
 8002fa8:	4603      	mov	r3, r0
 8002faa:	b510      	push	{r4, lr}
 8002fac:	b2c9      	uxtb	r1, r1
 8002fae:	4402      	add	r2, r0
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	d101      	bne.n	8002fba <memchr+0x12>
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	e003      	b.n	8002fc2 <memchr+0x1a>
 8002fba:	7804      	ldrb	r4, [r0, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	428c      	cmp	r4, r1
 8002fc0:	d1f6      	bne.n	8002fb0 <memchr+0x8>
 8002fc2:	bd10      	pop	{r4, pc}

08002fc4 <__malloc_lock>:
 8002fc4:	4801      	ldr	r0, [pc, #4]	; (8002fcc <__malloc_lock+0x8>)
 8002fc6:	f7ff b9ff 	b.w	80023c8 <__retarget_lock_acquire_recursive>
 8002fca:	bf00      	nop
 8002fcc:	20000124 	.word	0x20000124

08002fd0 <__malloc_unlock>:
 8002fd0:	4801      	ldr	r0, [pc, #4]	; (8002fd8 <__malloc_unlock+0x8>)
 8002fd2:	f7ff b9fa 	b.w	80023ca <__retarget_lock_release_recursive>
 8002fd6:	bf00      	nop
 8002fd8:	20000124 	.word	0x20000124

08002fdc <_free_r>:
 8002fdc:	b538      	push	{r3, r4, r5, lr}
 8002fde:	4605      	mov	r5, r0
 8002fe0:	2900      	cmp	r1, #0
 8002fe2:	d040      	beq.n	8003066 <_free_r+0x8a>
 8002fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe8:	1f0c      	subs	r4, r1, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bfb8      	it	lt
 8002fee:	18e4      	addlt	r4, r4, r3
 8002ff0:	f7ff ffe8 	bl	8002fc4 <__malloc_lock>
 8002ff4:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <_free_r+0x8c>)
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	b933      	cbnz	r3, 8003008 <_free_r+0x2c>
 8002ffa:	6063      	str	r3, [r4, #4]
 8002ffc:	6014      	str	r4, [r2, #0]
 8002ffe:	4628      	mov	r0, r5
 8003000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003004:	f7ff bfe4 	b.w	8002fd0 <__malloc_unlock>
 8003008:	42a3      	cmp	r3, r4
 800300a:	d908      	bls.n	800301e <_free_r+0x42>
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	1821      	adds	r1, r4, r0
 8003010:	428b      	cmp	r3, r1
 8003012:	bf01      	itttt	eq
 8003014:	6819      	ldreq	r1, [r3, #0]
 8003016:	685b      	ldreq	r3, [r3, #4]
 8003018:	1809      	addeq	r1, r1, r0
 800301a:	6021      	streq	r1, [r4, #0]
 800301c:	e7ed      	b.n	8002ffa <_free_r+0x1e>
 800301e:	461a      	mov	r2, r3
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	b10b      	cbz	r3, 8003028 <_free_r+0x4c>
 8003024:	42a3      	cmp	r3, r4
 8003026:	d9fa      	bls.n	800301e <_free_r+0x42>
 8003028:	6811      	ldr	r1, [r2, #0]
 800302a:	1850      	adds	r0, r2, r1
 800302c:	42a0      	cmp	r0, r4
 800302e:	d10b      	bne.n	8003048 <_free_r+0x6c>
 8003030:	6820      	ldr	r0, [r4, #0]
 8003032:	4401      	add	r1, r0
 8003034:	1850      	adds	r0, r2, r1
 8003036:	4283      	cmp	r3, r0
 8003038:	6011      	str	r1, [r2, #0]
 800303a:	d1e0      	bne.n	8002ffe <_free_r+0x22>
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4401      	add	r1, r0
 8003042:	6011      	str	r1, [r2, #0]
 8003044:	6053      	str	r3, [r2, #4]
 8003046:	e7da      	b.n	8002ffe <_free_r+0x22>
 8003048:	d902      	bls.n	8003050 <_free_r+0x74>
 800304a:	230c      	movs	r3, #12
 800304c:	602b      	str	r3, [r5, #0]
 800304e:	e7d6      	b.n	8002ffe <_free_r+0x22>
 8003050:	6820      	ldr	r0, [r4, #0]
 8003052:	1821      	adds	r1, r4, r0
 8003054:	428b      	cmp	r3, r1
 8003056:	bf01      	itttt	eq
 8003058:	6819      	ldreq	r1, [r3, #0]
 800305a:	685b      	ldreq	r3, [r3, #4]
 800305c:	1809      	addeq	r1, r1, r0
 800305e:	6021      	streq	r1, [r4, #0]
 8003060:	6063      	str	r3, [r4, #4]
 8003062:	6054      	str	r4, [r2, #4]
 8003064:	e7cb      	b.n	8002ffe <_free_r+0x22>
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	20000128 	.word	0x20000128

0800306c <_read_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4604      	mov	r4, r0
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	2200      	movs	r2, #0
 8003076:	4d05      	ldr	r5, [pc, #20]	; (800308c <_read_r+0x20>)
 8003078:	602a      	str	r2, [r5, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	f7fd fa54 	bl	8000528 <_read>
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d102      	bne.n	800308a <_read_r+0x1e>
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	b103      	cbz	r3, 800308a <_read_r+0x1e>
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	bd38      	pop	{r3, r4, r5, pc}
 800308c:	20000130 	.word	0x20000130

08003090 <_fstat_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	2300      	movs	r3, #0
 8003094:	4d06      	ldr	r5, [pc, #24]	; (80030b0 <_fstat_r+0x20>)
 8003096:	4604      	mov	r4, r0
 8003098:	4608      	mov	r0, r1
 800309a:	4611      	mov	r1, r2
 800309c:	602b      	str	r3, [r5, #0]
 800309e:	f7fd fa6b 	bl	8000578 <_fstat>
 80030a2:	1c43      	adds	r3, r0, #1
 80030a4:	d102      	bne.n	80030ac <_fstat_r+0x1c>
 80030a6:	682b      	ldr	r3, [r5, #0]
 80030a8:	b103      	cbz	r3, 80030ac <_fstat_r+0x1c>
 80030aa:	6023      	str	r3, [r4, #0]
 80030ac:	bd38      	pop	{r3, r4, r5, pc}
 80030ae:	bf00      	nop
 80030b0:	20000130 	.word	0x20000130

080030b4 <_isatty_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	2300      	movs	r3, #0
 80030b8:	4d05      	ldr	r5, [pc, #20]	; (80030d0 <_isatty_r+0x1c>)
 80030ba:	4604      	mov	r4, r0
 80030bc:	4608      	mov	r0, r1
 80030be:	602b      	str	r3, [r5, #0]
 80030c0:	f7fd fa69 	bl	8000596 <_isatty>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <_isatty_r+0x1a>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	b103      	cbz	r3, 80030ce <_isatty_r+0x1a>
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
 80030d0:	20000130 	.word	0x20000130

080030d4 <_init>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr

080030e0 <_fini>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr
